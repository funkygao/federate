// Code generated from Java8Parser.g4 by ANTLR 4.13.2. DO NOT EDIT.

package parser // Java8Parser

import (
	"fmt"
	"strconv"
	"sync"

	"github.com/antlr4-go/antlr/v4"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}

type Java8Parser struct {
	*antlr.BaseParser
}

var Java8ParserParserStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func java8parserParserInit() {
	staticData := &Java8ParserParserStaticData
	staticData.LiteralNames = []string{
		"", "'abstract'", "'assert'", "'boolean'", "'break'", "'byte'", "'case'",
		"'catch'", "'char'", "'class'", "'const'", "'continue'", "'default'",
		"'do'", "'double'", "'else'", "'enum'", "'extends'", "'final'", "'finally'",
		"'float'", "'for'", "'if'", "'goto'", "'implements'", "'import'", "'instanceof'",
		"'int'", "'interface'", "'long'", "'native'", "'new'", "'package'",
		"'private'", "'protected'", "'public'", "'return'", "'short'", "'static'",
		"'strictfp'", "'super'", "'switch'", "'synchronized'", "'this'", "'throw'",
		"'throws'", "'transient'", "'try'", "'void'", "'volatile'", "'while'",
		"", "", "", "", "", "'null'", "'('", "')'", "'{'", "'}'", "'['", "']'",
		"';'", "','", "'.'", "'='", "'>'", "'<'", "'!'", "'~'", "'?'", "':'",
		"'=='", "'<='", "'>='", "'!='", "'&&'", "'||'", "'++'", "'--'", "'+'",
		"'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'->'", "'::'", "'+='",
		"'-='", "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", "'<<='", "'>>='",
		"'>>>='", "", "'@'", "'...'",
	}
	staticData.SymbolicNames = []string{
		"", "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", "BYTE", "CASE", "CATCH",
		"CHAR", "CLASS", "CONST", "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE",
		"ENUM", "EXTENDS", "FINAL", "FINALLY", "FLOAT", "FOR", "IF", "GOTO",
		"IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", "INTERFACE", "LONG", "NATIVE",
		"NEW", "PACKAGE", "PRIVATE", "PROTECTED", "PUBLIC", "RETURN", "SHORT",
		"STATIC", "STRICTFP", "SUPER", "SWITCH", "SYNCHRONIZED", "THIS", "THROW",
		"THROWS", "TRANSIENT", "TRY", "VOID", "VOLATILE", "WHILE", "IntegerLiteral",
		"FloatingPointLiteral", "BooleanLiteral", "CharacterLiteral", "StringLiteral",
		"NullLiteral", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK",
		"SEMI", "COMMA", "DOT", "ASSIGN", "GT", "LT", "BANG", "TILDE", "QUESTION",
		"COLON", "EQUAL", "LE", "GE", "NOTEQUAL", "AND", "OR", "INC", "DEC",
		"ADD", "SUB", "MUL", "DIV", "BITAND", "BITOR", "CARET", "MOD", "ARROW",
		"COLONCOLON", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN",
		"AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN",
		"RSHIFT_ASSIGN", "URSHIFT_ASSIGN", "Identifier", "AT", "ELLIPSIS", "WS",
		"COMMENT", "LINE_COMMENT",
	}
	staticData.RuleNames = []string{
		"literal", "primitiveType", "numericType", "integralType", "floatingPointType",
		"referenceType", "classOrInterfaceType", "classType", "classType_lf_classOrInterfaceType",
		"classType_lfno_classOrInterfaceType", "interfaceType", "interfaceType_lf_classOrInterfaceType",
		"interfaceType_lfno_classOrInterfaceType", "typeVariable", "arrayType",
		"dims", "typeParameter", "typeParameterModifier", "typeBound", "additionalBound",
		"typeArguments", "typeArgumentList", "typeArgument", "wildcard", "wildcardBounds",
		"packageName", "typeName", "packageOrTypeName", "expressionName", "methodName",
		"ambiguousName", "compilationUnit", "packageDeclaration", "packageModifier",
		"importDeclaration", "singleTypeImportDeclaration", "typeImportOnDemandDeclaration",
		"singleStaticImportDeclaration", "staticImportOnDemandDeclaration",
		"typeDeclaration", "classDeclaration", "normalClassDeclaration", "classModifier",
		"typeParameters", "typeParameterList", "superclass", "superinterfaces",
		"interfaceTypeList", "classBody", "classBodyDeclaration", "classMemberDeclaration",
		"fieldDeclaration", "fieldModifier", "variableDeclaratorList", "variableDeclarator",
		"variableDeclaratorId", "variableInitializer", "unannType", "unannPrimitiveType",
		"unannReferenceType", "unannClassOrInterfaceType", "unannClassType",
		"unannClassType_lf_unannClassOrInterfaceType", "unannClassType_lfno_unannClassOrInterfaceType",
		"unannInterfaceType", "unannInterfaceType_lf_unannClassOrInterfaceType",
		"unannInterfaceType_lfno_unannClassOrInterfaceType", "unannTypeVariable",
		"unannArrayType", "methodDeclaration", "methodModifier", "methodHeader",
		"result", "methodDeclarator", "formalParameterList", "formalParameters",
		"formalParameter", "variableModifier", "lastFormalParameter", "receiverParameter",
		"throws_", "exceptionTypeList", "exceptionType", "methodBody", "instanceInitializer",
		"staticInitializer", "constructorDeclaration", "constructorModifier",
		"constructorDeclarator", "simpleTypeName", "constructorBody", "explicitConstructorInvocation",
		"enumDeclaration", "enumBody", "enumConstantList", "enumConstant", "enumConstantModifier",
		"enumBodyDeclarations", "interfaceDeclaration", "normalInterfaceDeclaration",
		"interfaceModifier", "extendsInterfaces", "interfaceBody", "interfaceMemberDeclaration",
		"constantDeclaration", "constantModifier", "interfaceMethodDeclaration",
		"interfaceMethodModifier", "annotationTypeDeclaration", "annotationTypeBody",
		"annotationTypeMemberDeclaration", "annotationTypeElementDeclaration",
		"annotationTypeElementModifier", "defaultValue", "annotation", "normalAnnotation",
		"elementValuePairList", "elementValuePair", "elementValue", "elementValueArrayInitializer",
		"elementValueList", "markerAnnotation", "singleElementAnnotation", "arrayInitializer",
		"variableInitializerList", "block", "blockStatements", "blockStatement",
		"localVariableDeclarationStatement", "localVariableDeclaration", "statement",
		"statementNoShortIf", "statementWithoutTrailingSubstatement", "emptyStatement_",
		"labeledStatement", "labeledStatementNoShortIf", "expressionStatement",
		"statementExpression", "ifThenStatement", "ifThenElseStatement", "ifThenElseStatementNoShortIf",
		"assertStatement", "switchStatement", "switchBlock", "switchBlockStatementGroup",
		"switchLabels", "switchLabel", "enumConstantName", "whileStatement",
		"whileStatementNoShortIf", "doStatement", "forStatement", "forStatementNoShortIf",
		"basicForStatement", "basicForStatementNoShortIf", "forInit", "forUpdate",
		"statementExpressionList", "enhancedForStatement", "enhancedForStatementNoShortIf",
		"breakStatement", "continueStatement", "returnStatement", "throwStatement",
		"synchronizedStatement", "tryStatement", "catches", "catchClause", "catchFormalParameter",
		"catchType", "finally_", "tryWithResourcesStatement", "resourceSpecification",
		"resourceList", "resource", "primary", "primaryNoNewArray", "primaryNoNewArray_lf_arrayAccess",
		"primaryNoNewArray_lfno_arrayAccess", "primaryNoNewArray_lf_primary",
		"primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary", "primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary",
		"primaryNoNewArray_lfno_primary", "primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary",
		"primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary", "classInstanceCreationExpression",
		"classInstanceCreationExpression_lf_primary", "classInstanceCreationExpression_lfno_primary",
		"typeArgumentsOrDiamond", "fieldAccess", "fieldAccess_lf_primary", "fieldAccess_lfno_primary",
		"arrayAccess", "arrayAccess_lf_primary", "arrayAccess_lfno_primary",
		"methodInvocation", "methodInvocation_lf_primary", "methodInvocation_lfno_primary",
		"argumentList", "methodReference", "methodReference_lf_primary", "methodReference_lfno_primary",
		"arrayCreationExpression", "dimExprs", "dimExpr", "constantExpression",
		"expression", "lambdaExpression", "lambdaParameters", "inferredFormalParameterList",
		"lambdaBody", "assignmentExpression", "assignment", "leftHandSide",
		"assignmentOperator", "conditionalExpression", "conditionalOrExpression",
		"conditionalAndExpression", "inclusiveOrExpression", "exclusiveOrExpression",
		"andExpression", "equalityExpression", "relationalExpression", "shiftExpression",
		"additiveExpression", "multiplicativeExpression", "unaryExpression",
		"preIncrementExpression", "preDecrementExpression", "unaryExpressionNotPlusMinus",
		"postfixExpression", "postIncrementExpression", "postIncrementExpression_lf_postfixExpression",
		"postDecrementExpression", "postDecrementExpression_lf_postfixExpression",
		"castExpression",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 1, 107, 2843, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4,
		7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10,
		7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7,
		15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20,
		2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2,
		26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31,
		7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7,
		36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41,
		2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2,
		47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52,
		7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7,
		57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62,
		2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2,
		68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73,
		7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2, 78, 7,
		78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7, 82, 2, 83, 7, 83,
		2, 84, 7, 84, 2, 85, 7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7, 88, 2,
		89, 7, 89, 2, 90, 7, 90, 2, 91, 7, 91, 2, 92, 7, 92, 2, 93, 7, 93, 2, 94,
		7, 94, 2, 95, 7, 95, 2, 96, 7, 96, 2, 97, 7, 97, 2, 98, 7, 98, 2, 99, 7,
		99, 2, 100, 7, 100, 2, 101, 7, 101, 2, 102, 7, 102, 2, 103, 7, 103, 2,
		104, 7, 104, 2, 105, 7, 105, 2, 106, 7, 106, 2, 107, 7, 107, 2, 108, 7,
		108, 2, 109, 7, 109, 2, 110, 7, 110, 2, 111, 7, 111, 2, 112, 7, 112, 2,
		113, 7, 113, 2, 114, 7, 114, 2, 115, 7, 115, 2, 116, 7, 116, 2, 117, 7,
		117, 2, 118, 7, 118, 2, 119, 7, 119, 2, 120, 7, 120, 2, 121, 7, 121, 2,
		122, 7, 122, 2, 123, 7, 123, 2, 124, 7, 124, 2, 125, 7, 125, 2, 126, 7,
		126, 2, 127, 7, 127, 2, 128, 7, 128, 2, 129, 7, 129, 2, 130, 7, 130, 2,
		131, 7, 131, 2, 132, 7, 132, 2, 133, 7, 133, 2, 134, 7, 134, 2, 135, 7,
		135, 2, 136, 7, 136, 2, 137, 7, 137, 2, 138, 7, 138, 2, 139, 7, 139, 2,
		140, 7, 140, 2, 141, 7, 141, 2, 142, 7, 142, 2, 143, 7, 143, 2, 144, 7,
		144, 2, 145, 7, 145, 2, 146, 7, 146, 2, 147, 7, 147, 2, 148, 7, 148, 2,
		149, 7, 149, 2, 150, 7, 150, 2, 151, 7, 151, 2, 152, 7, 152, 2, 153, 7,
		153, 2, 154, 7, 154, 2, 155, 7, 155, 2, 156, 7, 156, 2, 157, 7, 157, 2,
		158, 7, 158, 2, 159, 7, 159, 2, 160, 7, 160, 2, 161, 7, 161, 2, 162, 7,
		162, 2, 163, 7, 163, 2, 164, 7, 164, 2, 165, 7, 165, 2, 166, 7, 166, 2,
		167, 7, 167, 2, 168, 7, 168, 2, 169, 7, 169, 2, 170, 7, 170, 2, 171, 7,
		171, 2, 172, 7, 172, 2, 173, 7, 173, 2, 174, 7, 174, 2, 175, 7, 175, 2,
		176, 7, 176, 2, 177, 7, 177, 2, 178, 7, 178, 2, 179, 7, 179, 2, 180, 7,
		180, 2, 181, 7, 181, 2, 182, 7, 182, 2, 183, 7, 183, 2, 184, 7, 184, 2,
		185, 7, 185, 2, 186, 7, 186, 2, 187, 7, 187, 2, 188, 7, 188, 2, 189, 7,
		189, 2, 190, 7, 190, 2, 191, 7, 191, 2, 192, 7, 192, 2, 193, 7, 193, 2,
		194, 7, 194, 2, 195, 7, 195, 2, 196, 7, 196, 2, 197, 7, 197, 2, 198, 7,
		198, 2, 199, 7, 199, 2, 200, 7, 200, 2, 201, 7, 201, 2, 202, 7, 202, 2,
		203, 7, 203, 2, 204, 7, 204, 2, 205, 7, 205, 2, 206, 7, 206, 2, 207, 7,
		207, 2, 208, 7, 208, 2, 209, 7, 209, 2, 210, 7, 210, 2, 211, 7, 211, 2,
		212, 7, 212, 2, 213, 7, 213, 2, 214, 7, 214, 2, 215, 7, 215, 2, 216, 7,
		216, 2, 217, 7, 217, 2, 218, 7, 218, 2, 219, 7, 219, 2, 220, 7, 220, 2,
		221, 7, 221, 2, 222, 7, 222, 2, 223, 7, 223, 2, 224, 7, 224, 2, 225, 7,
		225, 2, 226, 7, 226, 2, 227, 7, 227, 2, 228, 7, 228, 2, 229, 7, 229, 2,
		230, 7, 230, 2, 231, 7, 231, 2, 232, 7, 232, 2, 233, 7, 233, 2, 234, 7,
		234, 2, 235, 7, 235, 1, 0, 1, 0, 1, 1, 5, 1, 476, 8, 1, 10, 1, 12, 1, 479,
		9, 1, 1, 1, 1, 1, 5, 1, 483, 8, 1, 10, 1, 12, 1, 486, 9, 1, 1, 1, 3, 1,
		489, 8, 1, 1, 2, 1, 2, 3, 2, 493, 8, 2, 1, 3, 1, 3, 1, 4, 1, 4, 1, 5, 1,
		5, 1, 5, 3, 5, 502, 8, 5, 1, 6, 1, 6, 3, 6, 506, 8, 6, 1, 6, 1, 6, 5, 6,
		510, 8, 6, 10, 6, 12, 6, 513, 9, 6, 1, 7, 5, 7, 516, 8, 7, 10, 7, 12, 7,
		519, 9, 7, 1, 7, 1, 7, 3, 7, 523, 8, 7, 1, 7, 1, 7, 1, 7, 5, 7, 528, 8,
		7, 10, 7, 12, 7, 531, 9, 7, 1, 7, 1, 7, 3, 7, 535, 8, 7, 3, 7, 537, 8,
		7, 1, 8, 1, 8, 5, 8, 541, 8, 8, 10, 8, 12, 8, 544, 9, 8, 1, 8, 1, 8, 3,
		8, 548, 8, 8, 1, 9, 5, 9, 551, 8, 9, 10, 9, 12, 9, 554, 9, 9, 1, 9, 1,
		9, 3, 9, 558, 8, 9, 1, 10, 1, 10, 1, 11, 1, 11, 1, 12, 1, 12, 1, 13, 5,
		13, 567, 8, 13, 10, 13, 12, 13, 570, 9, 13, 1, 13, 1, 13, 1, 14, 1, 14,
		1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 3, 14, 583, 8, 14, 1,
		15, 5, 15, 586, 8, 15, 10, 15, 12, 15, 589, 9, 15, 1, 15, 1, 15, 1, 15,
		5, 15, 594, 8, 15, 10, 15, 12, 15, 597, 9, 15, 1, 15, 1, 15, 5, 15, 601,
		8, 15, 10, 15, 12, 15, 604, 9, 15, 1, 16, 5, 16, 607, 8, 16, 10, 16, 12,
		16, 610, 9, 16, 1, 16, 1, 16, 3, 16, 614, 8, 16, 1, 17, 1, 17, 1, 18, 1,
		18, 1, 18, 1, 18, 1, 18, 5, 18, 623, 8, 18, 10, 18, 12, 18, 626, 9, 18,
		3, 18, 628, 8, 18, 1, 19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 20, 1, 20, 1,
		21, 1, 21, 1, 21, 5, 21, 640, 8, 21, 10, 21, 12, 21, 643, 9, 21, 1, 22,
		1, 22, 3, 22, 647, 8, 22, 1, 23, 5, 23, 650, 8, 23, 10, 23, 12, 23, 653,
		9, 23, 1, 23, 1, 23, 3, 23, 657, 8, 23, 1, 24, 1, 24, 1, 24, 1, 24, 3,
		24, 663, 8, 24, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 5, 25, 671, 8,
		25, 10, 25, 12, 25, 674, 9, 25, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 3, 26,
		681, 8, 26, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 5, 27, 689, 8, 27,
		10, 27, 12, 27, 692, 9, 27, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 3, 28, 699,
		8, 28, 1, 29, 1, 29, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 5, 30, 709,
		8, 30, 10, 30, 12, 30, 712, 9, 30, 1, 31, 3, 31, 715, 8, 31, 1, 31, 5,
		31, 718, 8, 31, 10, 31, 12, 31, 721, 9, 31, 1, 31, 5, 31, 724, 8, 31, 10,
		31, 12, 31, 727, 9, 31, 1, 31, 1, 31, 1, 32, 5, 32, 732, 8, 32, 10, 32,
		12, 32, 735, 9, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 33, 1, 33, 1, 34, 1,
		34, 1, 34, 1, 34, 3, 34, 747, 8, 34, 1, 35, 1, 35, 1, 35, 1, 35, 1, 36,
		1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1,
		37, 1, 37, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 39, 1, 39,
		1, 39, 3, 39, 776, 8, 39, 1, 40, 1, 40, 3, 40, 780, 8, 40, 1, 41, 5, 41,
		783, 8, 41, 10, 41, 12, 41, 786, 9, 41, 1, 41, 1, 41, 1, 41, 3, 41, 791,
		8, 41, 1, 41, 3, 41, 794, 8, 41, 1, 41, 3, 41, 797, 8, 41, 1, 41, 1, 41,
		1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 3, 42, 809, 8,
		42, 1, 43, 1, 43, 1, 43, 1, 43, 1, 44, 1, 44, 1, 44, 5, 44, 818, 8, 44,
		10, 44, 12, 44, 821, 9, 44, 1, 45, 1, 45, 1, 45, 1, 46, 1, 46, 1, 46, 1,
		47, 1, 47, 1, 47, 5, 47, 832, 8, 47, 10, 47, 12, 47, 835, 9, 47, 1, 48,
		1, 48, 5, 48, 839, 8, 48, 10, 48, 12, 48, 842, 9, 48, 1, 48, 1, 48, 1,
		49, 1, 49, 1, 49, 1, 49, 3, 49, 850, 8, 49, 1, 50, 1, 50, 1, 50, 1, 50,
		1, 50, 3, 50, 857, 8, 50, 1, 51, 5, 51, 860, 8, 51, 10, 51, 12, 51, 863,
		9, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1,
		52, 1, 52, 1, 52, 3, 52, 877, 8, 52, 1, 53, 1, 53, 1, 53, 5, 53, 882, 8,
		53, 10, 53, 12, 53, 885, 9, 53, 1, 54, 1, 54, 1, 54, 3, 54, 890, 8, 54,
		1, 55, 1, 55, 3, 55, 894, 8, 55, 1, 56, 1, 56, 3, 56, 898, 8, 56, 1, 57,
		1, 57, 3, 57, 902, 8, 57, 1, 58, 1, 58, 3, 58, 906, 8, 58, 1, 59, 1, 59,
		1, 59, 3, 59, 911, 8, 59, 1, 60, 1, 60, 3, 60, 915, 8, 60, 1, 60, 1, 60,
		5, 60, 919, 8, 60, 10, 60, 12, 60, 922, 9, 60, 1, 61, 1, 61, 3, 61, 926,
		8, 61, 1, 61, 1, 61, 1, 61, 5, 61, 931, 8, 61, 10, 61, 12, 61, 934, 9,
		61, 1, 61, 1, 61, 3, 61, 938, 8, 61, 3, 61, 940, 8, 61, 1, 62, 1, 62, 5,
		62, 944, 8, 62, 10, 62, 12, 62, 947, 9, 62, 1, 62, 1, 62, 3, 62, 951, 8,
		62, 1, 63, 1, 63, 3, 63, 955, 8, 63, 1, 64, 1, 64, 1, 65, 1, 65, 1, 66,
		1, 66, 1, 67, 1, 67, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1,
		68, 1, 68, 3, 68, 974, 8, 68, 1, 69, 5, 69, 977, 8, 69, 10, 69, 12, 69,
		980, 9, 69, 1, 69, 1, 69, 1, 69, 1, 70, 1, 70, 1, 70, 1, 70, 1, 70, 1,
		70, 1, 70, 1, 70, 1, 70, 1, 70, 3, 70, 995, 8, 70, 1, 71, 1, 71, 1, 71,
		3, 71, 1000, 8, 71, 1, 71, 1, 71, 5, 71, 1004, 8, 71, 10, 71, 12, 71, 1007,
		9, 71, 1, 71, 1, 71, 1, 71, 3, 71, 1012, 8, 71, 3, 71, 1014, 8, 71, 1,
		72, 1, 72, 3, 72, 1018, 8, 72, 1, 73, 1, 73, 1, 73, 3, 73, 1023, 8, 73,
		1, 73, 1, 73, 3, 73, 1027, 8, 73, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1,
		74, 3, 74, 1035, 8, 74, 1, 75, 1, 75, 1, 75, 5, 75, 1040, 8, 75, 10, 75,
		12, 75, 1043, 9, 75, 1, 75, 1, 75, 1, 75, 5, 75, 1048, 8, 75, 10, 75, 12,
		75, 1051, 9, 75, 3, 75, 1053, 8, 75, 1, 76, 5, 76, 1056, 8, 76, 10, 76,
		12, 76, 1059, 9, 76, 1, 76, 1, 76, 1, 76, 1, 77, 1, 77, 3, 77, 1066, 8,
		77, 1, 78, 5, 78, 1069, 8, 78, 10, 78, 12, 78, 1072, 9, 78, 1, 78, 1, 78,
		5, 78, 1076, 8, 78, 10, 78, 12, 78, 1079, 9, 78, 1, 78, 1, 78, 1, 78, 1,
		78, 3, 78, 1085, 8, 78, 1, 79, 5, 79, 1088, 8, 79, 10, 79, 12, 79, 1091,
		9, 79, 1, 79, 1, 79, 1, 79, 3, 79, 1096, 8, 79, 1, 79, 1, 79, 1, 80, 1,
		80, 1, 80, 1, 81, 1, 81, 1, 81, 5, 81, 1106, 8, 81, 10, 81, 12, 81, 1109,
		9, 81, 1, 82, 1, 82, 3, 82, 1113, 8, 82, 1, 83, 1, 83, 3, 83, 1117, 8,
		83, 1, 84, 1, 84, 1, 85, 1, 85, 1, 85, 1, 86, 5, 86, 1125, 8, 86, 10, 86,
		12, 86, 1128, 9, 86, 1, 86, 1, 86, 3, 86, 1132, 8, 86, 1, 86, 1, 86, 1,
		87, 1, 87, 1, 87, 1, 87, 3, 87, 1140, 8, 87, 1, 88, 3, 88, 1143, 8, 88,
		1, 88, 1, 88, 1, 88, 3, 88, 1148, 8, 88, 1, 88, 1, 88, 1, 89, 1, 89, 1,
		90, 1, 90, 3, 90, 1156, 8, 90, 1, 90, 3, 90, 1159, 8, 90, 1, 90, 1, 90,
		1, 91, 3, 91, 1164, 8, 91, 1, 91, 1, 91, 1, 91, 3, 91, 1169, 8, 91, 1,
		91, 1, 91, 1, 91, 3, 91, 1174, 8, 91, 1, 91, 1, 91, 1, 91, 3, 91, 1179,
		8, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 3, 91, 1186, 8, 91, 1, 91, 1,
		91, 1, 91, 3, 91, 1191, 8, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91,
		3, 91, 1199, 8, 91, 1, 91, 1, 91, 1, 91, 3, 91, 1204, 8, 91, 1, 91, 1,
		91, 1, 91, 3, 91, 1209, 8, 91, 1, 92, 5, 92, 1212, 8, 92, 10, 92, 12, 92,
		1215, 9, 92, 1, 92, 1, 92, 1, 92, 3, 92, 1220, 8, 92, 1, 92, 1, 92, 1,
		93, 1, 93, 3, 93, 1226, 8, 93, 1, 93, 3, 93, 1229, 8, 93, 1, 93, 3, 93,
		1232, 8, 93, 1, 93, 1, 93, 1, 94, 1, 94, 1, 94, 5, 94, 1239, 8, 94, 10,
		94, 12, 94, 1242, 9, 94, 1, 95, 5, 95, 1245, 8, 95, 10, 95, 12, 95, 1248,
		9, 95, 1, 95, 1, 95, 1, 95, 3, 95, 1253, 8, 95, 1, 95, 3, 95, 1256, 8,
		95, 1, 95, 3, 95, 1259, 8, 95, 1, 96, 1, 96, 1, 97, 1, 97, 5, 97, 1265,
		8, 97, 10, 97, 12, 97, 1268, 9, 97, 1, 98, 1, 98, 3, 98, 1272, 8, 98, 1,
		99, 5, 99, 1275, 8, 99, 10, 99, 12, 99, 1278, 9, 99, 1, 99, 1, 99, 1, 99,
		3, 99, 1283, 8, 99, 1, 99, 3, 99, 1286, 8, 99, 1, 99, 1, 99, 1, 100, 1,
		100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 3, 100, 1297, 8, 100, 1, 101,
		1, 101, 1, 101, 1, 102, 1, 102, 5, 102, 1304, 8, 102, 10, 102, 12, 102,
		1307, 9, 102, 1, 102, 1, 102, 1, 103, 1, 103, 1, 103, 1, 103, 1, 103, 3,
		103, 1316, 8, 103, 1, 104, 5, 104, 1319, 8, 104, 10, 104, 12, 104, 1322,
		9, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 105, 1, 105, 1, 105, 1, 105,
		3, 105, 1332, 8, 105, 1, 106, 5, 106, 1335, 8, 106, 10, 106, 12, 106, 1338,
		9, 106, 1, 106, 1, 106, 1, 106, 1, 107, 1, 107, 1, 107, 1, 107, 1, 107,
		1, 107, 3, 107, 1349, 8, 107, 1, 108, 5, 108, 1352, 8, 108, 10, 108, 12,
		108, 1355, 9, 108, 1, 108, 1, 108, 1, 108, 1, 108, 1, 108, 1, 109, 1, 109,
		5, 109, 1364, 8, 109, 10, 109, 12, 109, 1367, 9, 109, 1, 109, 1, 109, 1,
		110, 1, 110, 1, 110, 1, 110, 1, 110, 3, 110, 1376, 8, 110, 1, 111, 5, 111,
		1379, 8, 111, 10, 111, 12, 111, 1382, 9, 111, 1, 111, 1, 111, 1, 111, 1,
		111, 1, 111, 3, 111, 1389, 8, 111, 1, 111, 3, 111, 1392, 8, 111, 1, 111,
		1, 111, 1, 112, 1, 112, 1, 112, 3, 112, 1399, 8, 112, 1, 113, 1, 113, 1,
		113, 1, 114, 1, 114, 1, 114, 3, 114, 1407, 8, 114, 1, 115, 1, 115, 1, 115,
		1, 115, 3, 115, 1413, 8, 115, 1, 115, 1, 115, 1, 116, 1, 116, 1, 116, 5,
		116, 1420, 8, 116, 10, 116, 12, 116, 1423, 9, 116, 1, 117, 1, 117, 1, 117,
		1, 117, 1, 118, 1, 118, 1, 118, 3, 118, 1432, 8, 118, 1, 119, 1, 119, 3,
		119, 1436, 8, 119, 1, 119, 3, 119, 1439, 8, 119, 1, 119, 1, 119, 1, 120,
		1, 120, 1, 120, 5, 120, 1446, 8, 120, 10, 120, 12, 120, 1449, 9, 120, 1,
		121, 1, 121, 1, 121, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 1,
		123, 1, 123, 3, 123, 1462, 8, 123, 1, 123, 3, 123, 1465, 8, 123, 1, 123,
		1, 123, 1, 124, 1, 124, 1, 124, 5, 124, 1472, 8, 124, 10, 124, 12, 124,
		1475, 9, 124, 1, 125, 1, 125, 3, 125, 1479, 8, 125, 1, 125, 1, 125, 1,
		126, 4, 126, 1484, 8, 126, 11, 126, 12, 126, 1485, 1, 127, 1, 127, 1, 127,
		3, 127, 1491, 8, 127, 1, 128, 1, 128, 1, 128, 1, 129, 5, 129, 1497, 8,
		129, 10, 129, 12, 129, 1500, 9, 129, 1, 129, 1, 129, 1, 129, 1, 130, 1,
		130, 1, 130, 1, 130, 1, 130, 1, 130, 3, 130, 1511, 8, 130, 1, 131, 1, 131,
		1, 131, 1, 131, 1, 131, 3, 131, 1518, 8, 131, 1, 132, 1, 132, 1, 132, 1,
		132, 1, 132, 1, 132, 1, 132, 1, 132, 1, 132, 1, 132, 1, 132, 1, 132, 3,
		132, 1532, 8, 132, 1, 133, 1, 133, 1, 134, 1, 134, 1, 134, 1, 134, 1, 135,
		1, 135, 1, 135, 1, 135, 1, 136, 1, 136, 1, 136, 1, 137, 1, 137, 1, 137,
		1, 137, 1, 137, 1, 137, 1, 137, 3, 137, 1554, 8, 137, 1, 138, 1, 138, 1,
		138, 1, 138, 1, 138, 1, 138, 1, 139, 1, 139, 1, 139, 1, 139, 1, 139, 1,
		139, 1, 139, 1, 139, 1, 140, 1, 140, 1, 140, 1, 140, 1, 140, 1, 140, 1,
		140, 1, 140, 1, 141, 1, 141, 1, 141, 1, 141, 1, 141, 1, 141, 1, 141, 1,
		141, 1, 141, 1, 141, 3, 141, 1588, 8, 141, 1, 142, 1, 142, 1, 142, 1, 142,
		1, 142, 1, 142, 1, 143, 1, 143, 5, 143, 1598, 8, 143, 10, 143, 12, 143,
		1601, 9, 143, 1, 143, 5, 143, 1604, 8, 143, 10, 143, 12, 143, 1607, 9,
		143, 1, 143, 1, 143, 1, 144, 1, 144, 1, 144, 1, 145, 1, 145, 5, 145, 1616,
		8, 145, 10, 145, 12, 145, 1619, 9, 145, 1, 146, 1, 146, 1, 146, 1, 146,
		1, 146, 1, 146, 1, 146, 1, 146, 1, 146, 1, 146, 3, 146, 1631, 8, 146, 1,
		147, 1, 147, 1, 148, 1, 148, 1, 148, 1, 148, 1, 148, 1, 148, 1, 149, 1,
		149, 1, 149, 1, 149, 1, 149, 1, 149, 1, 150, 1, 150, 1, 150, 1, 150, 1,
		150, 1, 150, 1, 150, 1, 150, 1, 151, 1, 151, 3, 151, 1657, 8, 151, 1, 152,
		1, 152, 3, 152, 1661, 8, 152, 1, 153, 1, 153, 1, 153, 3, 153, 1666, 8,
		153, 1, 153, 1, 153, 3, 153, 1670, 8, 153, 1, 153, 1, 153, 3, 153, 1674,
		8, 153, 1, 153, 1, 153, 1, 153, 1, 154, 1, 154, 1, 154, 3, 154, 1682, 8,
		154, 1, 154, 1, 154, 3, 154, 1686, 8, 154, 1, 154, 1, 154, 3, 154, 1690,
		8, 154, 1, 154, 1, 154, 1, 154, 1, 155, 1, 155, 3, 155, 1697, 8, 155, 1,
		156, 1, 156, 1, 157, 1, 157, 1, 157, 5, 157, 1704, 8, 157, 10, 157, 12,
		157, 1707, 9, 157, 1, 158, 1, 158, 1, 158, 5, 158, 1712, 8, 158, 10, 158,
		12, 158, 1715, 9, 158, 1, 158, 1, 158, 1, 158, 1, 158, 1, 158, 1, 158,
		1, 158, 1, 159, 1, 159, 1, 159, 5, 159, 1727, 8, 159, 10, 159, 12, 159,
		1730, 9, 159, 1, 159, 1, 159, 1, 159, 1, 159, 1, 159, 1, 159, 1, 159, 1,
		160, 1, 160, 3, 160, 1741, 8, 160, 1, 160, 1, 160, 1, 161, 1, 161, 3, 161,
		1747, 8, 161, 1, 161, 1, 161, 1, 162, 1, 162, 3, 162, 1753, 8, 162, 1,
		162, 1, 162, 1, 163, 1, 163, 1, 163, 1, 163, 1, 164, 1, 164, 1, 164, 1,
		164, 1, 164, 1, 164, 1, 165, 1, 165, 1, 165, 1, 165, 1, 165, 1, 165, 1,
		165, 3, 165, 1774, 8, 165, 1, 165, 1, 165, 1, 165, 3, 165, 1779, 8, 165,
		1, 166, 1, 166, 5, 166, 1783, 8, 166, 10, 166, 12, 166, 1786, 9, 166, 1,
		167, 1, 167, 1, 167, 1, 167, 1, 167, 1, 167, 1, 168, 5, 168, 1795, 8, 168,
		10, 168, 12, 168, 1798, 9, 168, 1, 168, 1, 168, 1, 168, 1, 169, 1, 169,
		1, 169, 5, 169, 1806, 8, 169, 10, 169, 12, 169, 1809, 9, 169, 1, 170, 1,
		170, 1, 170, 1, 171, 1, 171, 1, 171, 1, 171, 3, 171, 1818, 8, 171, 1, 171,
		3, 171, 1821, 8, 171, 1, 172, 1, 172, 1, 172, 3, 172, 1826, 8, 172, 1,
		172, 1, 172, 1, 173, 1, 173, 1, 173, 5, 173, 1833, 8, 173, 10, 173, 12,
		173, 1836, 9, 173, 1, 174, 5, 174, 1839, 8, 174, 10, 174, 12, 174, 1842,
		9, 174, 1, 174, 1, 174, 1, 174, 1, 174, 1, 174, 1, 175, 1, 175, 3, 175,
		1851, 8, 175, 1, 175, 5, 175, 1854, 8, 175, 10, 175, 12, 175, 1857, 9,
		175, 1, 176, 1, 176, 1, 176, 1, 176, 5, 176, 1863, 8, 176, 10, 176, 12,
		176, 1866, 9, 176, 1, 176, 1, 176, 1, 176, 1, 176, 1, 176, 1, 176, 1, 176,
		1, 176, 1, 176, 1, 176, 1, 176, 1, 176, 1, 176, 1, 176, 1, 176, 1, 176,
		1, 176, 1, 176, 1, 176, 1, 176, 3, 176, 1888, 8, 176, 1, 177, 1, 177, 1,
		178, 1, 178, 1, 178, 1, 178, 5, 178, 1896, 8, 178, 10, 178, 12, 178, 1899,
		9, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178,
		1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178,
		1, 178, 1, 178, 3, 178, 1920, 8, 178, 1, 179, 1, 179, 1, 179, 1, 179, 1,
		179, 3, 179, 1927, 8, 179, 1, 180, 1, 180, 1, 181, 1, 181, 1, 181, 1, 181,
		3, 181, 1935, 8, 181, 1, 182, 1, 182, 1, 182, 1, 182, 5, 182, 1941, 8,
		182, 10, 182, 12, 182, 1944, 9, 182, 1, 182, 1, 182, 1, 182, 1, 182, 1,
		182, 1, 182, 5, 182, 1952, 8, 182, 10, 182, 12, 182, 1955, 9, 182, 1, 182,
		1, 182, 1, 182, 1, 182, 1, 182, 1, 182, 1, 182, 1, 182, 1, 182, 1, 182,
		1, 182, 1, 182, 1, 182, 1, 182, 1, 182, 1, 182, 1, 182, 1, 182, 1, 182,
		1, 182, 3, 182, 1977, 8, 182, 1, 183, 1, 183, 1, 184, 1, 184, 1, 184, 1,
		184, 5, 184, 1985, 8, 184, 10, 184, 12, 184, 1988, 9, 184, 1, 184, 1, 184,
		1, 184, 1, 184, 1, 184, 1, 184, 5, 184, 1996, 8, 184, 10, 184, 12, 184,
		1999, 9, 184, 1, 184, 1, 184, 1, 184, 1, 184, 1, 184, 1, 184, 1, 184, 1,
		184, 1, 184, 1, 184, 1, 184, 1, 184, 1, 184, 1, 184, 1, 184, 1, 184, 1,
		184, 1, 184, 1, 184, 3, 184, 2020, 8, 184, 1, 185, 1, 185, 3, 185, 2024,
		8, 185, 1, 185, 5, 185, 2027, 8, 185, 10, 185, 12, 185, 2030, 9, 185, 1,
		185, 1, 185, 1, 185, 5, 185, 2035, 8, 185, 10, 185, 12, 185, 2038, 9, 185,
		1, 185, 5, 185, 2041, 8, 185, 10, 185, 12, 185, 2044, 9, 185, 1, 185, 3,
		185, 2047, 8, 185, 1, 185, 1, 185, 3, 185, 2051, 8, 185, 1, 185, 1, 185,
		3, 185, 2055, 8, 185, 1, 185, 1, 185, 1, 185, 1, 185, 3, 185, 2061, 8,
		185, 1, 185, 5, 185, 2064, 8, 185, 10, 185, 12, 185, 2067, 9, 185, 1, 185,
		1, 185, 3, 185, 2071, 8, 185, 1, 185, 1, 185, 3, 185, 2075, 8, 185, 1,
		185, 1, 185, 3, 185, 2079, 8, 185, 1, 185, 1, 185, 1, 185, 1, 185, 3, 185,
		2085, 8, 185, 1, 185, 5, 185, 2088, 8, 185, 10, 185, 12, 185, 2091, 9,
		185, 1, 185, 1, 185, 3, 185, 2095, 8, 185, 1, 185, 1, 185, 3, 185, 2099,
		8, 185, 1, 185, 1, 185, 3, 185, 2103, 8, 185, 3, 185, 2105, 8, 185, 1,
		186, 1, 186, 1, 186, 3, 186, 2110, 8, 186, 1, 186, 5, 186, 2113, 8, 186,
		10, 186, 12, 186, 2116, 9, 186, 1, 186, 1, 186, 3, 186, 2120, 8, 186, 1,
		186, 1, 186, 3, 186, 2124, 8, 186, 1, 186, 1, 186, 3, 186, 2128, 8, 186,
		1, 187, 1, 187, 3, 187, 2132, 8, 187, 1, 187, 5, 187, 2135, 8, 187, 10,
		187, 12, 187, 2138, 9, 187, 1, 187, 1, 187, 1, 187, 5, 187, 2143, 8, 187,
		10, 187, 12, 187, 2146, 9, 187, 1, 187, 5, 187, 2149, 8, 187, 10, 187,
		12, 187, 2152, 9, 187, 1, 187, 3, 187, 2155, 8, 187, 1, 187, 1, 187, 3,
		187, 2159, 8, 187, 1, 187, 1, 187, 3, 187, 2163, 8, 187, 1, 187, 1, 187,
		1, 187, 1, 187, 3, 187, 2169, 8, 187, 1, 187, 5, 187, 2172, 8, 187, 10,
		187, 12, 187, 2175, 9, 187, 1, 187, 1, 187, 3, 187, 2179, 8, 187, 1, 187,
		1, 187, 3, 187, 2183, 8, 187, 1, 187, 1, 187, 3, 187, 2187, 8, 187, 3,
		187, 2189, 8, 187, 1, 188, 1, 188, 1, 188, 3, 188, 2194, 8, 188, 1, 189,
		1, 189, 1, 189, 1, 189, 1, 189, 1, 189, 1, 189, 1, 189, 1, 189, 1, 189,
		1, 189, 1, 189, 1, 189, 3, 189, 2209, 8, 189, 1, 190, 1, 190, 1, 190, 1,
		191, 1, 191, 1, 191, 1, 191, 1, 191, 1, 191, 1, 191, 1, 191, 1, 191, 3,
		191, 2223, 8, 191, 1, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1, 192,
		1, 192, 1, 192, 1, 192, 3, 192, 2235, 8, 192, 1, 192, 1, 192, 1, 192, 1,
		192, 1, 192, 5, 192, 2242, 8, 192, 10, 192, 12, 192, 2245, 9, 192, 1, 193,
		1, 193, 1, 193, 1, 193, 1, 193, 1, 193, 1, 193, 1, 193, 1, 193, 5, 193,
		2256, 8, 193, 10, 193, 12, 193, 2259, 9, 193, 1, 194, 1, 194, 1, 194, 1,
		194, 1, 194, 1, 194, 1, 194, 1, 194, 1, 194, 1, 194, 3, 194, 2271, 8, 194,
		1, 194, 1, 194, 1, 194, 1, 194, 1, 194, 5, 194, 2278, 8, 194, 10, 194,
		12, 194, 2281, 9, 194, 1, 195, 1, 195, 1, 195, 3, 195, 2286, 8, 195, 1,
		195, 1, 195, 1, 195, 1, 195, 1, 195, 3, 195, 2293, 8, 195, 1, 195, 1, 195,
		1, 195, 3, 195, 2298, 8, 195, 1, 195, 1, 195, 1, 195, 1, 195, 1, 195, 3,
		195, 2305, 8, 195, 1, 195, 1, 195, 1, 195, 3, 195, 2310, 8, 195, 1, 195,
		1, 195, 1, 195, 1, 195, 1, 195, 3, 195, 2317, 8, 195, 1, 195, 1, 195, 1,
		195, 3, 195, 2322, 8, 195, 1, 195, 1, 195, 1, 195, 1, 195, 1, 195, 3, 195,
		2329, 8, 195, 1, 195, 1, 195, 1, 195, 3, 195, 2334, 8, 195, 1, 195, 1,
		195, 1, 195, 1, 195, 1, 195, 1, 195, 3, 195, 2342, 8, 195, 1, 195, 1, 195,
		1, 195, 3, 195, 2347, 8, 195, 1, 195, 1, 195, 3, 195, 2351, 8, 195, 1,
		196, 1, 196, 3, 196, 2355, 8, 196, 1, 196, 1, 196, 1, 196, 3, 196, 2360,
		8, 196, 1, 196, 1, 196, 1, 197, 1, 197, 1, 197, 3, 197, 2367, 8, 197, 1,
		197, 1, 197, 1, 197, 1, 197, 1, 197, 3, 197, 2374, 8, 197, 1, 197, 1, 197,
		1, 197, 3, 197, 2379, 8, 197, 1, 197, 1, 197, 1, 197, 1, 197, 1, 197, 3,
		197, 2386, 8, 197, 1, 197, 1, 197, 1, 197, 3, 197, 2391, 8, 197, 1, 197,
		1, 197, 1, 197, 1, 197, 1, 197, 3, 197, 2398, 8, 197, 1, 197, 1, 197, 1,
		197, 3, 197, 2403, 8, 197, 1, 197, 1, 197, 1, 197, 1, 197, 1, 197, 1, 197,
		3, 197, 2411, 8, 197, 1, 197, 1, 197, 1, 197, 3, 197, 2416, 8, 197, 1,
		197, 1, 197, 3, 197, 2420, 8, 197, 1, 198, 1, 198, 1, 198, 5, 198, 2425,
		8, 198, 10, 198, 12, 198, 2428, 9, 198, 1, 199, 1, 199, 1, 199, 3, 199,
		2433, 8, 199, 1, 199, 1, 199, 1, 199, 1, 199, 1, 199, 3, 199, 2440, 8,
		199, 1, 199, 1, 199, 1, 199, 1, 199, 1, 199, 3, 199, 2447, 8, 199, 1, 199,
		1, 199, 1, 199, 1, 199, 1, 199, 3, 199, 2454, 8, 199, 1, 199, 1, 199, 1,
		199, 1, 199, 1, 199, 1, 199, 3, 199, 2462, 8, 199, 1, 199, 1, 199, 1, 199,
		1, 199, 1, 199, 3, 199, 2469, 8, 199, 1, 199, 1, 199, 1, 199, 1, 199, 1,
		199, 1, 199, 3, 199, 2477, 8, 199, 1, 200, 1, 200, 3, 200, 2481, 8, 200,
		1, 200, 1, 200, 1, 201, 1, 201, 1, 201, 3, 201, 2488, 8, 201, 1, 201, 1,
		201, 1, 201, 1, 201, 1, 201, 3, 201, 2495, 8, 201, 1, 201, 1, 201, 1, 201,
		1, 201, 1, 201, 3, 201, 2502, 8, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1,
		201, 1, 201, 3, 201, 2510, 8, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201,
		3, 201, 2517, 8, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 3,
		201, 2525, 8, 201, 1, 202, 1, 202, 1, 202, 1, 202, 3, 202, 2531, 8, 202,
		1, 202, 1, 202, 1, 202, 1, 202, 3, 202, 2537, 8, 202, 1, 202, 1, 202, 1,
		202, 1, 202, 1, 202, 1, 202, 1, 202, 1, 202, 1, 202, 1, 202, 3, 202, 2549,
		8, 202, 1, 203, 1, 203, 5, 203, 2553, 8, 203, 10, 203, 12, 203, 2556, 9,
		203, 1, 204, 5, 204, 2559, 8, 204, 10, 204, 12, 204, 2562, 9, 204, 1, 204,
		1, 204, 1, 204, 1, 204, 1, 205, 1, 205, 1, 206, 1, 206, 3, 206, 2572, 8,
		206, 1, 207, 1, 207, 1, 207, 1, 207, 1, 208, 1, 208, 1, 208, 3, 208, 2581,
		8, 208, 1, 208, 1, 208, 1, 208, 1, 208, 1, 208, 3, 208, 2588, 8, 208, 1,
		209, 1, 209, 1, 209, 5, 209, 2593, 8, 209, 10, 209, 12, 209, 2596, 9, 209,
		1, 210, 1, 210, 3, 210, 2600, 8, 210, 1, 211, 1, 211, 3, 211, 2604, 8,
		211, 1, 212, 1, 212, 1, 212, 1, 212, 1, 213, 1, 213, 1, 213, 3, 213, 2613,
		8, 213, 1, 214, 1, 214, 1, 215, 1, 215, 1, 215, 1, 215, 1, 215, 1, 215,
		1, 215, 3, 215, 2624, 8, 215, 1, 216, 1, 216, 1, 216, 1, 216, 1, 216, 1,
		216, 5, 216, 2632, 8, 216, 10, 216, 12, 216, 2635, 9, 216, 1, 217, 1, 217,
		1, 217, 1, 217, 1, 217, 1, 217, 5, 217, 2643, 8, 217, 10, 217, 12, 217,
		2646, 9, 217, 1, 218, 1, 218, 1, 218, 1, 218, 1, 218, 1, 218, 5, 218, 2654,
		8, 218, 10, 218, 12, 218, 2657, 9, 218, 1, 219, 1, 219, 1, 219, 1, 219,
		1, 219, 1, 219, 5, 219, 2665, 8, 219, 10, 219, 12, 219, 2668, 9, 219, 1,
		220, 1, 220, 1, 220, 1, 220, 1, 220, 1, 220, 5, 220, 2676, 8, 220, 10,
		220, 12, 220, 2679, 9, 220, 1, 221, 1, 221, 1, 221, 1, 221, 1, 221, 1,
		221, 1, 221, 1, 221, 1, 221, 5, 221, 2690, 8, 221, 10, 221, 12, 221, 2693,
		9, 221, 1, 222, 1, 222, 1, 222, 1, 222, 1, 222, 1, 222, 1, 222, 1, 222,
		1, 222, 1, 222, 1, 222, 1, 222, 1, 222, 1, 222, 1, 222, 1, 222, 1, 222,
		1, 222, 5, 222, 2713, 8, 222, 10, 222, 12, 222, 2716, 9, 222, 1, 223, 1,
		223, 1, 223, 1, 223, 1, 223, 1, 223, 1, 223, 1, 223, 1, 223, 1, 223, 1,
		223, 1, 223, 1, 223, 1, 223, 1, 223, 1, 223, 5, 223, 2734, 8, 223, 10,
		223, 12, 223, 2737, 9, 223, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1,
		224, 1, 224, 1, 224, 1, 224, 5, 224, 2748, 8, 224, 10, 224, 12, 224, 2751,
		9, 224, 1, 225, 1, 225, 1, 225, 1, 225, 1, 225, 1, 225, 1, 225, 1, 225,
		1, 225, 1, 225, 1, 225, 1, 225, 5, 225, 2765, 8, 225, 10, 225, 12, 225,
		2768, 9, 225, 1, 226, 1, 226, 1, 226, 1, 226, 1, 226, 1, 226, 1, 226, 3,
		226, 2777, 8, 226, 1, 227, 1, 227, 1, 227, 1, 228, 1, 228, 1, 228, 1, 229,
		1, 229, 1, 229, 1, 229, 1, 229, 1, 229, 3, 229, 2791, 8, 229, 1, 230, 1,
		230, 3, 230, 2795, 8, 230, 1, 230, 1, 230, 5, 230, 2799, 8, 230, 10, 230,
		12, 230, 2802, 9, 230, 1, 231, 1, 231, 1, 231, 1, 232, 1, 232, 1, 233,
		1, 233, 1, 233, 1, 234, 1, 234, 1, 235, 1, 235, 1, 235, 1, 235, 1, 235,
		1, 235, 1, 235, 1, 235, 5, 235, 2822, 8, 235, 10, 235, 12, 235, 2825, 9,
		235, 1, 235, 1, 235, 1, 235, 1, 235, 1, 235, 1, 235, 5, 235, 2833, 8, 235,
		10, 235, 12, 235, 2836, 9, 235, 1, 235, 1, 235, 1, 235, 3, 235, 2841, 8,
		235, 1, 235, 0, 13, 50, 54, 60, 432, 434, 436, 438, 440, 442, 444, 446,
		448, 450, 236, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30,
		32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66,
		68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102,
		104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132,
		134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162,
		164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192,
		194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222,
		224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252,
		254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282,
		284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312,
		314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342,
		344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372,
		374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402,
		404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432,
		434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462,
		464, 466, 468, 470, 0, 4, 1, 0, 51, 56, 5, 0, 5, 5, 8, 8, 27, 27, 29, 29,
		37, 37, 2, 0, 14, 14, 20, 20, 2, 0, 66, 66, 91, 101, 3084, 0, 472, 1, 0,
		0, 0, 2, 488, 1, 0, 0, 0, 4, 492, 1, 0, 0, 0, 6, 494, 1, 0, 0, 0, 8, 496,
		1, 0, 0, 0, 10, 501, 1, 0, 0, 0, 12, 505, 1, 0, 0, 0, 14, 536, 1, 0, 0,
		0, 16, 538, 1, 0, 0, 0, 18, 552, 1, 0, 0, 0, 20, 559, 1, 0, 0, 0, 22, 561,
		1, 0, 0, 0, 24, 563, 1, 0, 0, 0, 26, 568, 1, 0, 0, 0, 28, 582, 1, 0, 0,
		0, 30, 587, 1, 0, 0, 0, 32, 608, 1, 0, 0, 0, 34, 615, 1, 0, 0, 0, 36, 627,
		1, 0, 0, 0, 38, 629, 1, 0, 0, 0, 40, 632, 1, 0, 0, 0, 42, 636, 1, 0, 0,
		0, 44, 646, 1, 0, 0, 0, 46, 651, 1, 0, 0, 0, 48, 662, 1, 0, 0, 0, 50, 664,
		1, 0, 0, 0, 52, 680, 1, 0, 0, 0, 54, 682, 1, 0, 0, 0, 56, 698, 1, 0, 0,
		0, 58, 700, 1, 0, 0, 0, 60, 702, 1, 0, 0, 0, 62, 714, 1, 0, 0, 0, 64, 733,
		1, 0, 0, 0, 66, 740, 1, 0, 0, 0, 68, 746, 1, 0, 0, 0, 70, 748, 1, 0, 0,
		0, 72, 752, 1, 0, 0, 0, 74, 758, 1, 0, 0, 0, 76, 765, 1, 0, 0, 0, 78, 775,
		1, 0, 0, 0, 80, 779, 1, 0, 0, 0, 82, 784, 1, 0, 0, 0, 84, 808, 1, 0, 0,
		0, 86, 810, 1, 0, 0, 0, 88, 814, 1, 0, 0, 0, 90, 822, 1, 0, 0, 0, 92, 825,
		1, 0, 0, 0, 94, 828, 1, 0, 0, 0, 96, 836, 1, 0, 0, 0, 98, 849, 1, 0, 0,
		0, 100, 856, 1, 0, 0, 0, 102, 861, 1, 0, 0, 0, 104, 876, 1, 0, 0, 0, 106,
		878, 1, 0, 0, 0, 108, 886, 1, 0, 0, 0, 110, 891, 1, 0, 0, 0, 112, 897,
		1, 0, 0, 0, 114, 901, 1, 0, 0, 0, 116, 905, 1, 0, 0, 0, 118, 910, 1, 0,
		0, 0, 120, 914, 1, 0, 0, 0, 122, 939, 1, 0, 0, 0, 124, 941, 1, 0, 0, 0,
		126, 952, 1, 0, 0, 0, 128, 956, 1, 0, 0, 0, 130, 958, 1, 0, 0, 0, 132,
		960, 1, 0, 0, 0, 134, 962, 1, 0, 0, 0, 136, 973, 1, 0, 0, 0, 138, 978,
		1, 0, 0, 0, 140, 994, 1, 0, 0, 0, 142, 1013, 1, 0, 0, 0, 144, 1017, 1,
		0, 0, 0, 146, 1019, 1, 0, 0, 0, 148, 1034, 1, 0, 0, 0, 150, 1052, 1, 0,
		0, 0, 152, 1057, 1, 0, 0, 0, 154, 1065, 1, 0, 0, 0, 156, 1084, 1, 0, 0,
		0, 158, 1089, 1, 0, 0, 0, 160, 1099, 1, 0, 0, 0, 162, 1102, 1, 0, 0, 0,
		164, 1112, 1, 0, 0, 0, 166, 1116, 1, 0, 0, 0, 168, 1118, 1, 0, 0, 0, 170,
		1120, 1, 0, 0, 0, 172, 1126, 1, 0, 0, 0, 174, 1139, 1, 0, 0, 0, 176, 1142,
		1, 0, 0, 0, 178, 1151, 1, 0, 0, 0, 180, 1153, 1, 0, 0, 0, 182, 1208, 1,
		0, 0, 0, 184, 1213, 1, 0, 0, 0, 186, 1223, 1, 0, 0, 0, 188, 1235, 1, 0,
		0, 0, 190, 1246, 1, 0, 0, 0, 192, 1260, 1, 0, 0, 0, 194, 1262, 1, 0, 0,
		0, 196, 1271, 1, 0, 0, 0, 198, 1276, 1, 0, 0, 0, 200, 1296, 1, 0, 0, 0,
		202, 1298, 1, 0, 0, 0, 204, 1301, 1, 0, 0, 0, 206, 1315, 1, 0, 0, 0, 208,
		1320, 1, 0, 0, 0, 210, 1331, 1, 0, 0, 0, 212, 1336, 1, 0, 0, 0, 214, 1348,
		1, 0, 0, 0, 216, 1353, 1, 0, 0, 0, 218, 1361, 1, 0, 0, 0, 220, 1375, 1,
		0, 0, 0, 222, 1380, 1, 0, 0, 0, 224, 1398, 1, 0, 0, 0, 226, 1400, 1, 0,
		0, 0, 228, 1406, 1, 0, 0, 0, 230, 1408, 1, 0, 0, 0, 232, 1416, 1, 0, 0,
		0, 234, 1424, 1, 0, 0, 0, 236, 1431, 1, 0, 0, 0, 238, 1433, 1, 0, 0, 0,
		240, 1442, 1, 0, 0, 0, 242, 1450, 1, 0, 0, 0, 244, 1453, 1, 0, 0, 0, 246,
		1459, 1, 0, 0, 0, 248, 1468, 1, 0, 0, 0, 250, 1476, 1, 0, 0, 0, 252, 1483,
		1, 0, 0, 0, 254, 1490, 1, 0, 0, 0, 256, 1492, 1, 0, 0, 0, 258, 1498, 1,
		0, 0, 0, 260, 1510, 1, 0, 0, 0, 262, 1517, 1, 0, 0, 0, 264, 1531, 1, 0,
		0, 0, 266, 1533, 1, 0, 0, 0, 268, 1535, 1, 0, 0, 0, 270, 1539, 1, 0, 0,
		0, 272, 1543, 1, 0, 0, 0, 274, 1553, 1, 0, 0, 0, 276, 1555, 1, 0, 0, 0,
		278, 1561, 1, 0, 0, 0, 280, 1569, 1, 0, 0, 0, 282, 1587, 1, 0, 0, 0, 284,
		1589, 1, 0, 0, 0, 286, 1595, 1, 0, 0, 0, 288, 1610, 1, 0, 0, 0, 290, 1613,
		1, 0, 0, 0, 292, 1630, 1, 0, 0, 0, 294, 1632, 1, 0, 0, 0, 296, 1634, 1,
		0, 0, 0, 298, 1640, 1, 0, 0, 0, 300, 1646, 1, 0, 0, 0, 302, 1656, 1, 0,
		0, 0, 304, 1660, 1, 0, 0, 0, 306, 1662, 1, 0, 0, 0, 308, 1678, 1, 0, 0,
		0, 310, 1696, 1, 0, 0, 0, 312, 1698, 1, 0, 0, 0, 314, 1700, 1, 0, 0, 0,
		316, 1708, 1, 0, 0, 0, 318, 1723, 1, 0, 0, 0, 320, 1738, 1, 0, 0, 0, 322,
		1744, 1, 0, 0, 0, 324, 1750, 1, 0, 0, 0, 326, 1756, 1, 0, 0, 0, 328, 1760,
		1, 0, 0, 0, 330, 1778, 1, 0, 0, 0, 332, 1780, 1, 0, 0, 0, 334, 1787, 1,
		0, 0, 0, 336, 1796, 1, 0, 0, 0, 338, 1802, 1, 0, 0, 0, 340, 1810, 1, 0,
		0, 0, 342, 1813, 1, 0, 0, 0, 344, 1822, 1, 0, 0, 0, 346, 1829, 1, 0, 0,
		0, 348, 1840, 1, 0, 0, 0, 350, 1850, 1, 0, 0, 0, 352, 1887, 1, 0, 0, 0,
		354, 1889, 1, 0, 0, 0, 356, 1919, 1, 0, 0, 0, 358, 1926, 1, 0, 0, 0, 360,
		1928, 1, 0, 0, 0, 362, 1934, 1, 0, 0, 0, 364, 1976, 1, 0, 0, 0, 366, 1978,
		1, 0, 0, 0, 368, 2019, 1, 0, 0, 0, 370, 2104, 1, 0, 0, 0, 372, 2106, 1,
		0, 0, 0, 374, 2188, 1, 0, 0, 0, 376, 2193, 1, 0, 0, 0, 378, 2208, 1, 0,
		0, 0, 380, 2210, 1, 0, 0, 0, 382, 2222, 1, 0, 0, 0, 384, 2234, 1, 0, 0,
		0, 386, 2246, 1, 0, 0, 0, 388, 2270, 1, 0, 0, 0, 390, 2350, 1, 0, 0, 0,
		392, 2352, 1, 0, 0, 0, 394, 2419, 1, 0, 0, 0, 396, 2421, 1, 0, 0, 0, 398,
		2476, 1, 0, 0, 0, 400, 2478, 1, 0, 0, 0, 402, 2524, 1, 0, 0, 0, 404, 2548,
		1, 0, 0, 0, 406, 2550, 1, 0, 0, 0, 408, 2560, 1, 0, 0, 0, 410, 2567, 1,
		0, 0, 0, 412, 2571, 1, 0, 0, 0, 414, 2573, 1, 0, 0, 0, 416, 2587, 1, 0,
		0, 0, 418, 2589, 1, 0, 0, 0, 420, 2599, 1, 0, 0, 0, 422, 2603, 1, 0, 0,
		0, 424, 2605, 1, 0, 0, 0, 426, 2612, 1, 0, 0, 0, 428, 2614, 1, 0, 0, 0,
		430, 2623, 1, 0, 0, 0, 432, 2625, 1, 0, 0, 0, 434, 2636, 1, 0, 0, 0, 436,
		2647, 1, 0, 0, 0, 438, 2658, 1, 0, 0, 0, 440, 2669, 1, 0, 0, 0, 442, 2680,
		1, 0, 0, 0, 444, 2694, 1, 0, 0, 0, 446, 2717, 1, 0, 0, 0, 448, 2738, 1,
		0, 0, 0, 450, 2752, 1, 0, 0, 0, 452, 2776, 1, 0, 0, 0, 454, 2778, 1, 0,
		0, 0, 456, 2781, 1, 0, 0, 0, 458, 2790, 1, 0, 0, 0, 460, 2794, 1, 0, 0,
		0, 462, 2803, 1, 0, 0, 0, 464, 2806, 1, 0, 0, 0, 466, 2808, 1, 0, 0, 0,
		468, 2811, 1, 0, 0, 0, 470, 2840, 1, 0, 0, 0, 472, 473, 7, 0, 0, 0, 473,
		1, 1, 0, 0, 0, 474, 476, 3, 228, 114, 0, 475, 474, 1, 0, 0, 0, 476, 479,
		1, 0, 0, 0, 477, 475, 1, 0, 0, 0, 477, 478, 1, 0, 0, 0, 478, 480, 1, 0,
		0, 0, 479, 477, 1, 0, 0, 0, 480, 489, 3, 4, 2, 0, 481, 483, 3, 228, 114,
		0, 482, 481, 1, 0, 0, 0, 483, 486, 1, 0, 0, 0, 484, 482, 1, 0, 0, 0, 484,
		485, 1, 0, 0, 0, 485, 487, 1, 0, 0, 0, 486, 484, 1, 0, 0, 0, 487, 489,
		5, 3, 0, 0, 488, 477, 1, 0, 0, 0, 488, 484, 1, 0, 0, 0, 489, 3, 1, 0, 0,
		0, 490, 493, 3, 6, 3, 0, 491, 493, 3, 8, 4, 0, 492, 490, 1, 0, 0, 0, 492,
		491, 1, 0, 0, 0, 493, 5, 1, 0, 0, 0, 494, 495, 7, 1, 0, 0, 495, 7, 1, 0,
		0, 0, 496, 497, 7, 2, 0, 0, 497, 9, 1, 0, 0, 0, 498, 502, 3, 12, 6, 0,
		499, 502, 3, 26, 13, 0, 500, 502, 3, 28, 14, 0, 501, 498, 1, 0, 0, 0, 501,
		499, 1, 0, 0, 0, 501, 500, 1, 0, 0, 0, 502, 11, 1, 0, 0, 0, 503, 506, 3,
		18, 9, 0, 504, 506, 3, 24, 12, 0, 505, 503, 1, 0, 0, 0, 505, 504, 1, 0,
		0, 0, 506, 511, 1, 0, 0, 0, 507, 510, 3, 16, 8, 0, 508, 510, 3, 22, 11,
		0, 509, 507, 1, 0, 0, 0, 509, 508, 1, 0, 0, 0, 510, 513, 1, 0, 0, 0, 511,
		509, 1, 0, 0, 0, 511, 512, 1, 0, 0, 0, 512, 13, 1, 0, 0, 0, 513, 511, 1,
		0, 0, 0, 514, 516, 3, 228, 114, 0, 515, 514, 1, 0, 0, 0, 516, 519, 1, 0,
		0, 0, 517, 515, 1, 0, 0, 0, 517, 518, 1, 0, 0, 0, 518, 520, 1, 0, 0, 0,
		519, 517, 1, 0, 0, 0, 520, 522, 5, 102, 0, 0, 521, 523, 3, 40, 20, 0, 522,
		521, 1, 0, 0, 0, 522, 523, 1, 0, 0, 0, 523, 537, 1, 0, 0, 0, 524, 525,
		3, 12, 6, 0, 525, 529, 5, 65, 0, 0, 526, 528, 3, 228, 114, 0, 527, 526,
		1, 0, 0, 0, 528, 531, 1, 0, 0, 0, 529, 527, 1, 0, 0, 0, 529, 530, 1, 0,
		0, 0, 530, 532, 1, 0, 0, 0, 531, 529, 1, 0, 0, 0, 532, 534, 5, 102, 0,
		0, 533, 535, 3, 40, 20, 0, 534, 533, 1, 0, 0, 0, 534, 535, 1, 0, 0, 0,
		535, 537, 1, 0, 0, 0, 536, 517, 1, 0, 0, 0, 536, 524, 1, 0, 0, 0, 537,
		15, 1, 0, 0, 0, 538, 542, 5, 65, 0, 0, 539, 541, 3, 228, 114, 0, 540, 539,
		1, 0, 0, 0, 541, 544, 1, 0, 0, 0, 542, 540, 1, 0, 0, 0, 542, 543, 1, 0,
		0, 0, 543, 545, 1, 0, 0, 0, 544, 542, 1, 0, 0, 0, 545, 547, 5, 102, 0,
		0, 546, 548, 3, 40, 20, 0, 547, 546, 1, 0, 0, 0, 547, 548, 1, 0, 0, 0,
		548, 17, 1, 0, 0, 0, 549, 551, 3, 228, 114, 0, 550, 549, 1, 0, 0, 0, 551,
		554, 1, 0, 0, 0, 552, 550, 1, 0, 0, 0, 552, 553, 1, 0, 0, 0, 553, 555,
		1, 0, 0, 0, 554, 552, 1, 0, 0, 0, 555, 557, 5, 102, 0, 0, 556, 558, 3,
		40, 20, 0, 557, 556, 1, 0, 0, 0, 557, 558, 1, 0, 0, 0, 558, 19, 1, 0, 0,
		0, 559, 560, 3, 14, 7, 0, 560, 21, 1, 0, 0, 0, 561, 562, 3, 16, 8, 0, 562,
		23, 1, 0, 0, 0, 563, 564, 3, 18, 9, 0, 564, 25, 1, 0, 0, 0, 565, 567, 3,
		228, 114, 0, 566, 565, 1, 0, 0, 0, 567, 570, 1, 0, 0, 0, 568, 566, 1, 0,
		0, 0, 568, 569, 1, 0, 0, 0, 569, 571, 1, 0, 0, 0, 570, 568, 1, 0, 0, 0,
		571, 572, 5, 102, 0, 0, 572, 27, 1, 0, 0, 0, 573, 574, 3, 2, 1, 0, 574,
		575, 3, 30, 15, 0, 575, 583, 1, 0, 0, 0, 576, 577, 3, 12, 6, 0, 577, 578,
		3, 30, 15, 0, 578, 583, 1, 0, 0, 0, 579, 580, 3, 26, 13, 0, 580, 581, 3,
		30, 15, 0, 581, 583, 1, 0, 0, 0, 582, 573, 1, 0, 0, 0, 582, 576, 1, 0,
		0, 0, 582, 579, 1, 0, 0, 0, 583, 29, 1, 0, 0, 0, 584, 586, 3, 228, 114,
		0, 585, 584, 1, 0, 0, 0, 586, 589, 1, 0, 0, 0, 587, 585, 1, 0, 0, 0, 587,
		588, 1, 0, 0, 0, 588, 590, 1, 0, 0, 0, 589, 587, 1, 0, 0, 0, 590, 591,
		5, 61, 0, 0, 591, 602, 5, 62, 0, 0, 592, 594, 3, 228, 114, 0, 593, 592,
		1, 0, 0, 0, 594, 597, 1, 0, 0, 0, 595, 593, 1, 0, 0, 0, 595, 596, 1, 0,
		0, 0, 596, 598, 1, 0, 0, 0, 597, 595, 1, 0, 0, 0, 598, 599, 5, 61, 0, 0,
		599, 601, 5, 62, 0, 0, 600, 595, 1, 0, 0, 0, 601, 604, 1, 0, 0, 0, 602,
		600, 1, 0, 0, 0, 602, 603, 1, 0, 0, 0, 603, 31, 1, 0, 0, 0, 604, 602, 1,
		0, 0, 0, 605, 607, 3, 34, 17, 0, 606, 605, 1, 0, 0, 0, 607, 610, 1, 0,
		0, 0, 608, 606, 1, 0, 0, 0, 608, 609, 1, 0, 0, 0, 609, 611, 1, 0, 0, 0,
		610, 608, 1, 0, 0, 0, 611, 613, 5, 102, 0, 0, 612, 614, 3, 36, 18, 0, 613,
		612, 1, 0, 0, 0, 613, 614, 1, 0, 0, 0, 614, 33, 1, 0, 0, 0, 615, 616, 3,
		228, 114, 0, 616, 35, 1, 0, 0, 0, 617, 618, 5, 17, 0, 0, 618, 628, 3, 26,
		13, 0, 619, 620, 5, 17, 0, 0, 620, 624, 3, 12, 6, 0, 621, 623, 3, 38, 19,
		0, 622, 621, 1, 0, 0, 0, 623, 626, 1, 0, 0, 0, 624, 622, 1, 0, 0, 0, 624,
		625, 1, 0, 0, 0, 625, 628, 1, 0, 0, 0, 626, 624, 1, 0, 0, 0, 627, 617,
		1, 0, 0, 0, 627, 619, 1, 0, 0, 0, 628, 37, 1, 0, 0, 0, 629, 630, 5, 85,
		0, 0, 630, 631, 3, 20, 10, 0, 631, 39, 1, 0, 0, 0, 632, 633, 5, 68, 0,
		0, 633, 634, 3, 42, 21, 0, 634, 635, 5, 67, 0, 0, 635, 41, 1, 0, 0, 0,
		636, 641, 3, 44, 22, 0, 637, 638, 5, 64, 0, 0, 638, 640, 3, 44, 22, 0,
		639, 637, 1, 0, 0, 0, 640, 643, 1, 0, 0, 0, 641, 639, 1, 0, 0, 0, 641,
		642, 1, 0, 0, 0, 642, 43, 1, 0, 0, 0, 643, 641, 1, 0, 0, 0, 644, 647, 3,
		10, 5, 0, 645, 647, 3, 46, 23, 0, 646, 644, 1, 0, 0, 0, 646, 645, 1, 0,
		0, 0, 647, 45, 1, 0, 0, 0, 648, 650, 3, 228, 114, 0, 649, 648, 1, 0, 0,
		0, 650, 653, 1, 0, 0, 0, 651, 649, 1, 0, 0, 0, 651, 652, 1, 0, 0, 0, 652,
		654, 1, 0, 0, 0, 653, 651, 1, 0, 0, 0, 654, 656, 5, 71, 0, 0, 655, 657,
		3, 48, 24, 0, 656, 655, 1, 0, 0, 0, 656, 657, 1, 0, 0, 0, 657, 47, 1, 0,
		0, 0, 658, 659, 5, 17, 0, 0, 659, 663, 3, 10, 5, 0, 660, 661, 5, 40, 0,
		0, 661, 663, 3, 10, 5, 0, 662, 658, 1, 0, 0, 0, 662, 660, 1, 0, 0, 0, 663,
		49, 1, 0, 0, 0, 664, 665, 6, 25, -1, 0, 665, 666, 5, 102, 0, 0, 666, 672,
		1, 0, 0, 0, 667, 668, 10, 1, 0, 0, 668, 669, 5, 65, 0, 0, 669, 671, 5,
		102, 0, 0, 670, 667, 1, 0, 0, 0, 671, 674, 1, 0, 0, 0, 672, 670, 1, 0,
		0, 0, 672, 673, 1, 0, 0, 0, 673, 51, 1, 0, 0, 0, 674, 672, 1, 0, 0, 0,
		675, 681, 5, 102, 0, 0, 676, 677, 3, 54, 27, 0, 677, 678, 5, 65, 0, 0,
		678, 679, 5, 102, 0, 0, 679, 681, 1, 0, 0, 0, 680, 675, 1, 0, 0, 0, 680,
		676, 1, 0, 0, 0, 681, 53, 1, 0, 0, 0, 682, 683, 6, 27, -1, 0, 683, 684,
		5, 102, 0, 0, 684, 690, 1, 0, 0, 0, 685, 686, 10, 1, 0, 0, 686, 687, 5,
		65, 0, 0, 687, 689, 5, 102, 0, 0, 688, 685, 1, 0, 0, 0, 689, 692, 1, 0,
		0, 0, 690, 688, 1, 0, 0, 0, 690, 691, 1, 0, 0, 0, 691, 55, 1, 0, 0, 0,
		692, 690, 1, 0, 0, 0, 693, 699, 5, 102, 0, 0, 694, 695, 3, 60, 30, 0, 695,
		696, 5, 65, 0, 0, 696, 697, 5, 102, 0, 0, 697, 699, 1, 0, 0, 0, 698, 693,
		1, 0, 0, 0, 698, 694, 1, 0, 0, 0, 699, 57, 1, 0, 0, 0, 700, 701, 5, 102,
		0, 0, 701, 59, 1, 0, 0, 0, 702, 703, 6, 30, -1, 0, 703, 704, 5, 102, 0,
		0, 704, 710, 1, 0, 0, 0, 705, 706, 10, 1, 0, 0, 706, 707, 5, 65, 0, 0,
		707, 709, 5, 102, 0, 0, 708, 705, 1, 0, 0, 0, 709, 712, 1, 0, 0, 0, 710,
		708, 1, 0, 0, 0, 710, 711, 1, 0, 0, 0, 711, 61, 1, 0, 0, 0, 712, 710, 1,
		0, 0, 0, 713, 715, 3, 64, 32, 0, 714, 713, 1, 0, 0, 0, 714, 715, 1, 0,
		0, 0, 715, 719, 1, 0, 0, 0, 716, 718, 3, 68, 34, 0, 717, 716, 1, 0, 0,
		0, 718, 721, 1, 0, 0, 0, 719, 717, 1, 0, 0, 0, 719, 720, 1, 0, 0, 0, 720,
		725, 1, 0, 0, 0, 721, 719, 1, 0, 0, 0, 722, 724, 3, 78, 39, 0, 723, 722,
		1, 0, 0, 0, 724, 727, 1, 0, 0, 0, 725, 723, 1, 0, 0, 0, 725, 726, 1, 0,
		0, 0, 726, 728, 1, 0, 0, 0, 727, 725, 1, 0, 0, 0, 728, 729, 5, 0, 0, 1,
		729, 63, 1, 0, 0, 0, 730, 732, 3, 66, 33, 0, 731, 730, 1, 0, 0, 0, 732,
		735, 1, 0, 0, 0, 733, 731, 1, 0, 0, 0, 733, 734, 1, 0, 0, 0, 734, 736,
		1, 0, 0, 0, 735, 733, 1, 0, 0, 0, 736, 737, 5, 32, 0, 0, 737, 738, 3, 50,
		25, 0, 738, 739, 5, 63, 0, 0, 739, 65, 1, 0, 0, 0, 740, 741, 3, 228, 114,
		0, 741, 67, 1, 0, 0, 0, 742, 747, 3, 70, 35, 0, 743, 747, 3, 72, 36, 0,
		744, 747, 3, 74, 37, 0, 745, 747, 3, 76, 38, 0, 746, 742, 1, 0, 0, 0, 746,
		743, 1, 0, 0, 0, 746, 744, 1, 0, 0, 0, 746, 745, 1, 0, 0, 0, 747, 69, 1,
		0, 0, 0, 748, 749, 5, 25, 0, 0, 749, 750, 3, 52, 26, 0, 750, 751, 5, 63,
		0, 0, 751, 71, 1, 0, 0, 0, 752, 753, 5, 25, 0, 0, 753, 754, 3, 54, 27,
		0, 754, 755, 5, 65, 0, 0, 755, 756, 5, 83, 0, 0, 756, 757, 5, 63, 0, 0,
		757, 73, 1, 0, 0, 0, 758, 759, 5, 25, 0, 0, 759, 760, 5, 38, 0, 0, 760,
		761, 3, 52, 26, 0, 761, 762, 5, 65, 0, 0, 762, 763, 5, 102, 0, 0, 763,
		764, 5, 63, 0, 0, 764, 75, 1, 0, 0, 0, 765, 766, 5, 25, 0, 0, 766, 767,
		5, 38, 0, 0, 767, 768, 3, 52, 26, 0, 768, 769, 5, 65, 0, 0, 769, 770, 5,
		83, 0, 0, 770, 771, 5, 63, 0, 0, 771, 77, 1, 0, 0, 0, 772, 776, 3, 80,
		40, 0, 773, 776, 3, 196, 98, 0, 774, 776, 5, 63, 0, 0, 775, 772, 1, 0,
		0, 0, 775, 773, 1, 0, 0, 0, 775, 774, 1, 0, 0, 0, 776, 79, 1, 0, 0, 0,
		777, 780, 3, 82, 41, 0, 778, 780, 3, 184, 92, 0, 779, 777, 1, 0, 0, 0,
		779, 778, 1, 0, 0, 0, 780, 81, 1, 0, 0, 0, 781, 783, 3, 84, 42, 0, 782,
		781, 1, 0, 0, 0, 783, 786, 1, 0, 0, 0, 784, 782, 1, 0, 0, 0, 784, 785,
		1, 0, 0, 0, 785, 787, 1, 0, 0, 0, 786, 784, 1, 0, 0, 0, 787, 788, 5, 9,
		0, 0, 788, 790, 5, 102, 0, 0, 789, 791, 3, 86, 43, 0, 790, 789, 1, 0, 0,
		0, 790, 791, 1, 0, 0, 0, 791, 793, 1, 0, 0, 0, 792, 794, 3, 90, 45, 0,
		793, 792, 1, 0, 0, 0, 793, 794, 1, 0, 0, 0, 794, 796, 1, 0, 0, 0, 795,
		797, 3, 92, 46, 0, 796, 795, 1, 0, 0, 0, 796, 797, 1, 0, 0, 0, 797, 798,
		1, 0, 0, 0, 798, 799, 3, 96, 48, 0, 799, 83, 1, 0, 0, 0, 800, 809, 3, 228,
		114, 0, 801, 809, 5, 35, 0, 0, 802, 809, 5, 34, 0, 0, 803, 809, 5, 33,
		0, 0, 804, 809, 5, 1, 0, 0, 805, 809, 5, 38, 0, 0, 806, 809, 5, 18, 0,
		0, 807, 809, 5, 39, 0, 0, 808, 800, 1, 0, 0, 0, 808, 801, 1, 0, 0, 0, 808,
		802, 1, 0, 0, 0, 808, 803, 1, 0, 0, 0, 808, 804, 1, 0, 0, 0, 808, 805,
		1, 0, 0, 0, 808, 806, 1, 0, 0, 0, 808, 807, 1, 0, 0, 0, 809, 85, 1, 0,
		0, 0, 810, 811, 5, 68, 0, 0, 811, 812, 3, 88, 44, 0, 812, 813, 5, 67, 0,
		0, 813, 87, 1, 0, 0, 0, 814, 819, 3, 32, 16, 0, 815, 816, 5, 64, 0, 0,
		816, 818, 3, 32, 16, 0, 817, 815, 1, 0, 0, 0, 818, 821, 1, 0, 0, 0, 819,
		817, 1, 0, 0, 0, 819, 820, 1, 0, 0, 0, 820, 89, 1, 0, 0, 0, 821, 819, 1,
		0, 0, 0, 822, 823, 5, 17, 0, 0, 823, 824, 3, 14, 7, 0, 824, 91, 1, 0, 0,
		0, 825, 826, 5, 24, 0, 0, 826, 827, 3, 94, 47, 0, 827, 93, 1, 0, 0, 0,
		828, 833, 3, 20, 10, 0, 829, 830, 5, 64, 0, 0, 830, 832, 3, 20, 10, 0,
		831, 829, 1, 0, 0, 0, 832, 835, 1, 0, 0, 0, 833, 831, 1, 0, 0, 0, 833,
		834, 1, 0, 0, 0, 834, 95, 1, 0, 0, 0, 835, 833, 1, 0, 0, 0, 836, 840, 5,
		59, 0, 0, 837, 839, 3, 98, 49, 0, 838, 837, 1, 0, 0, 0, 839, 842, 1, 0,
		0, 0, 840, 838, 1, 0, 0, 0, 840, 841, 1, 0, 0, 0, 841, 843, 1, 0, 0, 0,
		842, 840, 1, 0, 0, 0, 843, 844, 5, 60, 0, 0, 844, 97, 1, 0, 0, 0, 845,
		850, 3, 100, 50, 0, 846, 850, 3, 168, 84, 0, 847, 850, 3, 170, 85, 0, 848,
		850, 3, 172, 86, 0, 849, 845, 1, 0, 0, 0, 849, 846, 1, 0, 0, 0, 849, 847,
		1, 0, 0, 0, 849, 848, 1, 0, 0, 0, 850, 99, 1, 0, 0, 0, 851, 857, 3, 102,
		51, 0, 852, 857, 3, 138, 69, 0, 853, 857, 3, 80, 40, 0, 854, 857, 3, 196,
		98, 0, 855, 857, 5, 63, 0, 0, 856, 851, 1, 0, 0, 0, 856, 852, 1, 0, 0,
		0, 856, 853, 1, 0, 0, 0, 856, 854, 1, 0, 0, 0, 856, 855, 1, 0, 0, 0, 857,
		101, 1, 0, 0, 0, 858, 860, 3, 104, 52, 0, 859, 858, 1, 0, 0, 0, 860, 863,
		1, 0, 0, 0, 861, 859, 1, 0, 0, 0, 861, 862, 1, 0, 0, 0, 862, 864, 1, 0,
		0, 0, 863, 861, 1, 0, 0, 0, 864, 865, 3, 114, 57, 0, 865, 866, 3, 106,
		53, 0, 866, 867, 5, 63, 0, 0, 867, 103, 1, 0, 0, 0, 868, 877, 3, 228, 114,
		0, 869, 877, 5, 35, 0, 0, 870, 877, 5, 34, 0, 0, 871, 877, 5, 33, 0, 0,
		872, 877, 5, 38, 0, 0, 873, 877, 5, 18, 0, 0, 874, 877, 5, 46, 0, 0, 875,
		877, 5, 49, 0, 0, 876, 868, 1, 0, 0, 0, 876, 869, 1, 0, 0, 0, 876, 870,
		1, 0, 0, 0, 876, 871, 1, 0, 0, 0, 876, 872, 1, 0, 0, 0, 876, 873, 1, 0,
		0, 0, 876, 874, 1, 0, 0, 0, 876, 875, 1, 0, 0, 0, 877, 105, 1, 0, 0, 0,
		878, 883, 3, 108, 54, 0, 879, 880, 5, 64, 0, 0, 880, 882, 3, 108, 54, 0,
		881, 879, 1, 0, 0, 0, 882, 885, 1, 0, 0, 0, 883, 881, 1, 0, 0, 0, 883,
		884, 1, 0, 0, 0, 884, 107, 1, 0, 0, 0, 885, 883, 1, 0, 0, 0, 886, 889,
		3, 110, 55, 0, 887, 888, 5, 66, 0, 0, 888, 890, 3, 112, 56, 0, 889, 887,
		1, 0, 0, 0, 889, 890, 1, 0, 0, 0, 890, 109, 1, 0, 0, 0, 891, 893, 5, 102,
		0, 0, 892, 894, 3, 30, 15, 0, 893, 892, 1, 0, 0, 0, 893, 894, 1, 0, 0,
		0, 894, 111, 1, 0, 0, 0, 895, 898, 3, 412, 206, 0, 896, 898, 3, 246, 123,
		0, 897, 895, 1, 0, 0, 0, 897, 896, 1, 0, 0, 0, 898, 113, 1, 0, 0, 0, 899,
		902, 3, 116, 58, 0, 900, 902, 3, 118, 59, 0, 901, 899, 1, 0, 0, 0, 901,
		900, 1, 0, 0, 0, 902, 115, 1, 0, 0, 0, 903, 906, 3, 4, 2, 0, 904, 906,
		5, 3, 0, 0, 905, 903, 1, 0, 0, 0, 905, 904, 1, 0, 0, 0, 906, 117, 1, 0,
		0, 0, 907, 911, 3, 120, 60, 0, 908, 911, 3, 134, 67, 0, 909, 911, 3, 136,
		68, 0, 910, 907, 1, 0, 0, 0, 910, 908, 1, 0, 0, 0, 910, 909, 1, 0, 0, 0,
		911, 119, 1, 0, 0, 0, 912, 915, 3, 126, 63, 0, 913, 915, 3, 132, 66, 0,
		914, 912, 1, 0, 0, 0, 914, 913, 1, 0, 0, 0, 915, 920, 1, 0, 0, 0, 916,
		919, 3, 124, 62, 0, 917, 919, 3, 130, 65, 0, 918, 916, 1, 0, 0, 0, 918,
		917, 1, 0, 0, 0, 919, 922, 1, 0, 0, 0, 920, 918, 1, 0, 0, 0, 920, 921,
		1, 0, 0, 0, 921, 121, 1, 0, 0, 0, 922, 920, 1, 0, 0, 0, 923, 925, 5, 102,
		0, 0, 924, 926, 3, 40, 20, 0, 925, 924, 1, 0, 0, 0, 925, 926, 1, 0, 0,
		0, 926, 940, 1, 0, 0, 0, 927, 928, 3, 120, 60, 0, 928, 932, 5, 65, 0, 0,
		929, 931, 3, 228, 114, 0, 930, 929, 1, 0, 0, 0, 931, 934, 1, 0, 0, 0, 932,
		930, 1, 0, 0, 0, 932, 933, 1, 0, 0, 0, 933, 935, 1, 0, 0, 0, 934, 932,
		1, 0, 0, 0, 935, 937, 5, 102, 0, 0, 936, 938, 3, 40, 20, 0, 937, 936, 1,
		0, 0, 0, 937, 938, 1, 0, 0, 0, 938, 940, 1, 0, 0, 0, 939, 923, 1, 0, 0,
		0, 939, 927, 1, 0, 0, 0, 940, 123, 1, 0, 0, 0, 941, 945, 5, 65, 0, 0, 942,
		944, 3, 228, 114, 0, 943, 942, 1, 0, 0, 0, 944, 947, 1, 0, 0, 0, 945, 943,
		1, 0, 0, 0, 945, 946, 1, 0, 0, 0, 946, 948, 1, 0, 0, 0, 947, 945, 1, 0,
		0, 0, 948, 950, 5, 102, 0, 0, 949, 951, 3, 40, 20, 0, 950, 949, 1, 0, 0,
		0, 950, 951, 1, 0, 0, 0, 951, 125, 1, 0, 0, 0, 952, 954, 5, 102, 0, 0,
		953, 955, 3, 40, 20, 0, 954, 953, 1, 0, 0, 0, 954, 955, 1, 0, 0, 0, 955,
		127, 1, 0, 0, 0, 956, 957, 3, 122, 61, 0, 957, 129, 1, 0, 0, 0, 958, 959,
		3, 124, 62, 0, 959, 131, 1, 0, 0, 0, 960, 961, 3, 126, 63, 0, 961, 133,
		1, 0, 0, 0, 962, 963, 5, 102, 0, 0, 963, 135, 1, 0, 0, 0, 964, 965, 3,
		116, 58, 0, 965, 966, 3, 30, 15, 0, 966, 974, 1, 0, 0, 0, 967, 968, 3,
		120, 60, 0, 968, 969, 3, 30, 15, 0, 969, 974, 1, 0, 0, 0, 970, 971, 3,
		134, 67, 0, 971, 972, 3, 30, 15, 0, 972, 974, 1, 0, 0, 0, 973, 964, 1,
		0, 0, 0, 973, 967, 1, 0, 0, 0, 973, 970, 1, 0, 0, 0, 974, 137, 1, 0, 0,
		0, 975, 977, 3, 140, 70, 0, 976, 975, 1, 0, 0, 0, 977, 980, 1, 0, 0, 0,
		978, 976, 1, 0, 0, 0, 978, 979, 1, 0, 0, 0, 979, 981, 1, 0, 0, 0, 980,
		978, 1, 0, 0, 0, 981, 982, 3, 142, 71, 0, 982, 983, 3, 166, 83, 0, 983,
		139, 1, 0, 0, 0, 984, 995, 3, 228, 114, 0, 985, 995, 5, 35, 0, 0, 986,
		995, 5, 34, 0, 0, 987, 995, 5, 33, 0, 0, 988, 995, 5, 1, 0, 0, 989, 995,
		5, 38, 0, 0, 990, 995, 5, 18, 0, 0, 991, 995, 5, 42, 0, 0, 992, 995, 5,
		30, 0, 0, 993, 995, 5, 39, 0, 0, 994, 984, 1, 0, 0, 0, 994, 985, 1, 0,
		0, 0, 994, 986, 1, 0, 0, 0, 994, 987, 1, 0, 0, 0, 994, 988, 1, 0, 0, 0,
		994, 989, 1, 0, 0, 0, 994, 990, 1, 0, 0, 0, 994, 991, 1, 0, 0, 0, 994,
		992, 1, 0, 0, 0, 994, 993, 1, 0, 0, 0, 995, 141, 1, 0, 0, 0, 996, 997,
		3, 144, 72, 0, 997, 999, 3, 146, 73, 0, 998, 1000, 3, 160, 80, 0, 999,
		998, 1, 0, 0, 0, 999, 1000, 1, 0, 0, 0, 1000, 1014, 1, 0, 0, 0, 1001, 1005,
		3, 86, 43, 0, 1002, 1004, 3, 228, 114, 0, 1003, 1002, 1, 0, 0, 0, 1004,
		1007, 1, 0, 0, 0, 1005, 1003, 1, 0, 0, 0, 1005, 1006, 1, 0, 0, 0, 1006,
		1008, 1, 0, 0, 0, 1007, 1005, 1, 0, 0, 0, 1008, 1009, 3, 144, 72, 0, 1009,
		1011, 3, 146, 73, 0, 1010, 1012, 3, 160, 80, 0, 1011, 1010, 1, 0, 0, 0,
		1011, 1012, 1, 0, 0, 0, 1012, 1014, 1, 0, 0, 0, 1013, 996, 1, 0, 0, 0,
		1013, 1001, 1, 0, 0, 0, 1014, 143, 1, 0, 0, 0, 1015, 1018, 3, 114, 57,
		0, 1016, 1018, 5, 48, 0, 0, 1017, 1015, 1, 0, 0, 0, 1017, 1016, 1, 0, 0,
		0, 1018, 145, 1, 0, 0, 0, 1019, 1020, 5, 102, 0, 0, 1020, 1022, 5, 57,
		0, 0, 1021, 1023, 3, 148, 74, 0, 1022, 1021, 1, 0, 0, 0, 1022, 1023, 1,
		0, 0, 0, 1023, 1024, 1, 0, 0, 0, 1024, 1026, 5, 58, 0, 0, 1025, 1027, 3,
		30, 15, 0, 1026, 1025, 1, 0, 0, 0, 1026, 1027, 1, 0, 0, 0, 1027, 147, 1,
		0, 0, 0, 1028, 1035, 3, 158, 79, 0, 1029, 1030, 3, 150, 75, 0, 1030, 1031,
		5, 64, 0, 0, 1031, 1032, 3, 156, 78, 0, 1032, 1035, 1, 0, 0, 0, 1033, 1035,
		3, 156, 78, 0, 1034, 1028, 1, 0, 0, 0, 1034, 1029, 1, 0, 0, 0, 1034, 1033,
		1, 0, 0, 0, 1035, 149, 1, 0, 0, 0, 1036, 1041, 3, 152, 76, 0, 1037, 1038,
		5, 64, 0, 0, 1038, 1040, 3, 152, 76, 0, 1039, 1037, 1, 0, 0, 0, 1040, 1043,
		1, 0, 0, 0, 1041, 1039, 1, 0, 0, 0, 1041, 1042, 1, 0, 0, 0, 1042, 1053,
		1, 0, 0, 0, 1043, 1041, 1, 0, 0, 0, 1044, 1049, 3, 158, 79, 0, 1045, 1046,
		5, 64, 0, 0, 1046, 1048, 3, 152, 76, 0, 1047, 1045, 1, 0, 0, 0, 1048, 1051,
		1, 0, 0, 0, 1049, 1047, 1, 0, 0, 0, 1049, 1050, 1, 0, 0, 0, 1050, 1053,
		1, 0, 0, 0, 1051, 1049, 1, 0, 0, 0, 1052, 1036, 1, 0, 0, 0, 1052, 1044,
		1, 0, 0, 0, 1053, 151, 1, 0, 0, 0, 1054, 1056, 3, 154, 77, 0, 1055, 1054,
		1, 0, 0, 0, 1056, 1059, 1, 0, 0, 0, 1057, 1055, 1, 0, 0, 0, 1057, 1058,
		1, 0, 0, 0, 1058, 1060, 1, 0, 0, 0, 1059, 1057, 1, 0, 0, 0, 1060, 1061,
		3, 114, 57, 0, 1061, 1062, 3, 110, 55, 0, 1062, 153, 1, 0, 0, 0, 1063,
		1066, 3, 228, 114, 0, 1064, 1066, 5, 18, 0, 0, 1065, 1063, 1, 0, 0, 0,
		1065, 1064, 1, 0, 0, 0, 1066, 155, 1, 0, 0, 0, 1067, 1069, 3, 154, 77,
		0, 1068, 1067, 1, 0, 0, 0, 1069, 1072, 1, 0, 0, 0, 1070, 1068, 1, 0, 0,
		0, 1070, 1071, 1, 0, 0, 0, 1071, 1073, 1, 0, 0, 0, 1072, 1070, 1, 0, 0,
		0, 1073, 1077, 3, 114, 57, 0, 1074, 1076, 3, 228, 114, 0, 1075, 1074, 1,
		0, 0, 0, 1076, 1079, 1, 0, 0, 0, 1077, 1075, 1, 0, 0, 0, 1077, 1078, 1,
		0, 0, 0, 1078, 1080, 1, 0, 0, 0, 1079, 1077, 1, 0, 0, 0, 1080, 1081, 5,
		104, 0, 0, 1081, 1082, 3, 110, 55, 0, 1082, 1085, 1, 0, 0, 0, 1083, 1085,
		3, 152, 76, 0, 1084, 1070, 1, 0, 0, 0, 1084, 1083, 1, 0, 0, 0, 1085, 157,
		1, 0, 0, 0, 1086, 1088, 3, 228, 114, 0, 1087, 1086, 1, 0, 0, 0, 1088, 1091,
		1, 0, 0, 0, 1089, 1087, 1, 0, 0, 0, 1089, 1090, 1, 0, 0, 0, 1090, 1092,
		1, 0, 0, 0, 1091, 1089, 1, 0, 0, 0, 1092, 1095, 3, 114, 57, 0, 1093, 1094,
		5, 102, 0, 0, 1094, 1096, 5, 65, 0, 0, 1095, 1093, 1, 0, 0, 0, 1095, 1096,
		1, 0, 0, 0, 1096, 1097, 1, 0, 0, 0, 1097, 1098, 5, 43, 0, 0, 1098, 159,
		1, 0, 0, 0, 1099, 1100, 5, 45, 0, 0, 1100, 1101, 3, 162, 81, 0, 1101, 161,
		1, 0, 0, 0, 1102, 1107, 3, 164, 82, 0, 1103, 1104, 5, 64, 0, 0, 1104, 1106,
		3, 164, 82, 0, 1105, 1103, 1, 0, 0, 0, 1106, 1109, 1, 0, 0, 0, 1107, 1105,
		1, 0, 0, 0, 1107, 1108, 1, 0, 0, 0, 1108, 163, 1, 0, 0, 0, 1109, 1107,
		1, 0, 0, 0, 1110, 1113, 3, 14, 7, 0, 1111, 1113, 3, 26, 13, 0, 1112, 1110,
		1, 0, 0, 0, 1112, 1111, 1, 0, 0, 0, 1113, 165, 1, 0, 0, 0, 1114, 1117,
		3, 250, 125, 0, 1115, 1117, 5, 63, 0, 0, 1116, 1114, 1, 0, 0, 0, 1116,
		1115, 1, 0, 0, 0, 1117, 167, 1, 0, 0, 0, 1118, 1119, 3, 250, 125, 0, 1119,
		169, 1, 0, 0, 0, 1120, 1121, 5, 38, 0, 0, 1121, 1122, 3, 250, 125, 0, 1122,
		171, 1, 0, 0, 0, 1123, 1125, 3, 174, 87, 0, 1124, 1123, 1, 0, 0, 0, 1125,
		1128, 1, 0, 0, 0, 1126, 1124, 1, 0, 0, 0, 1126, 1127, 1, 0, 0, 0, 1127,
		1129, 1, 0, 0, 0, 1128, 1126, 1, 0, 0, 0, 1129, 1131, 3, 176, 88, 0, 1130,
		1132, 3, 160, 80, 0, 1131, 1130, 1, 0, 0, 0, 1131, 1132, 1, 0, 0, 0, 1132,
		1133, 1, 0, 0, 0, 1133, 1134, 3, 180, 90, 0, 1134, 173, 1, 0, 0, 0, 1135,
		1140, 3, 228, 114, 0, 1136, 1140, 5, 35, 0, 0, 1137, 1140, 5, 34, 0, 0,
		1138, 1140, 5, 33, 0, 0, 1139, 1135, 1, 0, 0, 0, 1139, 1136, 1, 0, 0, 0,
		1139, 1137, 1, 0, 0, 0, 1139, 1138, 1, 0, 0, 0, 1140, 175, 1, 0, 0, 0,
		1141, 1143, 3, 86, 43, 0, 1142, 1141, 1, 0, 0, 0, 1142, 1143, 1, 0, 0,
		0, 1143, 1144, 1, 0, 0, 0, 1144, 1145, 3, 178, 89, 0, 1145, 1147, 5, 57,
		0, 0, 1146, 1148, 3, 148, 74, 0, 1147, 1146, 1, 0, 0, 0, 1147, 1148, 1,
		0, 0, 0, 1148, 1149, 1, 0, 0, 0, 1149, 1150, 5, 58, 0, 0, 1150, 177, 1,
		0, 0, 0, 1151, 1152, 5, 102, 0, 0, 1152, 179, 1, 0, 0, 0, 1153, 1155, 5,
		59, 0, 0, 1154, 1156, 3, 182, 91, 0, 1155, 1154, 1, 0, 0, 0, 1155, 1156,
		1, 0, 0, 0, 1156, 1158, 1, 0, 0, 0, 1157, 1159, 3, 252, 126, 0, 1158, 1157,
		1, 0, 0, 0, 1158, 1159, 1, 0, 0, 0, 1159, 1160, 1, 0, 0, 0, 1160, 1161,
		5, 60, 0, 0, 1161, 181, 1, 0, 0, 0, 1162, 1164, 3, 40, 20, 0, 1163, 1162,
		1, 0, 0, 0, 1163, 1164, 1, 0, 0, 0, 1164, 1165, 1, 0, 0, 0, 1165, 1166,
		5, 43, 0, 0, 1166, 1168, 5, 57, 0, 0, 1167, 1169, 3, 396, 198, 0, 1168,
		1167, 1, 0, 0, 0, 1168, 1169, 1, 0, 0, 0, 1169, 1170, 1, 0, 0, 0, 1170,
		1171, 5, 58, 0, 0, 1171, 1209, 5, 63, 0, 0, 1172, 1174, 3, 40, 20, 0, 1173,
		1172, 1, 0, 0, 0, 1173, 1174, 1, 0, 0, 0, 1174, 1175, 1, 0, 0, 0, 1175,
		1176, 5, 40, 0, 0, 1176, 1178, 5, 57, 0, 0, 1177, 1179, 3, 396, 198, 0,
		1178, 1177, 1, 0, 0, 0, 1178, 1179, 1, 0, 0, 0, 1179, 1180, 1, 0, 0, 0,
		1180, 1181, 5, 58, 0, 0, 1181, 1209, 5, 63, 0, 0, 1182, 1183, 3, 56, 28,
		0, 1183, 1185, 5, 65, 0, 0, 1184, 1186, 3, 40, 20, 0, 1185, 1184, 1, 0,
		0, 0, 1185, 1186, 1, 0, 0, 0, 1186, 1187, 1, 0, 0, 0, 1187, 1188, 5, 40,
		0, 0, 1188, 1190, 5, 57, 0, 0, 1189, 1191, 3, 396, 198, 0, 1190, 1189,
		1, 0, 0, 0, 1190, 1191, 1, 0, 0, 0, 1191, 1192, 1, 0, 0, 0, 1192, 1193,
		5, 58, 0, 0, 1193, 1194, 5, 63, 0, 0, 1194, 1209, 1, 0, 0, 0, 1195, 1196,
		3, 350, 175, 0, 1196, 1198, 5, 65, 0, 0, 1197, 1199, 3, 40, 20, 0, 1198,
		1197, 1, 0, 0, 0, 1198, 1199, 1, 0, 0, 0, 1199, 1200, 1, 0, 0, 0, 1200,
		1201, 5, 40, 0, 0, 1201, 1203, 5, 57, 0, 0, 1202, 1204, 3, 396, 198, 0,
		1203, 1202, 1, 0, 0, 0, 1203, 1204, 1, 0, 0, 0, 1204, 1205, 1, 0, 0, 0,
		1205, 1206, 5, 58, 0, 0, 1206, 1207, 5, 63, 0, 0, 1207, 1209, 1, 0, 0,
		0, 1208, 1163, 1, 0, 0, 0, 1208, 1173, 1, 0, 0, 0, 1208, 1182, 1, 0, 0,
		0, 1208, 1195, 1, 0, 0, 0, 1209, 183, 1, 0, 0, 0, 1210, 1212, 3, 84, 42,
		0, 1211, 1210, 1, 0, 0, 0, 1212, 1215, 1, 0, 0, 0, 1213, 1211, 1, 0, 0,
		0, 1213, 1214, 1, 0, 0, 0, 1214, 1216, 1, 0, 0, 0, 1215, 1213, 1, 0, 0,
		0, 1216, 1217, 5, 16, 0, 0, 1217, 1219, 5, 102, 0, 0, 1218, 1220, 3, 92,
		46, 0, 1219, 1218, 1, 0, 0, 0, 1219, 1220, 1, 0, 0, 0, 1220, 1221, 1, 0,
		0, 0, 1221, 1222, 3, 186, 93, 0, 1222, 185, 1, 0, 0, 0, 1223, 1225, 5,
		59, 0, 0, 1224, 1226, 3, 188, 94, 0, 1225, 1224, 1, 0, 0, 0, 1225, 1226,
		1, 0, 0, 0, 1226, 1228, 1, 0, 0, 0, 1227, 1229, 5, 64, 0, 0, 1228, 1227,
		1, 0, 0, 0, 1228, 1229, 1, 0, 0, 0, 1229, 1231, 1, 0, 0, 0, 1230, 1232,
		3, 194, 97, 0, 1231, 1230, 1, 0, 0, 0, 1231, 1232, 1, 0, 0, 0, 1232, 1233,
		1, 0, 0, 0, 1233, 1234, 5, 60, 0, 0, 1234, 187, 1, 0, 0, 0, 1235, 1240,
		3, 190, 95, 0, 1236, 1237, 5, 64, 0, 0, 1237, 1239, 3, 190, 95, 0, 1238,
		1236, 1, 0, 0, 0, 1239, 1242, 1, 0, 0, 0, 1240, 1238, 1, 0, 0, 0, 1240,
		1241, 1, 0, 0, 0, 1241, 189, 1, 0, 0, 0, 1242, 1240, 1, 0, 0, 0, 1243,
		1245, 3, 192, 96, 0, 1244, 1243, 1, 0, 0, 0, 1245, 1248, 1, 0, 0, 0, 1246,
		1244, 1, 0, 0, 0, 1246, 1247, 1, 0, 0, 0, 1247, 1249, 1, 0, 0, 0, 1248,
		1246, 1, 0, 0, 0, 1249, 1255, 5, 102, 0, 0, 1250, 1252, 5, 57, 0, 0, 1251,
		1253, 3, 396, 198, 0, 1252, 1251, 1, 0, 0, 0, 1252, 1253, 1, 0, 0, 0, 1253,
		1254, 1, 0, 0, 0, 1254, 1256, 5, 58, 0, 0, 1255, 1250, 1, 0, 0, 0, 1255,
		1256, 1, 0, 0, 0, 1256, 1258, 1, 0, 0, 0, 1257, 1259, 3, 96, 48, 0, 1258,
		1257, 1, 0, 0, 0, 1258, 1259, 1, 0, 0, 0, 1259, 191, 1, 0, 0, 0, 1260,
		1261, 3, 228, 114, 0, 1261, 193, 1, 0, 0, 0, 1262, 1266, 5, 63, 0, 0, 1263,
		1265, 3, 98, 49, 0, 1264, 1263, 1, 0, 0, 0, 1265, 1268, 1, 0, 0, 0, 1266,
		1264, 1, 0, 0, 0, 1266, 1267, 1, 0, 0, 0, 1267, 195, 1, 0, 0, 0, 1268,
		1266, 1, 0, 0, 0, 1269, 1272, 3, 198, 99, 0, 1270, 1272, 3, 216, 108, 0,
		1271, 1269, 1, 0, 0, 0, 1271, 1270, 1, 0, 0, 0, 1272, 197, 1, 0, 0, 0,
		1273, 1275, 3, 200, 100, 0, 1274, 1273, 1, 0, 0, 0, 1275, 1278, 1, 0, 0,
		0, 1276, 1274, 1, 0, 0, 0, 1276, 1277, 1, 0, 0, 0, 1277, 1279, 1, 0, 0,
		0, 1278, 1276, 1, 0, 0, 0, 1279, 1280, 5, 28, 0, 0, 1280, 1282, 5, 102,
		0, 0, 1281, 1283, 3, 86, 43, 0, 1282, 1281, 1, 0, 0, 0, 1282, 1283, 1,
		0, 0, 0, 1283, 1285, 1, 0, 0, 0, 1284, 1286, 3, 202, 101, 0, 1285, 1284,
		1, 0, 0, 0, 1285, 1286, 1, 0, 0, 0, 1286, 1287, 1, 0, 0, 0, 1287, 1288,
		3, 204, 102, 0, 1288, 199, 1, 0, 0, 0, 1289, 1297, 3, 228, 114, 0, 1290,
		1297, 5, 35, 0, 0, 1291, 1297, 5, 34, 0, 0, 1292, 1297, 5, 33, 0, 0, 1293,
		1297, 5, 1, 0, 0, 1294, 1297, 5, 38, 0, 0, 1295, 1297, 5, 39, 0, 0, 1296,
		1289, 1, 0, 0, 0, 1296, 1290, 1, 0, 0, 0, 1296, 1291, 1, 0, 0, 0, 1296,
		1292, 1, 0, 0, 0, 1296, 1293, 1, 0, 0, 0, 1296, 1294, 1, 0, 0, 0, 1296,
		1295, 1, 0, 0, 0, 1297, 201, 1, 0, 0, 0, 1298, 1299, 5, 17, 0, 0, 1299,
		1300, 3, 94, 47, 0, 1300, 203, 1, 0, 0, 0, 1301, 1305, 5, 59, 0, 0, 1302,
		1304, 3, 206, 103, 0, 1303, 1302, 1, 0, 0, 0, 1304, 1307, 1, 0, 0, 0, 1305,
		1303, 1, 0, 0, 0, 1305, 1306, 1, 0, 0, 0, 1306, 1308, 1, 0, 0, 0, 1307,
		1305, 1, 0, 0, 0, 1308, 1309, 5, 60, 0, 0, 1309, 205, 1, 0, 0, 0, 1310,
		1316, 3, 208, 104, 0, 1311, 1316, 3, 212, 106, 0, 1312, 1316, 3, 80, 40,
		0, 1313, 1316, 3, 196, 98, 0, 1314, 1316, 5, 63, 0, 0, 1315, 1310, 1, 0,
		0, 0, 1315, 1311, 1, 0, 0, 0, 1315, 1312, 1, 0, 0, 0, 1315, 1313, 1, 0,
		0, 0, 1315, 1314, 1, 0, 0, 0, 1316, 207, 1, 0, 0, 0, 1317, 1319, 3, 210,
		105, 0, 1318, 1317, 1, 0, 0, 0, 1319, 1322, 1, 0, 0, 0, 1320, 1318, 1,
		0, 0, 0, 1320, 1321, 1, 0, 0, 0, 1321, 1323, 1, 0, 0, 0, 1322, 1320, 1,
		0, 0, 0, 1323, 1324, 3, 114, 57, 0, 1324, 1325, 3, 106, 53, 0, 1325, 1326,
		5, 63, 0, 0, 1326, 209, 1, 0, 0, 0, 1327, 1332, 3, 228, 114, 0, 1328, 1332,
		5, 35, 0, 0, 1329, 1332, 5, 38, 0, 0, 1330, 1332, 5, 18, 0, 0, 1331, 1327,
		1, 0, 0, 0, 1331, 1328, 1, 0, 0, 0, 1331, 1329, 1, 0, 0, 0, 1331, 1330,
		1, 0, 0, 0, 1332, 211, 1, 0, 0, 0, 1333, 1335, 3, 214, 107, 0, 1334, 1333,
		1, 0, 0, 0, 1335, 1338, 1, 0, 0, 0, 1336, 1334, 1, 0, 0, 0, 1336, 1337,
		1, 0, 0, 0, 1337, 1339, 1, 0, 0, 0, 1338, 1336, 1, 0, 0, 0, 1339, 1340,
		3, 142, 71, 0, 1340, 1341, 3, 166, 83, 0, 1341, 213, 1, 0, 0, 0, 1342,
		1349, 3, 228, 114, 0, 1343, 1349, 5, 35, 0, 0, 1344, 1349, 5, 1, 0, 0,
		1345, 1349, 5, 12, 0, 0, 1346, 1349, 5, 38, 0, 0, 1347, 1349, 5, 39, 0,
		0, 1348, 1342, 1, 0, 0, 0, 1348, 1343, 1, 0, 0, 0, 1348, 1344, 1, 0, 0,
		0, 1348, 1345, 1, 0, 0, 0, 1348, 1346, 1, 0, 0, 0, 1348, 1347, 1, 0, 0,
		0, 1349, 215, 1, 0, 0, 0, 1350, 1352, 3, 200, 100, 0, 1351, 1350, 1, 0,
		0, 0, 1352, 1355, 1, 0, 0, 0, 1353, 1351, 1, 0, 0, 0, 1353, 1354, 1, 0,
		0, 0, 1354, 1356, 1, 0, 0, 0, 1355, 1353, 1, 0, 0, 0, 1356, 1357, 5, 103,
		0, 0, 1357, 1358, 5, 28, 0, 0, 1358, 1359, 5, 102, 0, 0, 1359, 1360, 3,
		218, 109, 0, 1360, 217, 1, 0, 0, 0, 1361, 1365, 5, 59, 0, 0, 1362, 1364,
		3, 220, 110, 0, 1363, 1362, 1, 0, 0, 0, 1364, 1367, 1, 0, 0, 0, 1365, 1363,
		1, 0, 0, 0, 1365, 1366, 1, 0, 0, 0, 1366, 1368, 1, 0, 0, 0, 1367, 1365,
		1, 0, 0, 0, 1368, 1369, 5, 60, 0, 0, 1369, 219, 1, 0, 0, 0, 1370, 1376,
		3, 222, 111, 0, 1371, 1376, 3, 208, 104, 0, 1372, 1376, 3, 80, 40, 0, 1373,
		1376, 3, 196, 98, 0, 1374, 1376, 5, 63, 0, 0, 1375, 1370, 1, 0, 0, 0, 1375,
		1371, 1, 0, 0, 0, 1375, 1372, 1, 0, 0, 0, 1375, 1373, 1, 0, 0, 0, 1375,
		1374, 1, 0, 0, 0, 1376, 221, 1, 0, 0, 0, 1377, 1379, 3, 224, 112, 0, 1378,
		1377, 1, 0, 0, 0, 1379, 1382, 1, 0, 0, 0, 1380, 1378, 1, 0, 0, 0, 1380,
		1381, 1, 0, 0, 0, 1381, 1383, 1, 0, 0, 0, 1382, 1380, 1, 0, 0, 0, 1383,
		1384, 3, 114, 57, 0, 1384, 1385, 5, 102, 0, 0, 1385, 1386, 5, 57, 0, 0,
		1386, 1388, 5, 58, 0, 0, 1387, 1389, 3, 30, 15, 0, 1388, 1387, 1, 0, 0,
		0, 1388, 1389, 1, 0, 0, 0, 1389, 1391, 1, 0, 0, 0, 1390, 1392, 3, 226,
		113, 0, 1391, 1390, 1, 0, 0, 0, 1391, 1392, 1, 0, 0, 0, 1392, 1393, 1,
		0, 0, 0, 1393, 1394, 5, 63, 0, 0, 1394, 223, 1, 0, 0, 0, 1395, 1399, 3,
		228, 114, 0, 1396, 1399, 5, 35, 0, 0, 1397, 1399, 5, 1, 0, 0, 1398, 1395,
		1, 0, 0, 0, 1398, 1396, 1, 0, 0, 0, 1398, 1397, 1, 0, 0, 0, 1399, 225,
		1, 0, 0, 0, 1400, 1401, 5, 12, 0, 0, 1401, 1402, 3, 236, 118, 0, 1402,
		227, 1, 0, 0, 0, 1403, 1407, 3, 230, 115, 0, 1404, 1407, 3, 242, 121, 0,
		1405, 1407, 3, 244, 122, 0, 1406, 1403, 1, 0, 0, 0, 1406, 1404, 1, 0, 0,
		0, 1406, 1405, 1, 0, 0, 0, 1407, 229, 1, 0, 0, 0, 1408, 1409, 5, 103, 0,
		0, 1409, 1410, 3, 52, 26, 0, 1410, 1412, 5, 57, 0, 0, 1411, 1413, 3, 232,
		116, 0, 1412, 1411, 1, 0, 0, 0, 1412, 1413, 1, 0, 0, 0, 1413, 1414, 1,
		0, 0, 0, 1414, 1415, 5, 58, 0, 0, 1415, 231, 1, 0, 0, 0, 1416, 1421, 3,
		234, 117, 0, 1417, 1418, 5, 64, 0, 0, 1418, 1420, 3, 234, 117, 0, 1419,
		1417, 1, 0, 0, 0, 1420, 1423, 1, 0, 0, 0, 1421, 1419, 1, 0, 0, 0, 1421,
		1422, 1, 0, 0, 0, 1422, 233, 1, 0, 0, 0, 1423, 1421, 1, 0, 0, 0, 1424,
		1425, 5, 102, 0, 0, 1425, 1426, 5, 66, 0, 0, 1426, 1427, 3, 236, 118, 0,
		1427, 235, 1, 0, 0, 0, 1428, 1432, 3, 430, 215, 0, 1429, 1432, 3, 238,
		119, 0, 1430, 1432, 3, 228, 114, 0, 1431, 1428, 1, 0, 0, 0, 1431, 1429,
		1, 0, 0, 0, 1431, 1430, 1, 0, 0, 0, 1432, 237, 1, 0, 0, 0, 1433, 1435,
		5, 59, 0, 0, 1434, 1436, 3, 240, 120, 0, 1435, 1434, 1, 0, 0, 0, 1435,
		1436, 1, 0, 0, 0, 1436, 1438, 1, 0, 0, 0, 1437, 1439, 5, 64, 0, 0, 1438,
		1437, 1, 0, 0, 0, 1438, 1439, 1, 0, 0, 0, 1439, 1440, 1, 0, 0, 0, 1440,
		1441, 5, 60, 0, 0, 1441, 239, 1, 0, 0, 0, 1442, 1447, 3, 236, 118, 0, 1443,
		1444, 5, 64, 0, 0, 1444, 1446, 3, 236, 118, 0, 1445, 1443, 1, 0, 0, 0,
		1446, 1449, 1, 0, 0, 0, 1447, 1445, 1, 0, 0, 0, 1447, 1448, 1, 0, 0, 0,
		1448, 241, 1, 0, 0, 0, 1449, 1447, 1, 0, 0, 0, 1450, 1451, 5, 103, 0, 0,
		1451, 1452, 3, 52, 26, 0, 1452, 243, 1, 0, 0, 0, 1453, 1454, 5, 103, 0,
		0, 1454, 1455, 3, 52, 26, 0, 1455, 1456, 5, 57, 0, 0, 1456, 1457, 3, 236,
		118, 0, 1457, 1458, 5, 58, 0, 0, 1458, 245, 1, 0, 0, 0, 1459, 1461, 5,
		59, 0, 0, 1460, 1462, 3, 248, 124, 0, 1461, 1460, 1, 0, 0, 0, 1461, 1462,
		1, 0, 0, 0, 1462, 1464, 1, 0, 0, 0, 1463, 1465, 5, 64, 0, 0, 1464, 1463,
		1, 0, 0, 0, 1464, 1465, 1, 0, 0, 0, 1465, 1466, 1, 0, 0, 0, 1466, 1467,
		5, 60, 0, 0, 1467, 247, 1, 0, 0, 0, 1468, 1473, 3, 112, 56, 0, 1469, 1470,
		5, 64, 0, 0, 1470, 1472, 3, 112, 56, 0, 1471, 1469, 1, 0, 0, 0, 1472, 1475,
		1, 0, 0, 0, 1473, 1471, 1, 0, 0, 0, 1473, 1474, 1, 0, 0, 0, 1474, 249,
		1, 0, 0, 0, 1475, 1473, 1, 0, 0, 0, 1476, 1478, 5, 59, 0, 0, 1477, 1479,
		3, 252, 126, 0, 1478, 1477, 1, 0, 0, 0, 1478, 1479, 1, 0, 0, 0, 1479, 1480,
		1, 0, 0, 0, 1480, 1481, 5, 60, 0, 0, 1481, 251, 1, 0, 0, 0, 1482, 1484,
		3, 254, 127, 0, 1483, 1482, 1, 0, 0, 0, 1484, 1485, 1, 0, 0, 0, 1485, 1483,
		1, 0, 0, 0, 1485, 1486, 1, 0, 0, 0, 1486, 253, 1, 0, 0, 0, 1487, 1491,
		3, 256, 128, 0, 1488, 1491, 3, 80, 40, 0, 1489, 1491, 3, 260, 130, 0, 1490,
		1487, 1, 0, 0, 0, 1490, 1488, 1, 0, 0, 0, 1490, 1489, 1, 0, 0, 0, 1491,
		255, 1, 0, 0, 0, 1492, 1493, 3, 258, 129, 0, 1493, 1494, 5, 63, 0, 0, 1494,
		257, 1, 0, 0, 0, 1495, 1497, 3, 154, 77, 0, 1496, 1495, 1, 0, 0, 0, 1497,
		1500, 1, 0, 0, 0, 1498, 1496, 1, 0, 0, 0, 1498, 1499, 1, 0, 0, 0, 1499,
		1501, 1, 0, 0, 0, 1500, 1498, 1, 0, 0, 0, 1501, 1502, 3, 114, 57, 0, 1502,
		1503, 3, 106, 53, 0, 1503, 259, 1, 0, 0, 0, 1504, 1511, 3, 264, 132, 0,
		1505, 1511, 3, 268, 134, 0, 1506, 1511, 3, 276, 138, 0, 1507, 1511, 3,
		278, 139, 0, 1508, 1511, 3, 296, 148, 0, 1509, 1511, 3, 302, 151, 0, 1510,
		1504, 1, 0, 0, 0, 1510, 1505, 1, 0, 0, 0, 1510, 1506, 1, 0, 0, 0, 1510,
		1507, 1, 0, 0, 0, 1510, 1508, 1, 0, 0, 0, 1510, 1509, 1, 0, 0, 0, 1511,
		261, 1, 0, 0, 0, 1512, 1518, 3, 264, 132, 0, 1513, 1518, 3, 270, 135, 0,
		1514, 1518, 3, 280, 140, 0, 1515, 1518, 3, 298, 149, 0, 1516, 1518, 3,
		304, 152, 0, 1517, 1512, 1, 0, 0, 0, 1517, 1513, 1, 0, 0, 0, 1517, 1514,
		1, 0, 0, 0, 1517, 1515, 1, 0, 0, 0, 1517, 1516, 1, 0, 0, 0, 1518, 263,
		1, 0, 0, 0, 1519, 1532, 3, 250, 125, 0, 1520, 1532, 3, 266, 133, 0, 1521,
		1532, 3, 272, 136, 0, 1522, 1532, 3, 282, 141, 0, 1523, 1532, 3, 284, 142,
		0, 1524, 1532, 3, 300, 150, 0, 1525, 1532, 3, 320, 160, 0, 1526, 1532,
		3, 322, 161, 0, 1527, 1532, 3, 324, 162, 0, 1528, 1532, 3, 328, 164, 0,
		1529, 1532, 3, 326, 163, 0, 1530, 1532, 3, 330, 165, 0, 1531, 1519, 1,
		0, 0, 0, 1531, 1520, 1, 0, 0, 0, 1531, 1521, 1, 0, 0, 0, 1531, 1522, 1,
		0, 0, 0, 1531, 1523, 1, 0, 0, 0, 1531, 1524, 1, 0, 0, 0, 1531, 1525, 1,
		0, 0, 0, 1531, 1526, 1, 0, 0, 0, 1531, 1527, 1, 0, 0, 0, 1531, 1528, 1,
		0, 0, 0, 1531, 1529, 1, 0, 0, 0, 1531, 1530, 1, 0, 0, 0, 1532, 265, 1,
		0, 0, 0, 1533, 1534, 5, 63, 0, 0, 1534, 267, 1, 0, 0, 0, 1535, 1536, 5,
		102, 0, 0, 1536, 1537, 5, 72, 0, 0, 1537, 1538, 3, 260, 130, 0, 1538, 269,
		1, 0, 0, 0, 1539, 1540, 5, 102, 0, 0, 1540, 1541, 5, 72, 0, 0, 1541, 1542,
		3, 262, 131, 0, 1542, 271, 1, 0, 0, 0, 1543, 1544, 3, 274, 137, 0, 1544,
		1545, 5, 63, 0, 0, 1545, 273, 1, 0, 0, 0, 1546, 1554, 3, 424, 212, 0, 1547,
		1554, 3, 454, 227, 0, 1548, 1554, 3, 456, 228, 0, 1549, 1554, 3, 462, 231,
		0, 1550, 1554, 3, 466, 233, 0, 1551, 1554, 3, 390, 195, 0, 1552, 1554,
		3, 370, 185, 0, 1553, 1546, 1, 0, 0, 0, 1553, 1547, 1, 0, 0, 0, 1553, 1548,
		1, 0, 0, 0, 1553, 1549, 1, 0, 0, 0, 1553, 1550, 1, 0, 0, 0, 1553, 1551,
		1, 0, 0, 0, 1553, 1552, 1, 0, 0, 0, 1554, 275, 1, 0, 0, 0, 1555, 1556,
		5, 22, 0, 0, 1556, 1557, 5, 57, 0, 0, 1557, 1558, 3, 412, 206, 0, 1558,
		1559, 5, 58, 0, 0, 1559, 1560, 3, 260, 130, 0, 1560, 277, 1, 0, 0, 0, 1561,
		1562, 5, 22, 0, 0, 1562, 1563, 5, 57, 0, 0, 1563, 1564, 3, 412, 206, 0,
		1564, 1565, 5, 58, 0, 0, 1565, 1566, 3, 262, 131, 0, 1566, 1567, 5, 15,
		0, 0, 1567, 1568, 3, 260, 130, 0, 1568, 279, 1, 0, 0, 0, 1569, 1570, 5,
		22, 0, 0, 1570, 1571, 5, 57, 0, 0, 1571, 1572, 3, 412, 206, 0, 1572, 1573,
		5, 58, 0, 0, 1573, 1574, 3, 262, 131, 0, 1574, 1575, 5, 15, 0, 0, 1575,
		1576, 3, 262, 131, 0, 1576, 281, 1, 0, 0, 0, 1577, 1578, 5, 2, 0, 0, 1578,
		1579, 3, 412, 206, 0, 1579, 1580, 5, 63, 0, 0, 1580, 1588, 1, 0, 0, 0,
		1581, 1582, 5, 2, 0, 0, 1582, 1583, 3, 412, 206, 0, 1583, 1584, 5, 72,
		0, 0, 1584, 1585, 3, 412, 206, 0, 1585, 1586, 5, 63, 0, 0, 1586, 1588,
		1, 0, 0, 0, 1587, 1577, 1, 0, 0, 0, 1587, 1581, 1, 0, 0, 0, 1588, 283,
		1, 0, 0, 0, 1589, 1590, 5, 41, 0, 0, 1590, 1591, 5, 57, 0, 0, 1591, 1592,
		3, 412, 206, 0, 1592, 1593, 5, 58, 0, 0, 1593, 1594, 3, 286, 143, 0, 1594,
		285, 1, 0, 0, 0, 1595, 1599, 5, 59, 0, 0, 1596, 1598, 3, 288, 144, 0, 1597,
		1596, 1, 0, 0, 0, 1598, 1601, 1, 0, 0, 0, 1599, 1597, 1, 0, 0, 0, 1599,
		1600, 1, 0, 0, 0, 1600, 1605, 1, 0, 0, 0, 1601, 1599, 1, 0, 0, 0, 1602,
		1604, 3, 292, 146, 0, 1603, 1602, 1, 0, 0, 0, 1604, 1607, 1, 0, 0, 0, 1605,
		1603, 1, 0, 0, 0, 1605, 1606, 1, 0, 0, 0, 1606, 1608, 1, 0, 0, 0, 1607,
		1605, 1, 0, 0, 0, 1608, 1609, 5, 60, 0, 0, 1609, 287, 1, 0, 0, 0, 1610,
		1611, 3, 290, 145, 0, 1611, 1612, 3, 252, 126, 0, 1612, 289, 1, 0, 0, 0,
		1613, 1617, 3, 292, 146, 0, 1614, 1616, 3, 292, 146, 0, 1615, 1614, 1,
		0, 0, 0, 1616, 1619, 1, 0, 0, 0, 1617, 1615, 1, 0, 0, 0, 1617, 1618, 1,
		0, 0, 0, 1618, 291, 1, 0, 0, 0, 1619, 1617, 1, 0, 0, 0, 1620, 1621, 5,
		6, 0, 0, 1621, 1622, 3, 410, 205, 0, 1622, 1623, 5, 72, 0, 0, 1623, 1631,
		1, 0, 0, 0, 1624, 1625, 5, 6, 0, 0, 1625, 1626, 3, 294, 147, 0, 1626, 1627,
		5, 72, 0, 0, 1627, 1631, 1, 0, 0, 0, 1628, 1629, 5, 12, 0, 0, 1629, 1631,
		5, 72, 0, 0, 1630, 1620, 1, 0, 0, 0, 1630, 1624, 1, 0, 0, 0, 1630, 1628,
		1, 0, 0, 0, 1631, 293, 1, 0, 0, 0, 1632, 1633, 5, 102, 0, 0, 1633, 295,
		1, 0, 0, 0, 1634, 1635, 5, 50, 0, 0, 1635, 1636, 5, 57, 0, 0, 1636, 1637,
		3, 412, 206, 0, 1637, 1638, 5, 58, 0, 0, 1638, 1639, 3, 260, 130, 0, 1639,
		297, 1, 0, 0, 0, 1640, 1641, 5, 50, 0, 0, 1641, 1642, 5, 57, 0, 0, 1642,
		1643, 3, 412, 206, 0, 1643, 1644, 5, 58, 0, 0, 1644, 1645, 3, 262, 131,
		0, 1645, 299, 1, 0, 0, 0, 1646, 1647, 5, 13, 0, 0, 1647, 1648, 3, 260,
		130, 0, 1648, 1649, 5, 50, 0, 0, 1649, 1650, 5, 57, 0, 0, 1650, 1651, 3,
		412, 206, 0, 1651, 1652, 5, 58, 0, 0, 1652, 1653, 5, 63, 0, 0, 1653, 301,
		1, 0, 0, 0, 1654, 1657, 3, 306, 153, 0, 1655, 1657, 3, 316, 158, 0, 1656,
		1654, 1, 0, 0, 0, 1656, 1655, 1, 0, 0, 0, 1657, 303, 1, 0, 0, 0, 1658,
		1661, 3, 308, 154, 0, 1659, 1661, 3, 318, 159, 0, 1660, 1658, 1, 0, 0,
		0, 1660, 1659, 1, 0, 0, 0, 1661, 305, 1, 0, 0, 0, 1662, 1663, 5, 21, 0,
		0, 1663, 1665, 5, 57, 0, 0, 1664, 1666, 3, 310, 155, 0, 1665, 1664, 1,
		0, 0, 0, 1665, 1666, 1, 0, 0, 0, 1666, 1667, 1, 0, 0, 0, 1667, 1669, 5,
		63, 0, 0, 1668, 1670, 3, 412, 206, 0, 1669, 1668, 1, 0, 0, 0, 1669, 1670,
		1, 0, 0, 0, 1670, 1671, 1, 0, 0, 0, 1671, 1673, 5, 63, 0, 0, 1672, 1674,
		3, 312, 156, 0, 1673, 1672, 1, 0, 0, 0, 1673, 1674, 1, 0, 0, 0, 1674, 1675,
		1, 0, 0, 0, 1675, 1676, 5, 58, 0, 0, 1676, 1677, 3, 260, 130, 0, 1677,
		307, 1, 0, 0, 0, 1678, 1679, 5, 21, 0, 0, 1679, 1681, 5, 57, 0, 0, 1680,
		1682, 3, 310, 155, 0, 1681, 1680, 1, 0, 0, 0, 1681, 1682, 1, 0, 0, 0, 1682,
		1683, 1, 0, 0, 0, 1683, 1685, 5, 63, 0, 0, 1684, 1686, 3, 412, 206, 0,
		1685, 1684, 1, 0, 0, 0, 1685, 1686, 1, 0, 0, 0, 1686, 1687, 1, 0, 0, 0,
		1687, 1689, 5, 63, 0, 0, 1688, 1690, 3, 312, 156, 0, 1689, 1688, 1, 0,
		0, 0, 1689, 1690, 1, 0, 0, 0, 1690, 1691, 1, 0, 0, 0, 1691, 1692, 5, 58,
		0, 0, 1692, 1693, 3, 262, 131, 0, 1693, 309, 1, 0, 0, 0, 1694, 1697, 3,
		314, 157, 0, 1695, 1697, 3, 258, 129, 0, 1696, 1694, 1, 0, 0, 0, 1696,
		1695, 1, 0, 0, 0, 1697, 311, 1, 0, 0, 0, 1698, 1699, 3, 314, 157, 0, 1699,
		313, 1, 0, 0, 0, 1700, 1705, 3, 274, 137, 0, 1701, 1702, 5, 64, 0, 0, 1702,
		1704, 3, 274, 137, 0, 1703, 1701, 1, 0, 0, 0, 1704, 1707, 1, 0, 0, 0, 1705,
		1703, 1, 0, 0, 0, 1705, 1706, 1, 0, 0, 0, 1706, 315, 1, 0, 0, 0, 1707,
		1705, 1, 0, 0, 0, 1708, 1709, 5, 21, 0, 0, 1709, 1713, 5, 57, 0, 0, 1710,
		1712, 3, 154, 77, 0, 1711, 1710, 1, 0, 0, 0, 1712, 1715, 1, 0, 0, 0, 1713,
		1711, 1, 0, 0, 0, 1713, 1714, 1, 0, 0, 0, 1714, 1716, 1, 0, 0, 0, 1715,
		1713, 1, 0, 0, 0, 1716, 1717, 3, 114, 57, 0, 1717, 1718, 3, 110, 55, 0,
		1718, 1719, 5, 72, 0, 0, 1719, 1720, 3, 412, 206, 0, 1720, 1721, 5, 58,
		0, 0, 1721, 1722, 3, 260, 130, 0, 1722, 317, 1, 0, 0, 0, 1723, 1724, 5,
		21, 0, 0, 1724, 1728, 5, 57, 0, 0, 1725, 1727, 3, 154, 77, 0, 1726, 1725,
		1, 0, 0, 0, 1727, 1730, 1, 0, 0, 0, 1728, 1726, 1, 0, 0, 0, 1728, 1729,
		1, 0, 0, 0, 1729, 1731, 1, 0, 0, 0, 1730, 1728, 1, 0, 0, 0, 1731, 1732,
		3, 114, 57, 0, 1732, 1733, 3, 110, 55, 0, 1733, 1734, 5, 72, 0, 0, 1734,
		1735, 3, 412, 206, 0, 1735, 1736, 5, 58, 0, 0, 1736, 1737, 3, 262, 131,
		0, 1737, 319, 1, 0, 0, 0, 1738, 1740, 5, 4, 0, 0, 1739, 1741, 5, 102, 0,
		0, 1740, 1739, 1, 0, 0, 0, 1740, 1741, 1, 0, 0, 0, 1741, 1742, 1, 0, 0,
		0, 1742, 1743, 5, 63, 0, 0, 1743, 321, 1, 0, 0, 0, 1744, 1746, 5, 11, 0,
		0, 1745, 1747, 5, 102, 0, 0, 1746, 1745, 1, 0, 0, 0, 1746, 1747, 1, 0,
		0, 0, 1747, 1748, 1, 0, 0, 0, 1748, 1749, 5, 63, 0, 0, 1749, 323, 1, 0,
		0, 0, 1750, 1752, 5, 36, 0, 0, 1751, 1753, 3, 412, 206, 0, 1752, 1751,
		1, 0, 0, 0, 1752, 1753, 1, 0, 0, 0, 1753, 1754, 1, 0, 0, 0, 1754, 1755,
		5, 63, 0, 0, 1755, 325, 1, 0, 0, 0, 1756, 1757, 5, 44, 0, 0, 1757, 1758,
		3, 412, 206, 0, 1758, 1759, 5, 63, 0, 0, 1759, 327, 1, 0, 0, 0, 1760, 1761,
		5, 42, 0, 0, 1761, 1762, 5, 57, 0, 0, 1762, 1763, 3, 412, 206, 0, 1763,
		1764, 5, 58, 0, 0, 1764, 1765, 3, 250, 125, 0, 1765, 329, 1, 0, 0, 0, 1766,
		1767, 5, 47, 0, 0, 1767, 1768, 3, 250, 125, 0, 1768, 1769, 3, 332, 166,
		0, 1769, 1779, 1, 0, 0, 0, 1770, 1771, 5, 47, 0, 0, 1771, 1773, 3, 250,
		125, 0, 1772, 1774, 3, 332, 166, 0, 1773, 1772, 1, 0, 0, 0, 1773, 1774,
		1, 0, 0, 0, 1774, 1775, 1, 0, 0, 0, 1775, 1776, 3, 340, 170, 0, 1776, 1779,
		1, 0, 0, 0, 1777, 1779, 3, 342, 171, 0, 1778, 1766, 1, 0, 0, 0, 1778, 1770,
		1, 0, 0, 0, 1778, 1777, 1, 0, 0, 0, 1779, 331, 1, 0, 0, 0, 1780, 1784,
		3, 334, 167, 0, 1781, 1783, 3, 334, 167, 0, 1782, 1781, 1, 0, 0, 0, 1783,
		1786, 1, 0, 0, 0, 1784, 1782, 1, 0, 0, 0, 1784, 1785, 1, 0, 0, 0, 1785,
		333, 1, 0, 0, 0, 1786, 1784, 1, 0, 0, 0, 1787, 1788, 5, 7, 0, 0, 1788,
		1789, 5, 57, 0, 0, 1789, 1790, 3, 336, 168, 0, 1790, 1791, 5, 58, 0, 0,
		1791, 1792, 3, 250, 125, 0, 1792, 335, 1, 0, 0, 0, 1793, 1795, 3, 154,
		77, 0, 1794, 1793, 1, 0, 0, 0, 1795, 1798, 1, 0, 0, 0, 1796, 1794, 1, 0,
		0, 0, 1796, 1797, 1, 0, 0, 0, 1797, 1799, 1, 0, 0, 0, 1798, 1796, 1, 0,
		0, 0, 1799, 1800, 3, 338, 169, 0, 1800, 1801, 3, 110, 55, 0, 1801, 337,
		1, 0, 0, 0, 1802, 1807, 3, 122, 61, 0, 1803, 1804, 5, 86, 0, 0, 1804, 1806,
		3, 14, 7, 0, 1805, 1803, 1, 0, 0, 0, 1806, 1809, 1, 0, 0, 0, 1807, 1805,
		1, 0, 0, 0, 1807, 1808, 1, 0, 0, 0, 1808, 339, 1, 0, 0, 0, 1809, 1807,
		1, 0, 0, 0, 1810, 1811, 5, 19, 0, 0, 1811, 1812, 3, 250, 125, 0, 1812,
		341, 1, 0, 0, 0, 1813, 1814, 5, 47, 0, 0, 1814, 1815, 3, 344, 172, 0, 1815,
		1817, 3, 250, 125, 0, 1816, 1818, 3, 332, 166, 0, 1817, 1816, 1, 0, 0,
		0, 1817, 1818, 1, 0, 0, 0, 1818, 1820, 1, 0, 0, 0, 1819, 1821, 3, 340,
		170, 0, 1820, 1819, 1, 0, 0, 0, 1820, 1821, 1, 0, 0, 0, 1821, 343, 1, 0,
		0, 0, 1822, 1823, 5, 57, 0, 0, 1823, 1825, 3, 346, 173, 0, 1824, 1826,
		5, 63, 0, 0, 1825, 1824, 1, 0, 0, 0, 1825, 1826, 1, 0, 0, 0, 1826, 1827,
		1, 0, 0, 0, 1827, 1828, 5, 58, 0, 0, 1828, 345, 1, 0, 0, 0, 1829, 1834,
		3, 348, 174, 0, 1830, 1831, 5, 63, 0, 0, 1831, 1833, 3, 348, 174, 0, 1832,
		1830, 1, 0, 0, 0, 1833, 1836, 1, 0, 0, 0, 1834, 1832, 1, 0, 0, 0, 1834,
		1835, 1, 0, 0, 0, 1835, 347, 1, 0, 0, 0, 1836, 1834, 1, 0, 0, 0, 1837,
		1839, 3, 154, 77, 0, 1838, 1837, 1, 0, 0, 0, 1839, 1842, 1, 0, 0, 0, 1840,
		1838, 1, 0, 0, 0, 1840, 1841, 1, 0, 0, 0, 1841, 1843, 1, 0, 0, 0, 1842,
		1840, 1, 0, 0, 0, 1843, 1844, 3, 114, 57, 0, 1844, 1845, 3, 110, 55, 0,
		1845, 1846, 5, 66, 0, 0, 1846, 1847, 3, 412, 206, 0, 1847, 349, 1, 0, 0,
		0, 1848, 1851, 3, 364, 182, 0, 1849, 1851, 3, 404, 202, 0, 1850, 1848,
		1, 0, 0, 0, 1850, 1849, 1, 0, 0, 0, 1851, 1855, 1, 0, 0, 0, 1852, 1854,
		3, 358, 179, 0, 1853, 1852, 1, 0, 0, 0, 1854, 1857, 1, 0, 0, 0, 1855, 1853,
		1, 0, 0, 0, 1855, 1856, 1, 0, 0, 0, 1856, 351, 1, 0, 0, 0, 1857, 1855,
		1, 0, 0, 0, 1858, 1888, 3, 0, 0, 0, 1859, 1864, 3, 52, 26, 0, 1860, 1861,
		5, 61, 0, 0, 1861, 1863, 5, 62, 0, 0, 1862, 1860, 1, 0, 0, 0, 1863, 1866,
		1, 0, 0, 0, 1864, 1862, 1, 0, 0, 0, 1864, 1865, 1, 0, 0, 0, 1865, 1867,
		1, 0, 0, 0, 1866, 1864, 1, 0, 0, 0, 1867, 1868, 5, 65, 0, 0, 1868, 1869,
		5, 9, 0, 0, 1869, 1888, 1, 0, 0, 0, 1870, 1871, 5, 48, 0, 0, 1871, 1872,
		5, 65, 0, 0, 1872, 1888, 5, 9, 0, 0, 1873, 1888, 5, 43, 0, 0, 1874, 1875,
		3, 52, 26, 0, 1875, 1876, 5, 65, 0, 0, 1876, 1877, 5, 43, 0, 0, 1877, 1888,
		1, 0, 0, 0, 1878, 1879, 5, 57, 0, 0, 1879, 1880, 3, 412, 206, 0, 1880,
		1881, 5, 58, 0, 0, 1881, 1888, 1, 0, 0, 0, 1882, 1888, 3, 370, 185, 0,
		1883, 1888, 3, 378, 189, 0, 1884, 1888, 3, 384, 192, 0, 1885, 1888, 3,
		390, 195, 0, 1886, 1888, 3, 398, 199, 0, 1887, 1858, 1, 0, 0, 0, 1887,
		1859, 1, 0, 0, 0, 1887, 1870, 1, 0, 0, 0, 1887, 1873, 1, 0, 0, 0, 1887,
		1874, 1, 0, 0, 0, 1887, 1878, 1, 0, 0, 0, 1887, 1882, 1, 0, 0, 0, 1887,
		1883, 1, 0, 0, 0, 1887, 1884, 1, 0, 0, 0, 1887, 1885, 1, 0, 0, 0, 1887,
		1886, 1, 0, 0, 0, 1888, 353, 1, 0, 0, 0, 1889, 1890, 1, 0, 0, 0, 1890,
		355, 1, 0, 0, 0, 1891, 1920, 3, 0, 0, 0, 1892, 1897, 3, 52, 26, 0, 1893,
		1894, 5, 61, 0, 0, 1894, 1896, 5, 62, 0, 0, 1895, 1893, 1, 0, 0, 0, 1896,
		1899, 1, 0, 0, 0, 1897, 1895, 1, 0, 0, 0, 1897, 1898, 1, 0, 0, 0, 1898,
		1900, 1, 0, 0, 0, 1899, 1897, 1, 0, 0, 0, 1900, 1901, 5, 65, 0, 0, 1901,
		1902, 5, 9, 0, 0, 1902, 1920, 1, 0, 0, 0, 1903, 1904, 5, 48, 0, 0, 1904,
		1905, 5, 65, 0, 0, 1905, 1920, 5, 9, 0, 0, 1906, 1920, 5, 43, 0, 0, 1907,
		1908, 3, 52, 26, 0, 1908, 1909, 5, 65, 0, 0, 1909, 1910, 5, 43, 0, 0, 1910,
		1920, 1, 0, 0, 0, 1911, 1912, 5, 57, 0, 0, 1912, 1913, 3, 412, 206, 0,
		1913, 1914, 5, 58, 0, 0, 1914, 1920, 1, 0, 0, 0, 1915, 1920, 3, 370, 185,
		0, 1916, 1920, 3, 378, 189, 0, 1917, 1920, 3, 390, 195, 0, 1918, 1920,
		3, 398, 199, 0, 1919, 1891, 1, 0, 0, 0, 1919, 1892, 1, 0, 0, 0, 1919, 1903,
		1, 0, 0, 0, 1919, 1906, 1, 0, 0, 0, 1919, 1907, 1, 0, 0, 0, 1919, 1911,
		1, 0, 0, 0, 1919, 1915, 1, 0, 0, 0, 1919, 1916, 1, 0, 0, 0, 1919, 1917,
		1, 0, 0, 0, 1919, 1918, 1, 0, 0, 0, 1920, 357, 1, 0, 0, 0, 1921, 1927,
		3, 372, 186, 0, 1922, 1927, 3, 380, 190, 0, 1923, 1927, 3, 386, 193, 0,
		1924, 1927, 3, 392, 196, 0, 1925, 1927, 3, 400, 200, 0, 1926, 1921, 1,
		0, 0, 0, 1926, 1922, 1, 0, 0, 0, 1926, 1923, 1, 0, 0, 0, 1926, 1924, 1,
		0, 0, 0, 1926, 1925, 1, 0, 0, 0, 1927, 359, 1, 0, 0, 0, 1928, 1929, 1,
		0, 0, 0, 1929, 361, 1, 0, 0, 0, 1930, 1935, 3, 372, 186, 0, 1931, 1935,
		3, 380, 190, 0, 1932, 1935, 3, 392, 196, 0, 1933, 1935, 3, 400, 200, 0,
		1934, 1930, 1, 0, 0, 0, 1934, 1931, 1, 0, 0, 0, 1934, 1932, 1, 0, 0, 0,
		1934, 1933, 1, 0, 0, 0, 1935, 363, 1, 0, 0, 0, 1936, 1977, 3, 0, 0, 0,
		1937, 1942, 3, 52, 26, 0, 1938, 1939, 5, 61, 0, 0, 1939, 1941, 5, 62, 0,
		0, 1940, 1938, 1, 0, 0, 0, 1941, 1944, 1, 0, 0, 0, 1942, 1940, 1, 0, 0,
		0, 1942, 1943, 1, 0, 0, 0, 1943, 1945, 1, 0, 0, 0, 1944, 1942, 1, 0, 0,
		0, 1945, 1946, 5, 65, 0, 0, 1946, 1947, 5, 9, 0, 0, 1947, 1977, 1, 0, 0,
		0, 1948, 1953, 3, 116, 58, 0, 1949, 1950, 5, 61, 0, 0, 1950, 1952, 5, 62,
		0, 0, 1951, 1949, 1, 0, 0, 0, 1952, 1955, 1, 0, 0, 0, 1953, 1951, 1, 0,
		0, 0, 1953, 1954, 1, 0, 0, 0, 1954, 1956, 1, 0, 0, 0, 1955, 1953, 1, 0,
		0, 0, 1956, 1957, 5, 65, 0, 0, 1957, 1958, 5, 9, 0, 0, 1958, 1977, 1, 0,
		0, 0, 1959, 1960, 5, 48, 0, 0, 1960, 1961, 5, 65, 0, 0, 1961, 1977, 5,
		9, 0, 0, 1962, 1977, 5, 43, 0, 0, 1963, 1964, 3, 52, 26, 0, 1964, 1965,
		5, 65, 0, 0, 1965, 1966, 5, 43, 0, 0, 1966, 1977, 1, 0, 0, 0, 1967, 1968,
		5, 57, 0, 0, 1968, 1969, 3, 412, 206, 0, 1969, 1970, 5, 58, 0, 0, 1970,
		1977, 1, 0, 0, 0, 1971, 1977, 3, 374, 187, 0, 1972, 1977, 3, 382, 191,
		0, 1973, 1977, 3, 388, 194, 0, 1974, 1977, 3, 394, 197, 0, 1975, 1977,
		3, 402, 201, 0, 1976, 1936, 1, 0, 0, 0, 1976, 1937, 1, 0, 0, 0, 1976, 1948,
		1, 0, 0, 0, 1976, 1959, 1, 0, 0, 0, 1976, 1962, 1, 0, 0, 0, 1976, 1963,
		1, 0, 0, 0, 1976, 1967, 1, 0, 0, 0, 1976, 1971, 1, 0, 0, 0, 1976, 1972,
		1, 0, 0, 0, 1976, 1973, 1, 0, 0, 0, 1976, 1974, 1, 0, 0, 0, 1976, 1975,
		1, 0, 0, 0, 1977, 365, 1, 0, 0, 0, 1978, 1979, 1, 0, 0, 0, 1979, 367, 1,
		0, 0, 0, 1980, 2020, 3, 0, 0, 0, 1981, 1986, 3, 52, 26, 0, 1982, 1983,
		5, 61, 0, 0, 1983, 1985, 5, 62, 0, 0, 1984, 1982, 1, 0, 0, 0, 1985, 1988,
		1, 0, 0, 0, 1986, 1984, 1, 0, 0, 0, 1986, 1987, 1, 0, 0, 0, 1987, 1989,
		1, 0, 0, 0, 1988, 1986, 1, 0, 0, 0, 1989, 1990, 5, 65, 0, 0, 1990, 1991,
		5, 9, 0, 0, 1991, 2020, 1, 0, 0, 0, 1992, 1997, 3, 116, 58, 0, 1993, 1994,
		5, 61, 0, 0, 1994, 1996, 5, 62, 0, 0, 1995, 1993, 1, 0, 0, 0, 1996, 1999,
		1, 0, 0, 0, 1997, 1995, 1, 0, 0, 0, 1997, 1998, 1, 0, 0, 0, 1998, 2000,
		1, 0, 0, 0, 1999, 1997, 1, 0, 0, 0, 2000, 2001, 5, 65, 0, 0, 2001, 2002,
		5, 9, 0, 0, 2002, 2020, 1, 0, 0, 0, 2003, 2004, 5, 48, 0, 0, 2004, 2005,
		5, 65, 0, 0, 2005, 2020, 5, 9, 0, 0, 2006, 2020, 5, 43, 0, 0, 2007, 2008,
		3, 52, 26, 0, 2008, 2009, 5, 65, 0, 0, 2009, 2010, 5, 43, 0, 0, 2010, 2020,
		1, 0, 0, 0, 2011, 2012, 5, 57, 0, 0, 2012, 2013, 3, 412, 206, 0, 2013,
		2014, 5, 58, 0, 0, 2014, 2020, 1, 0, 0, 0, 2015, 2020, 3, 374, 187, 0,
		2016, 2020, 3, 382, 191, 0, 2017, 2020, 3, 394, 197, 0, 2018, 2020, 3,
		402, 201, 0, 2019, 1980, 1, 0, 0, 0, 2019, 1981, 1, 0, 0, 0, 2019, 1992,
		1, 0, 0, 0, 2019, 2003, 1, 0, 0, 0, 2019, 2006, 1, 0, 0, 0, 2019, 2007,
		1, 0, 0, 0, 2019, 2011, 1, 0, 0, 0, 2019, 2015, 1, 0, 0, 0, 2019, 2016,
		1, 0, 0, 0, 2019, 2017, 1, 0, 0, 0, 2019, 2018, 1, 0, 0, 0, 2020, 369,
		1, 0, 0, 0, 2021, 2023, 5, 31, 0, 0, 2022, 2024, 3, 40, 20, 0, 2023, 2022,
		1, 0, 0, 0, 2023, 2024, 1, 0, 0, 0, 2024, 2028, 1, 0, 0, 0, 2025, 2027,
		3, 228, 114, 0, 2026, 2025, 1, 0, 0, 0, 2027, 2030, 1, 0, 0, 0, 2028, 2026,
		1, 0, 0, 0, 2028, 2029, 1, 0, 0, 0, 2029, 2031, 1, 0, 0, 0, 2030, 2028,
		1, 0, 0, 0, 2031, 2042, 5, 102, 0, 0, 2032, 2036, 5, 65, 0, 0, 2033, 2035,
		3, 228, 114, 0, 2034, 2033, 1, 0, 0, 0, 2035, 2038, 1, 0, 0, 0, 2036, 2034,
		1, 0, 0, 0, 2036, 2037, 1, 0, 0, 0, 2037, 2039, 1, 0, 0, 0, 2038, 2036,
		1, 0, 0, 0, 2039, 2041, 5, 102, 0, 0, 2040, 2032, 1, 0, 0, 0, 2041, 2044,
		1, 0, 0, 0, 2042, 2040, 1, 0, 0, 0, 2042, 2043, 1, 0, 0, 0, 2043, 2046,
		1, 0, 0, 0, 2044, 2042, 1, 0, 0, 0, 2045, 2047, 3, 376, 188, 0, 2046, 2045,
		1, 0, 0, 0, 2046, 2047, 1, 0, 0, 0, 2047, 2048, 1, 0, 0, 0, 2048, 2050,
		5, 57, 0, 0, 2049, 2051, 3, 396, 198, 0, 2050, 2049, 1, 0, 0, 0, 2050,
		2051, 1, 0, 0, 0, 2051, 2052, 1, 0, 0, 0, 2052, 2054, 5, 58, 0, 0, 2053,
		2055, 3, 96, 48, 0, 2054, 2053, 1, 0, 0, 0, 2054, 2055, 1, 0, 0, 0, 2055,
		2105, 1, 0, 0, 0, 2056, 2057, 3, 56, 28, 0, 2057, 2058, 5, 65, 0, 0, 2058,
		2060, 5, 31, 0, 0, 2059, 2061, 3, 40, 20, 0, 2060, 2059, 1, 0, 0, 0, 2060,
		2061, 1, 0, 0, 0, 2061, 2065, 1, 0, 0, 0, 2062, 2064, 3, 228, 114, 0, 2063,
		2062, 1, 0, 0, 0, 2064, 2067, 1, 0, 0, 0, 2065, 2063, 1, 0, 0, 0, 2065,
		2066, 1, 0, 0, 0, 2066, 2068, 1, 0, 0, 0, 2067, 2065, 1, 0, 0, 0, 2068,
		2070, 5, 102, 0, 0, 2069, 2071, 3, 376, 188, 0, 2070, 2069, 1, 0, 0, 0,
		2070, 2071, 1, 0, 0, 0, 2071, 2072, 1, 0, 0, 0, 2072, 2074, 5, 57, 0, 0,
		2073, 2075, 3, 396, 198, 0, 2074, 2073, 1, 0, 0, 0, 2074, 2075, 1, 0, 0,
		0, 2075, 2076, 1, 0, 0, 0, 2076, 2078, 5, 58, 0, 0, 2077, 2079, 3, 96,
		48, 0, 2078, 2077, 1, 0, 0, 0, 2078, 2079, 1, 0, 0, 0, 2079, 2105, 1, 0,
		0, 0, 2080, 2081, 3, 350, 175, 0, 2081, 2082, 5, 65, 0, 0, 2082, 2084,
		5, 31, 0, 0, 2083, 2085, 3, 40, 20, 0, 2084, 2083, 1, 0, 0, 0, 2084, 2085,
		1, 0, 0, 0, 2085, 2089, 1, 0, 0, 0, 2086, 2088, 3, 228, 114, 0, 2087, 2086,
		1, 0, 0, 0, 2088, 2091, 1, 0, 0, 0, 2089, 2087, 1, 0, 0, 0, 2089, 2090,
		1, 0, 0, 0, 2090, 2092, 1, 0, 0, 0, 2091, 2089, 1, 0, 0, 0, 2092, 2094,
		5, 102, 0, 0, 2093, 2095, 3, 376, 188, 0, 2094, 2093, 1, 0, 0, 0, 2094,
		2095, 1, 0, 0, 0, 2095, 2096, 1, 0, 0, 0, 2096, 2098, 5, 57, 0, 0, 2097,
		2099, 3, 396, 198, 0, 2098, 2097, 1, 0, 0, 0, 2098, 2099, 1, 0, 0, 0, 2099,
		2100, 1, 0, 0, 0, 2100, 2102, 5, 58, 0, 0, 2101, 2103, 3, 96, 48, 0, 2102,
		2101, 1, 0, 0, 0, 2102, 2103, 1, 0, 0, 0, 2103, 2105, 1, 0, 0, 0, 2104,
		2021, 1, 0, 0, 0, 2104, 2056, 1, 0, 0, 0, 2104, 2080, 1, 0, 0, 0, 2105,
		371, 1, 0, 0, 0, 2106, 2107, 5, 65, 0, 0, 2107, 2109, 5, 31, 0, 0, 2108,
		2110, 3, 40, 20, 0, 2109, 2108, 1, 0, 0, 0, 2109, 2110, 1, 0, 0, 0, 2110,
		2114, 1, 0, 0, 0, 2111, 2113, 3, 228, 114, 0, 2112, 2111, 1, 0, 0, 0, 2113,
		2116, 1, 0, 0, 0, 2114, 2112, 1, 0, 0, 0, 2114, 2115, 1, 0, 0, 0, 2115,
		2117, 1, 0, 0, 0, 2116, 2114, 1, 0, 0, 0, 2117, 2119, 5, 102, 0, 0, 2118,
		2120, 3, 376, 188, 0, 2119, 2118, 1, 0, 0, 0, 2119, 2120, 1, 0, 0, 0, 2120,
		2121, 1, 0, 0, 0, 2121, 2123, 5, 57, 0, 0, 2122, 2124, 3, 396, 198, 0,
		2123, 2122, 1, 0, 0, 0, 2123, 2124, 1, 0, 0, 0, 2124, 2125, 1, 0, 0, 0,
		2125, 2127, 5, 58, 0, 0, 2126, 2128, 3, 96, 48, 0, 2127, 2126, 1, 0, 0,
		0, 2127, 2128, 1, 0, 0, 0, 2128, 373, 1, 0, 0, 0, 2129, 2131, 5, 31, 0,
		0, 2130, 2132, 3, 40, 20, 0, 2131, 2130, 1, 0, 0, 0, 2131, 2132, 1, 0,
		0, 0, 2132, 2136, 1, 0, 0, 0, 2133, 2135, 3, 228, 114, 0, 2134, 2133, 1,
		0, 0, 0, 2135, 2138, 1, 0, 0, 0, 2136, 2134, 1, 0, 0, 0, 2136, 2137, 1,
		0, 0, 0, 2137, 2139, 1, 0, 0, 0, 2138, 2136, 1, 0, 0, 0, 2139, 2150, 5,
		102, 0, 0, 2140, 2144, 5, 65, 0, 0, 2141, 2143, 3, 228, 114, 0, 2142, 2141,
		1, 0, 0, 0, 2143, 2146, 1, 0, 0, 0, 2144, 2142, 1, 0, 0, 0, 2144, 2145,
		1, 0, 0, 0, 2145, 2147, 1, 0, 0, 0, 2146, 2144, 1, 0, 0, 0, 2147, 2149,
		5, 102, 0, 0, 2148, 2140, 1, 0, 0, 0, 2149, 2152, 1, 0, 0, 0, 2150, 2148,
		1, 0, 0, 0, 2150, 2151, 1, 0, 0, 0, 2151, 2154, 1, 0, 0, 0, 2152, 2150,
		1, 0, 0, 0, 2153, 2155, 3, 376, 188, 0, 2154, 2153, 1, 0, 0, 0, 2154, 2155,
		1, 0, 0, 0, 2155, 2156, 1, 0, 0, 0, 2156, 2158, 5, 57, 0, 0, 2157, 2159,
		3, 396, 198, 0, 2158, 2157, 1, 0, 0, 0, 2158, 2159, 1, 0, 0, 0, 2159, 2160,
		1, 0, 0, 0, 2160, 2162, 5, 58, 0, 0, 2161, 2163, 3, 96, 48, 0, 2162, 2161,
		1, 0, 0, 0, 2162, 2163, 1, 0, 0, 0, 2163, 2189, 1, 0, 0, 0, 2164, 2165,
		3, 56, 28, 0, 2165, 2166, 5, 65, 0, 0, 2166, 2168, 5, 31, 0, 0, 2167, 2169,
		3, 40, 20, 0, 2168, 2167, 1, 0, 0, 0, 2168, 2169, 1, 0, 0, 0, 2169, 2173,
		1, 0, 0, 0, 2170, 2172, 3, 228, 114, 0, 2171, 2170, 1, 0, 0, 0, 2172, 2175,
		1, 0, 0, 0, 2173, 2171, 1, 0, 0, 0, 2173, 2174, 1, 0, 0, 0, 2174, 2176,
		1, 0, 0, 0, 2175, 2173, 1, 0, 0, 0, 2176, 2178, 5, 102, 0, 0, 2177, 2179,
		3, 376, 188, 0, 2178, 2177, 1, 0, 0, 0, 2178, 2179, 1, 0, 0, 0, 2179, 2180,
		1, 0, 0, 0, 2180, 2182, 5, 57, 0, 0, 2181, 2183, 3, 396, 198, 0, 2182,
		2181, 1, 0, 0, 0, 2182, 2183, 1, 0, 0, 0, 2183, 2184, 1, 0, 0, 0, 2184,
		2186, 5, 58, 0, 0, 2185, 2187, 3, 96, 48, 0, 2186, 2185, 1, 0, 0, 0, 2186,
		2187, 1, 0, 0, 0, 2187, 2189, 1, 0, 0, 0, 2188, 2129, 1, 0, 0, 0, 2188,
		2164, 1, 0, 0, 0, 2189, 375, 1, 0, 0, 0, 2190, 2194, 3, 40, 20, 0, 2191,
		2192, 5, 68, 0, 0, 2192, 2194, 5, 67, 0, 0, 2193, 2190, 1, 0, 0, 0, 2193,
		2191, 1, 0, 0, 0, 2194, 377, 1, 0, 0, 0, 2195, 2196, 3, 350, 175, 0, 2196,
		2197, 5, 65, 0, 0, 2197, 2198, 5, 102, 0, 0, 2198, 2209, 1, 0, 0, 0, 2199,
		2200, 5, 40, 0, 0, 2200, 2201, 5, 65, 0, 0, 2201, 2209, 5, 102, 0, 0, 2202,
		2203, 3, 52, 26, 0, 2203, 2204, 5, 65, 0, 0, 2204, 2205, 5, 40, 0, 0, 2205,
		2206, 5, 65, 0, 0, 2206, 2207, 5, 102, 0, 0, 2207, 2209, 1, 0, 0, 0, 2208,
		2195, 1, 0, 0, 0, 2208, 2199, 1, 0, 0, 0, 2208, 2202, 1, 0, 0, 0, 2209,
		379, 1, 0, 0, 0, 2210, 2211, 5, 65, 0, 0, 2211, 2212, 5, 102, 0, 0, 2212,
		381, 1, 0, 0, 0, 2213, 2214, 5, 40, 0, 0, 2214, 2215, 5, 65, 0, 0, 2215,
		2223, 5, 102, 0, 0, 2216, 2217, 3, 52, 26, 0, 2217, 2218, 5, 65, 0, 0,
		2218, 2219, 5, 40, 0, 0, 2219, 2220, 5, 65, 0, 0, 2220, 2221, 5, 102, 0,
		0, 2221, 2223, 1, 0, 0, 0, 2222, 2213, 1, 0, 0, 0, 2222, 2216, 1, 0, 0,
		0, 2223, 383, 1, 0, 0, 0, 2224, 2225, 3, 56, 28, 0, 2225, 2226, 5, 61,
		0, 0, 2226, 2227, 3, 412, 206, 0, 2227, 2228, 5, 62, 0, 0, 2228, 2235,
		1, 0, 0, 0, 2229, 2230, 3, 356, 178, 0, 2230, 2231, 5, 61, 0, 0, 2231,
		2232, 3, 412, 206, 0, 2232, 2233, 5, 62, 0, 0, 2233, 2235, 1, 0, 0, 0,
		2234, 2224, 1, 0, 0, 0, 2234, 2229, 1, 0, 0, 0, 2235, 2243, 1, 0, 0, 0,
		2236, 2237, 3, 354, 177, 0, 2237, 2238, 5, 61, 0, 0, 2238, 2239, 3, 412,
		206, 0, 2239, 2240, 5, 62, 0, 0, 2240, 2242, 1, 0, 0, 0, 2241, 2236, 1,
		0, 0, 0, 2242, 2245, 1, 0, 0, 0, 2243, 2241, 1, 0, 0, 0, 2243, 2244, 1,
		0, 0, 0, 2244, 385, 1, 0, 0, 0, 2245, 2243, 1, 0, 0, 0, 2246, 2247, 3,
		362, 181, 0, 2247, 2248, 5, 61, 0, 0, 2248, 2249, 3, 412, 206, 0, 2249,
		2257, 5, 62, 0, 0, 2250, 2251, 3, 360, 180, 0, 2251, 2252, 5, 61, 0, 0,
		2252, 2253, 3, 412, 206, 0, 2253, 2254, 5, 62, 0, 0, 2254, 2256, 1, 0,
		0, 0, 2255, 2250, 1, 0, 0, 0, 2256, 2259, 1, 0, 0, 0, 2257, 2255, 1, 0,
		0, 0, 2257, 2258, 1, 0, 0, 0, 2258, 387, 1, 0, 0, 0, 2259, 2257, 1, 0,
		0, 0, 2260, 2261, 3, 56, 28, 0, 2261, 2262, 5, 61, 0, 0, 2262, 2263, 3,
		412, 206, 0, 2263, 2264, 5, 62, 0, 0, 2264, 2271, 1, 0, 0, 0, 2265, 2266,
		3, 368, 184, 0, 2266, 2267, 5, 61, 0, 0, 2267, 2268, 3, 412, 206, 0, 2268,
		2269, 5, 62, 0, 0, 2269, 2271, 1, 0, 0, 0, 2270, 2260, 1, 0, 0, 0, 2270,
		2265, 1, 0, 0, 0, 2271, 2279, 1, 0, 0, 0, 2272, 2273, 3, 366, 183, 0, 2273,
		2274, 5, 61, 0, 0, 2274, 2275, 3, 412, 206, 0, 2275, 2276, 5, 62, 0, 0,
		2276, 2278, 1, 0, 0, 0, 2277, 2272, 1, 0, 0, 0, 2278, 2281, 1, 0, 0, 0,
		2279, 2277, 1, 0, 0, 0, 2279, 2280, 1, 0, 0, 0, 2280, 389, 1, 0, 0, 0,
		2281, 2279, 1, 0, 0, 0, 2282, 2283, 3, 58, 29, 0, 2283, 2285, 5, 57, 0,
		0, 2284, 2286, 3, 396, 198, 0, 2285, 2284, 1, 0, 0, 0, 2285, 2286, 1, 0,
		0, 0, 2286, 2287, 1, 0, 0, 0, 2287, 2288, 5, 58, 0, 0, 2288, 2351, 1, 0,
		0, 0, 2289, 2290, 3, 52, 26, 0, 2290, 2292, 5, 65, 0, 0, 2291, 2293, 3,
		40, 20, 0, 2292, 2291, 1, 0, 0, 0, 2292, 2293, 1, 0, 0, 0, 2293, 2294,
		1, 0, 0, 0, 2294, 2295, 5, 102, 0, 0, 2295, 2297, 5, 57, 0, 0, 2296, 2298,
		3, 396, 198, 0, 2297, 2296, 1, 0, 0, 0, 2297, 2298, 1, 0, 0, 0, 2298, 2299,
		1, 0, 0, 0, 2299, 2300, 5, 58, 0, 0, 2300, 2351, 1, 0, 0, 0, 2301, 2302,
		3, 56, 28, 0, 2302, 2304, 5, 65, 0, 0, 2303, 2305, 3, 40, 20, 0, 2304,
		2303, 1, 0, 0, 0, 2304, 2305, 1, 0, 0, 0, 2305, 2306, 1, 0, 0, 0, 2306,
		2307, 5, 102, 0, 0, 2307, 2309, 5, 57, 0, 0, 2308, 2310, 3, 396, 198, 0,
		2309, 2308, 1, 0, 0, 0, 2309, 2310, 1, 0, 0, 0, 2310, 2311, 1, 0, 0, 0,
		2311, 2312, 5, 58, 0, 0, 2312, 2351, 1, 0, 0, 0, 2313, 2314, 3, 350, 175,
		0, 2314, 2316, 5, 65, 0, 0, 2315, 2317, 3, 40, 20, 0, 2316, 2315, 1, 0,
		0, 0, 2316, 2317, 1, 0, 0, 0, 2317, 2318, 1, 0, 0, 0, 2318, 2319, 5, 102,
		0, 0, 2319, 2321, 5, 57, 0, 0, 2320, 2322, 3, 396, 198, 0, 2321, 2320,
		1, 0, 0, 0, 2321, 2322, 1, 0, 0, 0, 2322, 2323, 1, 0, 0, 0, 2323, 2324,
		5, 58, 0, 0, 2324, 2351, 1, 0, 0, 0, 2325, 2326, 5, 40, 0, 0, 2326, 2328,
		5, 65, 0, 0, 2327, 2329, 3, 40, 20, 0, 2328, 2327, 1, 0, 0, 0, 2328, 2329,
		1, 0, 0, 0, 2329, 2330, 1, 0, 0, 0, 2330, 2331, 5, 102, 0, 0, 2331, 2333,
		5, 57, 0, 0, 2332, 2334, 3, 396, 198, 0, 2333, 2332, 1, 0, 0, 0, 2333,
		2334, 1, 0, 0, 0, 2334, 2335, 1, 0, 0, 0, 2335, 2351, 5, 58, 0, 0, 2336,
		2337, 3, 52, 26, 0, 2337, 2338, 5, 65, 0, 0, 2338, 2339, 5, 40, 0, 0, 2339,
		2341, 5, 65, 0, 0, 2340, 2342, 3, 40, 20, 0, 2341, 2340, 1, 0, 0, 0, 2341,
		2342, 1, 0, 0, 0, 2342, 2343, 1, 0, 0, 0, 2343, 2344, 5, 102, 0, 0, 2344,
		2346, 5, 57, 0, 0, 2345, 2347, 3, 396, 198, 0, 2346, 2345, 1, 0, 0, 0,
		2346, 2347, 1, 0, 0, 0, 2347, 2348, 1, 0, 0, 0, 2348, 2349, 5, 58, 0, 0,
		2349, 2351, 1, 0, 0, 0, 2350, 2282, 1, 0, 0, 0, 2350, 2289, 1, 0, 0, 0,
		2350, 2301, 1, 0, 0, 0, 2350, 2313, 1, 0, 0, 0, 2350, 2325, 1, 0, 0, 0,
		2350, 2336, 1, 0, 0, 0, 2351, 391, 1, 0, 0, 0, 2352, 2354, 5, 65, 0, 0,
		2353, 2355, 3, 40, 20, 0, 2354, 2353, 1, 0, 0, 0, 2354, 2355, 1, 0, 0,
		0, 2355, 2356, 1, 0, 0, 0, 2356, 2357, 5, 102, 0, 0, 2357, 2359, 5, 57,
		0, 0, 2358, 2360, 3, 396, 198, 0, 2359, 2358, 1, 0, 0, 0, 2359, 2360, 1,
		0, 0, 0, 2360, 2361, 1, 0, 0, 0, 2361, 2362, 5, 58, 0, 0, 2362, 393, 1,
		0, 0, 0, 2363, 2364, 3, 58, 29, 0, 2364, 2366, 5, 57, 0, 0, 2365, 2367,
		3, 396, 198, 0, 2366, 2365, 1, 0, 0, 0, 2366, 2367, 1, 0, 0, 0, 2367, 2368,
		1, 0, 0, 0, 2368, 2369, 5, 58, 0, 0, 2369, 2420, 1, 0, 0, 0, 2370, 2371,
		3, 52, 26, 0, 2371, 2373, 5, 65, 0, 0, 2372, 2374, 3, 40, 20, 0, 2373,
		2372, 1, 0, 0, 0, 2373, 2374, 1, 0, 0, 0, 2374, 2375, 1, 0, 0, 0, 2375,
		2376, 5, 102, 0, 0, 2376, 2378, 5, 57, 0, 0, 2377, 2379, 3, 396, 198, 0,
		2378, 2377, 1, 0, 0, 0, 2378, 2379, 1, 0, 0, 0, 2379, 2380, 1, 0, 0, 0,
		2380, 2381, 5, 58, 0, 0, 2381, 2420, 1, 0, 0, 0, 2382, 2383, 3, 56, 28,
		0, 2383, 2385, 5, 65, 0, 0, 2384, 2386, 3, 40, 20, 0, 2385, 2384, 1, 0,
		0, 0, 2385, 2386, 1, 0, 0, 0, 2386, 2387, 1, 0, 0, 0, 2387, 2388, 5, 102,
		0, 0, 2388, 2390, 5, 57, 0, 0, 2389, 2391, 3, 396, 198, 0, 2390, 2389,
		1, 0, 0, 0, 2390, 2391, 1, 0, 0, 0, 2391, 2392, 1, 0, 0, 0, 2392, 2393,
		5, 58, 0, 0, 2393, 2420, 1, 0, 0, 0, 2394, 2395, 5, 40, 0, 0, 2395, 2397,
		5, 65, 0, 0, 2396, 2398, 3, 40, 20, 0, 2397, 2396, 1, 0, 0, 0, 2397, 2398,
		1, 0, 0, 0, 2398, 2399, 1, 0, 0, 0, 2399, 2400, 5, 102, 0, 0, 2400, 2402,
		5, 57, 0, 0, 2401, 2403, 3, 396, 198, 0, 2402, 2401, 1, 0, 0, 0, 2402,
		2403, 1, 0, 0, 0, 2403, 2404, 1, 0, 0, 0, 2404, 2420, 5, 58, 0, 0, 2405,
		2406, 3, 52, 26, 0, 2406, 2407, 5, 65, 0, 0, 2407, 2408, 5, 40, 0, 0, 2408,
		2410, 5, 65, 0, 0, 2409, 2411, 3, 40, 20, 0, 2410, 2409, 1, 0, 0, 0, 2410,
		2411, 1, 0, 0, 0, 2411, 2412, 1, 0, 0, 0, 2412, 2413, 5, 102, 0, 0, 2413,
		2415, 5, 57, 0, 0, 2414, 2416, 3, 396, 198, 0, 2415, 2414, 1, 0, 0, 0,
		2415, 2416, 1, 0, 0, 0, 2416, 2417, 1, 0, 0, 0, 2417, 2418, 5, 58, 0, 0,
		2418, 2420, 1, 0, 0, 0, 2419, 2363, 1, 0, 0, 0, 2419, 2370, 1, 0, 0, 0,
		2419, 2382, 1, 0, 0, 0, 2419, 2394, 1, 0, 0, 0, 2419, 2405, 1, 0, 0, 0,
		2420, 395, 1, 0, 0, 0, 2421, 2426, 3, 412, 206, 0, 2422, 2423, 5, 64, 0,
		0, 2423, 2425, 3, 412, 206, 0, 2424, 2422, 1, 0, 0, 0, 2425, 2428, 1, 0,
		0, 0, 2426, 2424, 1, 0, 0, 0, 2426, 2427, 1, 0, 0, 0, 2427, 397, 1, 0,
		0, 0, 2428, 2426, 1, 0, 0, 0, 2429, 2430, 3, 56, 28, 0, 2430, 2432, 5,
		90, 0, 0, 2431, 2433, 3, 40, 20, 0, 2432, 2431, 1, 0, 0, 0, 2432, 2433,
		1, 0, 0, 0, 2433, 2434, 1, 0, 0, 0, 2434, 2435, 5, 102, 0, 0, 2435, 2477,
		1, 0, 0, 0, 2436, 2437, 3, 10, 5, 0, 2437, 2439, 5, 90, 0, 0, 2438, 2440,
		3, 40, 20, 0, 2439, 2438, 1, 0, 0, 0, 2439, 2440, 1, 0, 0, 0, 2440, 2441,
		1, 0, 0, 0, 2441, 2442, 5, 102, 0, 0, 2442, 2477, 1, 0, 0, 0, 2443, 2444,
		3, 350, 175, 0, 2444, 2446, 5, 90, 0, 0, 2445, 2447, 3, 40, 20, 0, 2446,
		2445, 1, 0, 0, 0, 2446, 2447, 1, 0, 0, 0, 2447, 2448, 1, 0, 0, 0, 2448,
		2449, 5, 102, 0, 0, 2449, 2477, 1, 0, 0, 0, 2450, 2451, 5, 40, 0, 0, 2451,
		2453, 5, 90, 0, 0, 2452, 2454, 3, 40, 20, 0, 2453, 2452, 1, 0, 0, 0, 2453,
		2454, 1, 0, 0, 0, 2454, 2455, 1, 0, 0, 0, 2455, 2477, 5, 102, 0, 0, 2456,
		2457, 3, 52, 26, 0, 2457, 2458, 5, 65, 0, 0, 2458, 2459, 5, 40, 0, 0, 2459,
		2461, 5, 90, 0, 0, 2460, 2462, 3, 40, 20, 0, 2461, 2460, 1, 0, 0, 0, 2461,
		2462, 1, 0, 0, 0, 2462, 2463, 1, 0, 0, 0, 2463, 2464, 5, 102, 0, 0, 2464,
		2477, 1, 0, 0, 0, 2465, 2466, 3, 14, 7, 0, 2466, 2468, 5, 90, 0, 0, 2467,
		2469, 3, 40, 20, 0, 2468, 2467, 1, 0, 0, 0, 2468, 2469, 1, 0, 0, 0, 2469,
		2470, 1, 0, 0, 0, 2470, 2471, 5, 31, 0, 0, 2471, 2477, 1, 0, 0, 0, 2472,
		2473, 3, 28, 14, 0, 2473, 2474, 5, 90, 0, 0, 2474, 2475, 5, 31, 0, 0, 2475,
		2477, 1, 0, 0, 0, 2476, 2429, 1, 0, 0, 0, 2476, 2436, 1, 0, 0, 0, 2476,
		2443, 1, 0, 0, 0, 2476, 2450, 1, 0, 0, 0, 2476, 2456, 1, 0, 0, 0, 2476,
		2465, 1, 0, 0, 0, 2476, 2472, 1, 0, 0, 0, 2477, 399, 1, 0, 0, 0, 2478,
		2480, 5, 90, 0, 0, 2479, 2481, 3, 40, 20, 0, 2480, 2479, 1, 0, 0, 0, 2480,
		2481, 1, 0, 0, 0, 2481, 2482, 1, 0, 0, 0, 2482, 2483, 5, 102, 0, 0, 2483,
		401, 1, 0, 0, 0, 2484, 2485, 3, 56, 28, 0, 2485, 2487, 5, 90, 0, 0, 2486,
		2488, 3, 40, 20, 0, 2487, 2486, 1, 0, 0, 0, 2487, 2488, 1, 0, 0, 0, 2488,
		2489, 1, 0, 0, 0, 2489, 2490, 5, 102, 0, 0, 2490, 2525, 1, 0, 0, 0, 2491,
		2492, 3, 10, 5, 0, 2492, 2494, 5, 90, 0, 0, 2493, 2495, 3, 40, 20, 0, 2494,
		2493, 1, 0, 0, 0, 2494, 2495, 1, 0, 0, 0, 2495, 2496, 1, 0, 0, 0, 2496,
		2497, 5, 102, 0, 0, 2497, 2525, 1, 0, 0, 0, 2498, 2499, 5, 40, 0, 0, 2499,
		2501, 5, 90, 0, 0, 2500, 2502, 3, 40, 20, 0, 2501, 2500, 1, 0, 0, 0, 2501,
		2502, 1, 0, 0, 0, 2502, 2503, 1, 0, 0, 0, 2503, 2525, 5, 102, 0, 0, 2504,
		2505, 3, 52, 26, 0, 2505, 2506, 5, 65, 0, 0, 2506, 2507, 5, 40, 0, 0, 2507,
		2509, 5, 90, 0, 0, 2508, 2510, 3, 40, 20, 0, 2509, 2508, 1, 0, 0, 0, 2509,
		2510, 1, 0, 0, 0, 2510, 2511, 1, 0, 0, 0, 2511, 2512, 5, 102, 0, 0, 2512,
		2525, 1, 0, 0, 0, 2513, 2514, 3, 14, 7, 0, 2514, 2516, 5, 90, 0, 0, 2515,
		2517, 3, 40, 20, 0, 2516, 2515, 1, 0, 0, 0, 2516, 2517, 1, 0, 0, 0, 2517,
		2518, 1, 0, 0, 0, 2518, 2519, 5, 31, 0, 0, 2519, 2525, 1, 0, 0, 0, 2520,
		2521, 3, 28, 14, 0, 2521, 2522, 5, 90, 0, 0, 2522, 2523, 5, 31, 0, 0, 2523,
		2525, 1, 0, 0, 0, 2524, 2484, 1, 0, 0, 0, 2524, 2491, 1, 0, 0, 0, 2524,
		2498, 1, 0, 0, 0, 2524, 2504, 1, 0, 0, 0, 2524, 2513, 1, 0, 0, 0, 2524,
		2520, 1, 0, 0, 0, 2525, 403, 1, 0, 0, 0, 2526, 2527, 5, 31, 0, 0, 2527,
		2528, 3, 2, 1, 0, 2528, 2530, 3, 406, 203, 0, 2529, 2531, 3, 30, 15, 0,
		2530, 2529, 1, 0, 0, 0, 2530, 2531, 1, 0, 0, 0, 2531, 2549, 1, 0, 0, 0,
		2532, 2533, 5, 31, 0, 0, 2533, 2534, 3, 12, 6, 0, 2534, 2536, 3, 406, 203,
		0, 2535, 2537, 3, 30, 15, 0, 2536, 2535, 1, 0, 0, 0, 2536, 2537, 1, 0,
		0, 0, 2537, 2549, 1, 0, 0, 0, 2538, 2539, 5, 31, 0, 0, 2539, 2540, 3, 2,
		1, 0, 2540, 2541, 3, 30, 15, 0, 2541, 2542, 3, 246, 123, 0, 2542, 2549,
		1, 0, 0, 0, 2543, 2544, 5, 31, 0, 0, 2544, 2545, 3, 12, 6, 0, 2545, 2546,
		3, 30, 15, 0, 2546, 2547, 3, 246, 123, 0, 2547, 2549, 1, 0, 0, 0, 2548,
		2526, 1, 0, 0, 0, 2548, 2532, 1, 0, 0, 0, 2548, 2538, 1, 0, 0, 0, 2548,
		2543, 1, 0, 0, 0, 2549, 405, 1, 0, 0, 0, 2550, 2554, 3, 408, 204, 0, 2551,
		2553, 3, 408, 204, 0, 2552, 2551, 1, 0, 0, 0, 2553, 2556, 1, 0, 0, 0, 2554,
		2552, 1, 0, 0, 0, 2554, 2555, 1, 0, 0, 0, 2555, 407, 1, 0, 0, 0, 2556,
		2554, 1, 0, 0, 0, 2557, 2559, 3, 228, 114, 0, 2558, 2557, 1, 0, 0, 0, 2559,
		2562, 1, 0, 0, 0, 2560, 2558, 1, 0, 0, 0, 2560, 2561, 1, 0, 0, 0, 2561,
		2563, 1, 0, 0, 0, 2562, 2560, 1, 0, 0, 0, 2563, 2564, 5, 61, 0, 0, 2564,
		2565, 3, 412, 206, 0, 2565, 2566, 5, 62, 0, 0, 2566, 409, 1, 0, 0, 0, 2567,
		2568, 3, 412, 206, 0, 2568, 411, 1, 0, 0, 0, 2569, 2572, 3, 414, 207, 0,
		2570, 2572, 3, 422, 211, 0, 2571, 2569, 1, 0, 0, 0, 2571, 2570, 1, 0, 0,
		0, 2572, 413, 1, 0, 0, 0, 2573, 2574, 3, 416, 208, 0, 2574, 2575, 5, 89,
		0, 0, 2575, 2576, 3, 420, 210, 0, 2576, 415, 1, 0, 0, 0, 2577, 2588, 5,
		102, 0, 0, 2578, 2580, 5, 57, 0, 0, 2579, 2581, 3, 148, 74, 0, 2580, 2579,
		1, 0, 0, 0, 2580, 2581, 1, 0, 0, 0, 2581, 2582, 1, 0, 0, 0, 2582, 2588,
		5, 58, 0, 0, 2583, 2584, 5, 57, 0, 0, 2584, 2585, 3, 418, 209, 0, 2585,
		2586, 5, 58, 0, 0, 2586, 2588, 1, 0, 0, 0, 2587, 2577, 1, 0, 0, 0, 2587,
		2578, 1, 0, 0, 0, 2587, 2583, 1, 0, 0, 0, 2588, 417, 1, 0, 0, 0, 2589,
		2594, 5, 102, 0, 0, 2590, 2591, 5, 64, 0, 0, 2591, 2593, 5, 102, 0, 0,
		2592, 2590, 1, 0, 0, 0, 2593, 2596, 1, 0, 0, 0, 2594, 2592, 1, 0, 0, 0,
		2594, 2595, 1, 0, 0, 0, 2595, 419, 1, 0, 0, 0, 2596, 2594, 1, 0, 0, 0,
		2597, 2600, 3, 412, 206, 0, 2598, 2600, 3, 250, 125, 0, 2599, 2597, 1,
		0, 0, 0, 2599, 2598, 1, 0, 0, 0, 2600, 421, 1, 0, 0, 0, 2601, 2604, 3,
		430, 215, 0, 2602, 2604, 3, 424, 212, 0, 2603, 2601, 1, 0, 0, 0, 2603,
		2602, 1, 0, 0, 0, 2604, 423, 1, 0, 0, 0, 2605, 2606, 3, 426, 213, 0, 2606,
		2607, 3, 428, 214, 0, 2607, 2608, 3, 412, 206, 0, 2608, 425, 1, 0, 0, 0,
		2609, 2613, 3, 56, 28, 0, 2610, 2613, 3, 378, 189, 0, 2611, 2613, 3, 384,
		192, 0, 2612, 2609, 1, 0, 0, 0, 2612, 2610, 1, 0, 0, 0, 2612, 2611, 1,
		0, 0, 0, 2613, 427, 1, 0, 0, 0, 2614, 2615, 7, 3, 0, 0, 2615, 429, 1, 0,
		0, 0, 2616, 2624, 3, 432, 216, 0, 2617, 2618, 3, 432, 216, 0, 2618, 2619,
		5, 71, 0, 0, 2619, 2620, 3, 412, 206, 0, 2620, 2621, 5, 72, 0, 0, 2621,
		2622, 3, 430, 215, 0, 2622, 2624, 1, 0, 0, 0, 2623, 2616, 1, 0, 0, 0, 2623,
		2617, 1, 0, 0, 0, 2624, 431, 1, 0, 0, 0, 2625, 2626, 6, 216, -1, 0, 2626,
		2627, 3, 434, 217, 0, 2627, 2633, 1, 0, 0, 0, 2628, 2629, 10, 1, 0, 0,
		2629, 2630, 5, 78, 0, 0, 2630, 2632, 3, 434, 217, 0, 2631, 2628, 1, 0,
		0, 0, 2632, 2635, 1, 0, 0, 0, 2633, 2631, 1, 0, 0, 0, 2633, 2634, 1, 0,
		0, 0, 2634, 433, 1, 0, 0, 0, 2635, 2633, 1, 0, 0, 0, 2636, 2637, 6, 217,
		-1, 0, 2637, 2638, 3, 436, 218, 0, 2638, 2644, 1, 0, 0, 0, 2639, 2640,
		10, 1, 0, 0, 2640, 2641, 5, 77, 0, 0, 2641, 2643, 3, 436, 218, 0, 2642,
		2639, 1, 0, 0, 0, 2643, 2646, 1, 0, 0, 0, 2644, 2642, 1, 0, 0, 0, 2644,
		2645, 1, 0, 0, 0, 2645, 435, 1, 0, 0, 0, 2646, 2644, 1, 0, 0, 0, 2647,
		2648, 6, 218, -1, 0, 2648, 2649, 3, 438, 219, 0, 2649, 2655, 1, 0, 0, 0,
		2650, 2651, 10, 1, 0, 0, 2651, 2652, 5, 86, 0, 0, 2652, 2654, 3, 438, 219,
		0, 2653, 2650, 1, 0, 0, 0, 2654, 2657, 1, 0, 0, 0, 2655, 2653, 1, 0, 0,
		0, 2655, 2656, 1, 0, 0, 0, 2656, 437, 1, 0, 0, 0, 2657, 2655, 1, 0, 0,
		0, 2658, 2659, 6, 219, -1, 0, 2659, 2660, 3, 440, 220, 0, 2660, 2666, 1,
		0, 0, 0, 2661, 2662, 10, 1, 0, 0, 2662, 2663, 5, 87, 0, 0, 2663, 2665,
		3, 440, 220, 0, 2664, 2661, 1, 0, 0, 0, 2665, 2668, 1, 0, 0, 0, 2666, 2664,
		1, 0, 0, 0, 2666, 2667, 1, 0, 0, 0, 2667, 439, 1, 0, 0, 0, 2668, 2666,
		1, 0, 0, 0, 2669, 2670, 6, 220, -1, 0, 2670, 2671, 3, 442, 221, 0, 2671,
		2677, 1, 0, 0, 0, 2672, 2673, 10, 1, 0, 0, 2673, 2674, 5, 85, 0, 0, 2674,
		2676, 3, 442, 221, 0, 2675, 2672, 1, 0, 0, 0, 2676, 2679, 1, 0, 0, 0, 2677,
		2675, 1, 0, 0, 0, 2677, 2678, 1, 0, 0, 0, 2678, 441, 1, 0, 0, 0, 2679,
		2677, 1, 0, 0, 0, 2680, 2681, 6, 221, -1, 0, 2681, 2682, 3, 444, 222, 0,
		2682, 2691, 1, 0, 0, 0, 2683, 2684, 10, 2, 0, 0, 2684, 2685, 5, 73, 0,
		0, 2685, 2690, 3, 444, 222, 0, 2686, 2687, 10, 1, 0, 0, 2687, 2688, 5,
		76, 0, 0, 2688, 2690, 3, 444, 222, 0, 2689, 2683, 1, 0, 0, 0, 2689, 2686,
		1, 0, 0, 0, 2690, 2693, 1, 0, 0, 0, 2691, 2689, 1, 0, 0, 0, 2691, 2692,
		1, 0, 0, 0, 2692, 443, 1, 0, 0, 0, 2693, 2691, 1, 0, 0, 0, 2694, 2695,
		6, 222, -1, 0, 2695, 2696, 3, 446, 223, 0, 2696, 2714, 1, 0, 0, 0, 2697,
		2698, 10, 5, 0, 0, 2698, 2699, 5, 68, 0, 0, 2699, 2713, 3, 446, 223, 0,
		2700, 2701, 10, 4, 0, 0, 2701, 2702, 5, 67, 0, 0, 2702, 2713, 3, 446, 223,
		0, 2703, 2704, 10, 3, 0, 0, 2704, 2705, 5, 74, 0, 0, 2705, 2713, 3, 446,
		223, 0, 2706, 2707, 10, 2, 0, 0, 2707, 2708, 5, 75, 0, 0, 2708, 2713, 3,
		446, 223, 0, 2709, 2710, 10, 1, 0, 0, 2710, 2711, 5, 26, 0, 0, 2711, 2713,
		3, 10, 5, 0, 2712, 2697, 1, 0, 0, 0, 2712, 2700, 1, 0, 0, 0, 2712, 2703,
		1, 0, 0, 0, 2712, 2706, 1, 0, 0, 0, 2712, 2709, 1, 0, 0, 0, 2713, 2716,
		1, 0, 0, 0, 2714, 2712, 1, 0, 0, 0, 2714, 2715, 1, 0, 0, 0, 2715, 445,
		1, 0, 0, 0, 2716, 2714, 1, 0, 0, 0, 2717, 2718, 6, 223, -1, 0, 2718, 2719,
		3, 448, 224, 0, 2719, 2735, 1, 0, 0, 0, 2720, 2721, 10, 3, 0, 0, 2721,
		2722, 5, 68, 0, 0, 2722, 2723, 5, 68, 0, 0, 2723, 2734, 3, 448, 224, 0,
		2724, 2725, 10, 2, 0, 0, 2725, 2726, 5, 67, 0, 0, 2726, 2727, 5, 67, 0,
		0, 2727, 2734, 3, 448, 224, 0, 2728, 2729, 10, 1, 0, 0, 2729, 2730, 5,
		67, 0, 0, 2730, 2731, 5, 67, 0, 0, 2731, 2732, 5, 67, 0, 0, 2732, 2734,
		3, 448, 224, 0, 2733, 2720, 1, 0, 0, 0, 2733, 2724, 1, 0, 0, 0, 2733, 2728,
		1, 0, 0, 0, 2734, 2737, 1, 0, 0, 0, 2735, 2733, 1, 0, 0, 0, 2735, 2736,
		1, 0, 0, 0, 2736, 447, 1, 0, 0, 0, 2737, 2735, 1, 0, 0, 0, 2738, 2739,
		6, 224, -1, 0, 2739, 2740, 3, 450, 225, 0, 2740, 2749, 1, 0, 0, 0, 2741,
		2742, 10, 2, 0, 0, 2742, 2743, 5, 81, 0, 0, 2743, 2748, 3, 450, 225, 0,
		2744, 2745, 10, 1, 0, 0, 2745, 2746, 5, 82, 0, 0, 2746, 2748, 3, 450, 225,
		0, 2747, 2741, 1, 0, 0, 0, 2747, 2744, 1, 0, 0, 0, 2748, 2751, 1, 0, 0,
		0, 2749, 2747, 1, 0, 0, 0, 2749, 2750, 1, 0, 0, 0, 2750, 449, 1, 0, 0,
		0, 2751, 2749, 1, 0, 0, 0, 2752, 2753, 6, 225, -1, 0, 2753, 2754, 3, 452,
		226, 0, 2754, 2766, 1, 0, 0, 0, 2755, 2756, 10, 3, 0, 0, 2756, 2757, 5,
		83, 0, 0, 2757, 2765, 3, 452, 226, 0, 2758, 2759, 10, 2, 0, 0, 2759, 2760,
		5, 84, 0, 0, 2760, 2765, 3, 452, 226, 0, 2761, 2762, 10, 1, 0, 0, 2762,
		2763, 5, 88, 0, 0, 2763, 2765, 3, 452, 226, 0, 2764, 2755, 1, 0, 0, 0,
		2764, 2758, 1, 0, 0, 0, 2764, 2761, 1, 0, 0, 0, 2765, 2768, 1, 0, 0, 0,
		2766, 2764, 1, 0, 0, 0, 2766, 2767, 1, 0, 0, 0, 2767, 451, 1, 0, 0, 0,
		2768, 2766, 1, 0, 0, 0, 2769, 2777, 3, 454, 227, 0, 2770, 2777, 3, 456,
		228, 0, 2771, 2772, 5, 81, 0, 0, 2772, 2777, 3, 452, 226, 0, 2773, 2774,
		5, 82, 0, 0, 2774, 2777, 3, 452, 226, 0, 2775, 2777, 3, 458, 229, 0, 2776,
		2769, 1, 0, 0, 0, 2776, 2770, 1, 0, 0, 0, 2776, 2771, 1, 0, 0, 0, 2776,
		2773, 1, 0, 0, 0, 2776, 2775, 1, 0, 0, 0, 2777, 453, 1, 0, 0, 0, 2778,
		2779, 5, 79, 0, 0, 2779, 2780, 3, 452, 226, 0, 2780, 455, 1, 0, 0, 0, 2781,
		2782, 5, 80, 0, 0, 2782, 2783, 3, 452, 226, 0, 2783, 457, 1, 0, 0, 0, 2784,
		2791, 3, 460, 230, 0, 2785, 2786, 5, 70, 0, 0, 2786, 2791, 3, 452, 226,
		0, 2787, 2788, 5, 69, 0, 0, 2788, 2791, 3, 452, 226, 0, 2789, 2791, 3,
		470, 235, 0, 2790, 2784, 1, 0, 0, 0, 2790, 2785, 1, 0, 0, 0, 2790, 2787,
		1, 0, 0, 0, 2790, 2789, 1, 0, 0, 0, 2791, 459, 1, 0, 0, 0, 2792, 2795,
		3, 350, 175, 0, 2793, 2795, 3, 56, 28, 0, 2794, 2792, 1, 0, 0, 0, 2794,
		2793, 1, 0, 0, 0, 2795, 2800, 1, 0, 0, 0, 2796, 2799, 3, 464, 232, 0, 2797,
		2799, 3, 468, 234, 0, 2798, 2796, 1, 0, 0, 0, 2798, 2797, 1, 0, 0, 0, 2799,
		2802, 1, 0, 0, 0, 2800, 2798, 1, 0, 0, 0, 2800, 2801, 1, 0, 0, 0, 2801,
		461, 1, 0, 0, 0, 2802, 2800, 1, 0, 0, 0, 2803, 2804, 3, 460, 230, 0, 2804,
		2805, 5, 79, 0, 0, 2805, 463, 1, 0, 0, 0, 2806, 2807, 5, 79, 0, 0, 2807,
		465, 1, 0, 0, 0, 2808, 2809, 3, 460, 230, 0, 2809, 2810, 5, 80, 0, 0, 2810,
		467, 1, 0, 0, 0, 2811, 2812, 5, 80, 0, 0, 2812, 469, 1, 0, 0, 0, 2813,
		2814, 5, 57, 0, 0, 2814, 2815, 3, 2, 1, 0, 2815, 2816, 5, 58, 0, 0, 2816,
		2817, 3, 452, 226, 0, 2817, 2841, 1, 0, 0, 0, 2818, 2819, 5, 57, 0, 0,
		2819, 2823, 3, 10, 5, 0, 2820, 2822, 3, 38, 19, 0, 2821, 2820, 1, 0, 0,
		0, 2822, 2825, 1, 0, 0, 0, 2823, 2821, 1, 0, 0, 0, 2823, 2824, 1, 0, 0,
		0, 2824, 2826, 1, 0, 0, 0, 2825, 2823, 1, 0, 0, 0, 2826, 2827, 5, 58, 0,
		0, 2827, 2828, 3, 458, 229, 0, 2828, 2841, 1, 0, 0, 0, 2829, 2830, 5, 57,
		0, 0, 2830, 2834, 3, 10, 5, 0, 2831, 2833, 3, 38, 19, 0, 2832, 2831, 1,
		0, 0, 0, 2833, 2836, 1, 0, 0, 0, 2834, 2832, 1, 0, 0, 0, 2834, 2835, 1,
		0, 0, 0, 2835, 2837, 1, 0, 0, 0, 2836, 2834, 1, 0, 0, 0, 2837, 2838, 5,
		58, 0, 0, 2838, 2839, 3, 414, 207, 0, 2839, 2841, 1, 0, 0, 0, 2840, 2813,
		1, 0, 0, 0, 2840, 2818, 1, 0, 0, 0, 2840, 2829, 1, 0, 0, 0, 2841, 471,
		1, 0, 0, 0, 322, 477, 484, 488, 492, 501, 505, 509, 511, 517, 522, 529,
		534, 536, 542, 547, 552, 557, 568, 582, 587, 595, 602, 608, 613, 624, 627,
		641, 646, 651, 656, 662, 672, 680, 690, 698, 710, 714, 719, 725, 733, 746,
		775, 779, 784, 790, 793, 796, 808, 819, 833, 840, 849, 856, 861, 876, 883,
		889, 893, 897, 901, 905, 910, 914, 918, 920, 925, 932, 937, 939, 945, 950,
		954, 973, 978, 994, 999, 1005, 1011, 1013, 1017, 1022, 1026, 1034, 1041,
		1049, 1052, 1057, 1065, 1070, 1077, 1084, 1089, 1095, 1107, 1112, 1116,
		1126, 1131, 1139, 1142, 1147, 1155, 1158, 1163, 1168, 1173, 1178, 1185,
		1190, 1198, 1203, 1208, 1213, 1219, 1225, 1228, 1231, 1240, 1246, 1252,
		1255, 1258, 1266, 1271, 1276, 1282, 1285, 1296, 1305, 1315, 1320, 1331,
		1336, 1348, 1353, 1365, 1375, 1380, 1388, 1391, 1398, 1406, 1412, 1421,
		1431, 1435, 1438, 1447, 1461, 1464, 1473, 1478, 1485, 1490, 1498, 1510,
		1517, 1531, 1553, 1587, 1599, 1605, 1617, 1630, 1656, 1660, 1665, 1669,
		1673, 1681, 1685, 1689, 1696, 1705, 1713, 1728, 1740, 1746, 1752, 1773,
		1778, 1784, 1796, 1807, 1817, 1820, 1825, 1834, 1840, 1850, 1855, 1864,
		1887, 1897, 1919, 1926, 1934, 1942, 1953, 1976, 1986, 1997, 2019, 2023,
		2028, 2036, 2042, 2046, 2050, 2054, 2060, 2065, 2070, 2074, 2078, 2084,
		2089, 2094, 2098, 2102, 2104, 2109, 2114, 2119, 2123, 2127, 2131, 2136,
		2144, 2150, 2154, 2158, 2162, 2168, 2173, 2178, 2182, 2186, 2188, 2193,
		2208, 2222, 2234, 2243, 2257, 2270, 2279, 2285, 2292, 2297, 2304, 2309,
		2316, 2321, 2328, 2333, 2341, 2346, 2350, 2354, 2359, 2366, 2373, 2378,
		2385, 2390, 2397, 2402, 2410, 2415, 2419, 2426, 2432, 2439, 2446, 2453,
		2461, 2468, 2476, 2480, 2487, 2494, 2501, 2509, 2516, 2524, 2530, 2536,
		2548, 2554, 2560, 2571, 2580, 2587, 2594, 2599, 2603, 2612, 2623, 2633,
		2644, 2655, 2666, 2677, 2689, 2691, 2712, 2714, 2733, 2735, 2747, 2749,
		2764, 2766, 2776, 2790, 2794, 2798, 2800, 2823, 2834, 2840,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// Java8ParserInit initializes any static state used to implement Java8Parser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewJava8Parser(). You can call this function if you wish to initialize the static state ahead
// of time.
func Java8ParserInit() {
	staticData := &Java8ParserParserStaticData
	staticData.once.Do(java8parserParserInit)
}

// NewJava8Parser produces a new parser instance for the optional input antlr.TokenStream.
func NewJava8Parser(input antlr.TokenStream) *Java8Parser {
	Java8ParserInit()
	this := new(Java8Parser)
	this.BaseParser = antlr.NewBaseParser(input)
	staticData := &Java8ParserParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	this.RuleNames = staticData.RuleNames
	this.LiteralNames = staticData.LiteralNames
	this.SymbolicNames = staticData.SymbolicNames
	this.GrammarFileName = "Java8Parser.g4"

	return this
}

// Java8Parser tokens.
const (
	Java8ParserEOF                  = antlr.TokenEOF
	Java8ParserABSTRACT             = 1
	Java8ParserASSERT               = 2
	Java8ParserBOOLEAN              = 3
	Java8ParserBREAK                = 4
	Java8ParserBYTE                 = 5
	Java8ParserCASE                 = 6
	Java8ParserCATCH                = 7
	Java8ParserCHAR                 = 8
	Java8ParserCLASS                = 9
	Java8ParserCONST                = 10
	Java8ParserCONTINUE             = 11
	Java8ParserDEFAULT              = 12
	Java8ParserDO                   = 13
	Java8ParserDOUBLE               = 14
	Java8ParserELSE                 = 15
	Java8ParserENUM                 = 16
	Java8ParserEXTENDS              = 17
	Java8ParserFINAL                = 18
	Java8ParserFINALLY              = 19
	Java8ParserFLOAT                = 20
	Java8ParserFOR                  = 21
	Java8ParserIF                   = 22
	Java8ParserGOTO                 = 23
	Java8ParserIMPLEMENTS           = 24
	Java8ParserIMPORT               = 25
	Java8ParserINSTANCEOF           = 26
	Java8ParserINT                  = 27
	Java8ParserINTERFACE            = 28
	Java8ParserLONG                 = 29
	Java8ParserNATIVE               = 30
	Java8ParserNEW                  = 31
	Java8ParserPACKAGE              = 32
	Java8ParserPRIVATE              = 33
	Java8ParserPROTECTED            = 34
	Java8ParserPUBLIC               = 35
	Java8ParserRETURN               = 36
	Java8ParserSHORT                = 37
	Java8ParserSTATIC               = 38
	Java8ParserSTRICTFP             = 39
	Java8ParserSUPER                = 40
	Java8ParserSWITCH               = 41
	Java8ParserSYNCHRONIZED         = 42
	Java8ParserTHIS                 = 43
	Java8ParserTHROW                = 44
	Java8ParserTHROWS               = 45
	Java8ParserTRANSIENT            = 46
	Java8ParserTRY                  = 47
	Java8ParserVOID                 = 48
	Java8ParserVOLATILE             = 49
	Java8ParserWHILE                = 50
	Java8ParserIntegerLiteral       = 51
	Java8ParserFloatingPointLiteral = 52
	Java8ParserBooleanLiteral       = 53
	Java8ParserCharacterLiteral     = 54
	Java8ParserStringLiteral        = 55
	Java8ParserNullLiteral          = 56
	Java8ParserLPAREN               = 57
	Java8ParserRPAREN               = 58
	Java8ParserLBRACE               = 59
	Java8ParserRBRACE               = 60
	Java8ParserLBRACK               = 61
	Java8ParserRBRACK               = 62
	Java8ParserSEMI                 = 63
	Java8ParserCOMMA                = 64
	Java8ParserDOT                  = 65
	Java8ParserASSIGN               = 66
	Java8ParserGT                   = 67
	Java8ParserLT                   = 68
	Java8ParserBANG                 = 69
	Java8ParserTILDE                = 70
	Java8ParserQUESTION             = 71
	Java8ParserCOLON                = 72
	Java8ParserEQUAL                = 73
	Java8ParserLE                   = 74
	Java8ParserGE                   = 75
	Java8ParserNOTEQUAL             = 76
	Java8ParserAND                  = 77
	Java8ParserOR                   = 78
	Java8ParserINC                  = 79
	Java8ParserDEC                  = 80
	Java8ParserADD                  = 81
	Java8ParserSUB                  = 82
	Java8ParserMUL                  = 83
	Java8ParserDIV                  = 84
	Java8ParserBITAND               = 85
	Java8ParserBITOR                = 86
	Java8ParserCARET                = 87
	Java8ParserMOD                  = 88
	Java8ParserARROW                = 89
	Java8ParserCOLONCOLON           = 90
	Java8ParserADD_ASSIGN           = 91
	Java8ParserSUB_ASSIGN           = 92
	Java8ParserMUL_ASSIGN           = 93
	Java8ParserDIV_ASSIGN           = 94
	Java8ParserAND_ASSIGN           = 95
	Java8ParserOR_ASSIGN            = 96
	Java8ParserXOR_ASSIGN           = 97
	Java8ParserMOD_ASSIGN           = 98
	Java8ParserLSHIFT_ASSIGN        = 99
	Java8ParserRSHIFT_ASSIGN        = 100
	Java8ParserURSHIFT_ASSIGN       = 101
	Java8ParserIdentifier           = 102
	Java8ParserAT                   = 103
	Java8ParserELLIPSIS             = 104
	Java8ParserWS                   = 105
	Java8ParserCOMMENT              = 106
	Java8ParserLINE_COMMENT         = 107
)

// Java8Parser rules.
const (
	Java8ParserRULE_literal                                                      = 0
	Java8ParserRULE_primitiveType                                                = 1
	Java8ParserRULE_numericType                                                  = 2
	Java8ParserRULE_integralType                                                 = 3
	Java8ParserRULE_floatingPointType                                            = 4
	Java8ParserRULE_referenceType                                                = 5
	Java8ParserRULE_classOrInterfaceType                                         = 6
	Java8ParserRULE_classType                                                    = 7
	Java8ParserRULE_classType_lf_classOrInterfaceType                            = 8
	Java8ParserRULE_classType_lfno_classOrInterfaceType                          = 9
	Java8ParserRULE_interfaceType                                                = 10
	Java8ParserRULE_interfaceType_lf_classOrInterfaceType                        = 11
	Java8ParserRULE_interfaceType_lfno_classOrInterfaceType                      = 12
	Java8ParserRULE_typeVariable                                                 = 13
	Java8ParserRULE_arrayType                                                    = 14
	Java8ParserRULE_dims                                                         = 15
	Java8ParserRULE_typeParameter                                                = 16
	Java8ParserRULE_typeParameterModifier                                        = 17
	Java8ParserRULE_typeBound                                                    = 18
	Java8ParserRULE_additionalBound                                              = 19
	Java8ParserRULE_typeArguments                                                = 20
	Java8ParserRULE_typeArgumentList                                             = 21
	Java8ParserRULE_typeArgument                                                 = 22
	Java8ParserRULE_wildcard                                                     = 23
	Java8ParserRULE_wildcardBounds                                               = 24
	Java8ParserRULE_packageName                                                  = 25
	Java8ParserRULE_typeName                                                     = 26
	Java8ParserRULE_packageOrTypeName                                            = 27
	Java8ParserRULE_expressionName                                               = 28
	Java8ParserRULE_methodName                                                   = 29
	Java8ParserRULE_ambiguousName                                                = 30
	Java8ParserRULE_compilationUnit                                              = 31
	Java8ParserRULE_packageDeclaration                                           = 32
	Java8ParserRULE_packageModifier                                              = 33
	Java8ParserRULE_importDeclaration                                            = 34
	Java8ParserRULE_singleTypeImportDeclaration                                  = 35
	Java8ParserRULE_typeImportOnDemandDeclaration                                = 36
	Java8ParserRULE_singleStaticImportDeclaration                                = 37
	Java8ParserRULE_staticImportOnDemandDeclaration                              = 38
	Java8ParserRULE_typeDeclaration                                              = 39
	Java8ParserRULE_classDeclaration                                             = 40
	Java8ParserRULE_normalClassDeclaration                                       = 41
	Java8ParserRULE_classModifier                                                = 42
	Java8ParserRULE_typeParameters                                               = 43
	Java8ParserRULE_typeParameterList                                            = 44
	Java8ParserRULE_superclass                                                   = 45
	Java8ParserRULE_superinterfaces                                              = 46
	Java8ParserRULE_interfaceTypeList                                            = 47
	Java8ParserRULE_classBody                                                    = 48
	Java8ParserRULE_classBodyDeclaration                                         = 49
	Java8ParserRULE_classMemberDeclaration                                       = 50
	Java8ParserRULE_fieldDeclaration                                             = 51
	Java8ParserRULE_fieldModifier                                                = 52
	Java8ParserRULE_variableDeclaratorList                                       = 53
	Java8ParserRULE_variableDeclarator                                           = 54
	Java8ParserRULE_variableDeclaratorId                                         = 55
	Java8ParserRULE_variableInitializer                                          = 56
	Java8ParserRULE_unannType                                                    = 57
	Java8ParserRULE_unannPrimitiveType                                           = 58
	Java8ParserRULE_unannReferenceType                                           = 59
	Java8ParserRULE_unannClassOrInterfaceType                                    = 60
	Java8ParserRULE_unannClassType                                               = 61
	Java8ParserRULE_unannClassType_lf_unannClassOrInterfaceType                  = 62
	Java8ParserRULE_unannClassType_lfno_unannClassOrInterfaceType                = 63
	Java8ParserRULE_unannInterfaceType                                           = 64
	Java8ParserRULE_unannInterfaceType_lf_unannClassOrInterfaceType              = 65
	Java8ParserRULE_unannInterfaceType_lfno_unannClassOrInterfaceType            = 66
	Java8ParserRULE_unannTypeVariable                                            = 67
	Java8ParserRULE_unannArrayType                                               = 68
	Java8ParserRULE_methodDeclaration                                            = 69
	Java8ParserRULE_methodModifier                                               = 70
	Java8ParserRULE_methodHeader                                                 = 71
	Java8ParserRULE_result                                                       = 72
	Java8ParserRULE_methodDeclarator                                             = 73
	Java8ParserRULE_formalParameterList                                          = 74
	Java8ParserRULE_formalParameters                                             = 75
	Java8ParserRULE_formalParameter                                              = 76
	Java8ParserRULE_variableModifier                                             = 77
	Java8ParserRULE_lastFormalParameter                                          = 78
	Java8ParserRULE_receiverParameter                                            = 79
	Java8ParserRULE_throws_                                                      = 80
	Java8ParserRULE_exceptionTypeList                                            = 81
	Java8ParserRULE_exceptionType                                                = 82
	Java8ParserRULE_methodBody                                                   = 83
	Java8ParserRULE_instanceInitializer                                          = 84
	Java8ParserRULE_staticInitializer                                            = 85
	Java8ParserRULE_constructorDeclaration                                       = 86
	Java8ParserRULE_constructorModifier                                          = 87
	Java8ParserRULE_constructorDeclarator                                        = 88
	Java8ParserRULE_simpleTypeName                                               = 89
	Java8ParserRULE_constructorBody                                              = 90
	Java8ParserRULE_explicitConstructorInvocation                                = 91
	Java8ParserRULE_enumDeclaration                                              = 92
	Java8ParserRULE_enumBody                                                     = 93
	Java8ParserRULE_enumConstantList                                             = 94
	Java8ParserRULE_enumConstant                                                 = 95
	Java8ParserRULE_enumConstantModifier                                         = 96
	Java8ParserRULE_enumBodyDeclarations                                         = 97
	Java8ParserRULE_interfaceDeclaration                                         = 98
	Java8ParserRULE_normalInterfaceDeclaration                                   = 99
	Java8ParserRULE_interfaceModifier                                            = 100
	Java8ParserRULE_extendsInterfaces                                            = 101
	Java8ParserRULE_interfaceBody                                                = 102
	Java8ParserRULE_interfaceMemberDeclaration                                   = 103
	Java8ParserRULE_constantDeclaration                                          = 104
	Java8ParserRULE_constantModifier                                             = 105
	Java8ParserRULE_interfaceMethodDeclaration                                   = 106
	Java8ParserRULE_interfaceMethodModifier                                      = 107
	Java8ParserRULE_annotationTypeDeclaration                                    = 108
	Java8ParserRULE_annotationTypeBody                                           = 109
	Java8ParserRULE_annotationTypeMemberDeclaration                              = 110
	Java8ParserRULE_annotationTypeElementDeclaration                             = 111
	Java8ParserRULE_annotationTypeElementModifier                                = 112
	Java8ParserRULE_defaultValue                                                 = 113
	Java8ParserRULE_annotation                                                   = 114
	Java8ParserRULE_normalAnnotation                                             = 115
	Java8ParserRULE_elementValuePairList                                         = 116
	Java8ParserRULE_elementValuePair                                             = 117
	Java8ParserRULE_elementValue                                                 = 118
	Java8ParserRULE_elementValueArrayInitializer                                 = 119
	Java8ParserRULE_elementValueList                                             = 120
	Java8ParserRULE_markerAnnotation                                             = 121
	Java8ParserRULE_singleElementAnnotation                                      = 122
	Java8ParserRULE_arrayInitializer                                             = 123
	Java8ParserRULE_variableInitializerList                                      = 124
	Java8ParserRULE_block                                                        = 125
	Java8ParserRULE_blockStatements                                              = 126
	Java8ParserRULE_blockStatement                                               = 127
	Java8ParserRULE_localVariableDeclarationStatement                            = 128
	Java8ParserRULE_localVariableDeclaration                                     = 129
	Java8ParserRULE_statement                                                    = 130
	Java8ParserRULE_statementNoShortIf                                           = 131
	Java8ParserRULE_statementWithoutTrailingSubstatement                         = 132
	Java8ParserRULE_emptyStatement_                                              = 133
	Java8ParserRULE_labeledStatement                                             = 134
	Java8ParserRULE_labeledStatementNoShortIf                                    = 135
	Java8ParserRULE_expressionStatement                                          = 136
	Java8ParserRULE_statementExpression                                          = 137
	Java8ParserRULE_ifThenStatement                                              = 138
	Java8ParserRULE_ifThenElseStatement                                          = 139
	Java8ParserRULE_ifThenElseStatementNoShortIf                                 = 140
	Java8ParserRULE_assertStatement                                              = 141
	Java8ParserRULE_switchStatement                                              = 142
	Java8ParserRULE_switchBlock                                                  = 143
	Java8ParserRULE_switchBlockStatementGroup                                    = 144
	Java8ParserRULE_switchLabels                                                 = 145
	Java8ParserRULE_switchLabel                                                  = 146
	Java8ParserRULE_enumConstantName                                             = 147
	Java8ParserRULE_whileStatement                                               = 148
	Java8ParserRULE_whileStatementNoShortIf                                      = 149
	Java8ParserRULE_doStatement                                                  = 150
	Java8ParserRULE_forStatement                                                 = 151
	Java8ParserRULE_forStatementNoShortIf                                        = 152
	Java8ParserRULE_basicForStatement                                            = 153
	Java8ParserRULE_basicForStatementNoShortIf                                   = 154
	Java8ParserRULE_forInit                                                      = 155
	Java8ParserRULE_forUpdate                                                    = 156
	Java8ParserRULE_statementExpressionList                                      = 157
	Java8ParserRULE_enhancedForStatement                                         = 158
	Java8ParserRULE_enhancedForStatementNoShortIf                                = 159
	Java8ParserRULE_breakStatement                                               = 160
	Java8ParserRULE_continueStatement                                            = 161
	Java8ParserRULE_returnStatement                                              = 162
	Java8ParserRULE_throwStatement                                               = 163
	Java8ParserRULE_synchronizedStatement                                        = 164
	Java8ParserRULE_tryStatement                                                 = 165
	Java8ParserRULE_catches                                                      = 166
	Java8ParserRULE_catchClause                                                  = 167
	Java8ParserRULE_catchFormalParameter                                         = 168
	Java8ParserRULE_catchType                                                    = 169
	Java8ParserRULE_finally_                                                     = 170
	Java8ParserRULE_tryWithResourcesStatement                                    = 171
	Java8ParserRULE_resourceSpecification                                        = 172
	Java8ParserRULE_resourceList                                                 = 173
	Java8ParserRULE_resource                                                     = 174
	Java8ParserRULE_primary                                                      = 175
	Java8ParserRULE_primaryNoNewArray                                            = 176
	Java8ParserRULE_primaryNoNewArray_lf_arrayAccess                             = 177
	Java8ParserRULE_primaryNoNewArray_lfno_arrayAccess                           = 178
	Java8ParserRULE_primaryNoNewArray_lf_primary                                 = 179
	Java8ParserRULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary       = 180
	Java8ParserRULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary     = 181
	Java8ParserRULE_primaryNoNewArray_lfno_primary                               = 182
	Java8ParserRULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary   = 183
	Java8ParserRULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary = 184
	Java8ParserRULE_classInstanceCreationExpression                              = 185
	Java8ParserRULE_classInstanceCreationExpression_lf_primary                   = 186
	Java8ParserRULE_classInstanceCreationExpression_lfno_primary                 = 187
	Java8ParserRULE_typeArgumentsOrDiamond                                       = 188
	Java8ParserRULE_fieldAccess                                                  = 189
	Java8ParserRULE_fieldAccess_lf_primary                                       = 190
	Java8ParserRULE_fieldAccess_lfno_primary                                     = 191
	Java8ParserRULE_arrayAccess                                                  = 192
	Java8ParserRULE_arrayAccess_lf_primary                                       = 193
	Java8ParserRULE_arrayAccess_lfno_primary                                     = 194
	Java8ParserRULE_methodInvocation                                             = 195
	Java8ParserRULE_methodInvocation_lf_primary                                  = 196
	Java8ParserRULE_methodInvocation_lfno_primary                                = 197
	Java8ParserRULE_argumentList                                                 = 198
	Java8ParserRULE_methodReference                                              = 199
	Java8ParserRULE_methodReference_lf_primary                                   = 200
	Java8ParserRULE_methodReference_lfno_primary                                 = 201
	Java8ParserRULE_arrayCreationExpression                                      = 202
	Java8ParserRULE_dimExprs                                                     = 203
	Java8ParserRULE_dimExpr                                                      = 204
	Java8ParserRULE_constantExpression                                           = 205
	Java8ParserRULE_expression                                                   = 206
	Java8ParserRULE_lambdaExpression                                             = 207
	Java8ParserRULE_lambdaParameters                                             = 208
	Java8ParserRULE_inferredFormalParameterList                                  = 209
	Java8ParserRULE_lambdaBody                                                   = 210
	Java8ParserRULE_assignmentExpression                                         = 211
	Java8ParserRULE_assignment                                                   = 212
	Java8ParserRULE_leftHandSide                                                 = 213
	Java8ParserRULE_assignmentOperator                                           = 214
	Java8ParserRULE_conditionalExpression                                        = 215
	Java8ParserRULE_conditionalOrExpression                                      = 216
	Java8ParserRULE_conditionalAndExpression                                     = 217
	Java8ParserRULE_inclusiveOrExpression                                        = 218
	Java8ParserRULE_exclusiveOrExpression                                        = 219
	Java8ParserRULE_andExpression                                                = 220
	Java8ParserRULE_equalityExpression                                           = 221
	Java8ParserRULE_relationalExpression                                         = 222
	Java8ParserRULE_shiftExpression                                              = 223
	Java8ParserRULE_additiveExpression                                           = 224
	Java8ParserRULE_multiplicativeExpression                                     = 225
	Java8ParserRULE_unaryExpression                                              = 226
	Java8ParserRULE_preIncrementExpression                                       = 227
	Java8ParserRULE_preDecrementExpression                                       = 228
	Java8ParserRULE_unaryExpressionNotPlusMinus                                  = 229
	Java8ParserRULE_postfixExpression                                            = 230
	Java8ParserRULE_postIncrementExpression                                      = 231
	Java8ParserRULE_postIncrementExpression_lf_postfixExpression                 = 232
	Java8ParserRULE_postDecrementExpression                                      = 233
	Java8ParserRULE_postDecrementExpression_lf_postfixExpression                 = 234
	Java8ParserRULE_castExpression                                               = 235
)

// ILiteralContext is an interface to support dynamic dispatch.
type ILiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IntegerLiteral() antlr.TerminalNode
	FloatingPointLiteral() antlr.TerminalNode
	BooleanLiteral() antlr.TerminalNode
	CharacterLiteral() antlr.TerminalNode
	StringLiteral() antlr.TerminalNode
	NullLiteral() antlr.TerminalNode

	// IsLiteralContext differentiates from other interfaces.
	IsLiteralContext()
}

type LiteralContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralContext() *LiteralContext {
	var p = new(LiteralContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_literal
	return p
}

func InitEmptyLiteralContext(p *LiteralContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_literal
}

func (*LiteralContext) IsLiteralContext() {}

func NewLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralContext {
	var p = new(LiteralContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_literal

	return p
}

func (s *LiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralContext) IntegerLiteral() antlr.TerminalNode {
	return s.GetToken(Java8ParserIntegerLiteral, 0)
}

func (s *LiteralContext) FloatingPointLiteral() antlr.TerminalNode {
	return s.GetToken(Java8ParserFloatingPointLiteral, 0)
}

func (s *LiteralContext) BooleanLiteral() antlr.TerminalNode {
	return s.GetToken(Java8ParserBooleanLiteral, 0)
}

func (s *LiteralContext) CharacterLiteral() antlr.TerminalNode {
	return s.GetToken(Java8ParserCharacterLiteral, 0)
}

func (s *LiteralContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(Java8ParserStringLiteral, 0)
}

func (s *LiteralContext) NullLiteral() antlr.TerminalNode {
	return s.GetToken(Java8ParserNullLiteral, 0)
}

func (s *LiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterLiteral(s)
	}
}

func (s *LiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitLiteral(s)
	}
}

func (p *Java8Parser) Literal() (localctx ILiteralContext) {
	localctx = NewLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, Java8ParserRULE_literal)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(472)
		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&141863388262170624) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrimitiveTypeContext is an interface to support dynamic dispatch.
type IPrimitiveTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NumericType() INumericTypeContext
	AllAnnotation() []IAnnotationContext
	Annotation(i int) IAnnotationContext
	BOOLEAN() antlr.TerminalNode

	// IsPrimitiveTypeContext differentiates from other interfaces.
	IsPrimitiveTypeContext()
}

type PrimitiveTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimitiveTypeContext() *PrimitiveTypeContext {
	var p = new(PrimitiveTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_primitiveType
	return p
}

func InitEmptyPrimitiveTypeContext(p *PrimitiveTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_primitiveType
}

func (*PrimitiveTypeContext) IsPrimitiveTypeContext() {}

func NewPrimitiveTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimitiveTypeContext {
	var p = new(PrimitiveTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_primitiveType

	return p
}

func (s *PrimitiveTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimitiveTypeContext) NumericType() INumericTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericTypeContext)
}

func (s *PrimitiveTypeContext) AllAnnotation() []IAnnotationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAnnotationContext); ok {
			len++
		}
	}

	tst := make([]IAnnotationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAnnotationContext); ok {
			tst[i] = t.(IAnnotationContext)
			i++
		}
	}

	return tst
}

func (s *PrimitiveTypeContext) Annotation(i int) IAnnotationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *PrimitiveTypeContext) BOOLEAN() antlr.TerminalNode {
	return s.GetToken(Java8ParserBOOLEAN, 0)
}

func (s *PrimitiveTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimitiveTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimitiveTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterPrimitiveType(s)
	}
}

func (s *PrimitiveTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitPrimitiveType(s)
	}
}

func (p *Java8Parser) PrimitiveType() (localctx IPrimitiveTypeContext) {
	localctx = NewPrimitiveTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, Java8ParserRULE_primitiveType)
	var _la int

	p.SetState(488)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 2, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(477)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == Java8ParserAT {
			{
				p.SetState(474)
				p.Annotation()
			}

			p.SetState(479)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(480)
			p.NumericType()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(484)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == Java8ParserAT {
			{
				p.SetState(481)
				p.Annotation()
			}

			p.SetState(486)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(487)
			p.Match(Java8ParserBOOLEAN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INumericTypeContext is an interface to support dynamic dispatch.
type INumericTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IntegralType() IIntegralTypeContext
	FloatingPointType() IFloatingPointTypeContext

	// IsNumericTypeContext differentiates from other interfaces.
	IsNumericTypeContext()
}

type NumericTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumericTypeContext() *NumericTypeContext {
	var p = new(NumericTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_numericType
	return p
}

func InitEmptyNumericTypeContext(p *NumericTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_numericType
}

func (*NumericTypeContext) IsNumericTypeContext() {}

func NewNumericTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumericTypeContext {
	var p = new(NumericTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_numericType

	return p
}

func (s *NumericTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *NumericTypeContext) IntegralType() IIntegralTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegralTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegralTypeContext)
}

func (s *NumericTypeContext) FloatingPointType() IFloatingPointTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFloatingPointTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFloatingPointTypeContext)
}

func (s *NumericTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumericTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NumericTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterNumericType(s)
	}
}

func (s *NumericTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitNumericType(s)
	}
}

func (p *Java8Parser) NumericType() (localctx INumericTypeContext) {
	localctx = NewNumericTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, Java8ParserRULE_numericType)
	p.SetState(492)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case Java8ParserBYTE, Java8ParserCHAR, Java8ParserINT, Java8ParserLONG, Java8ParserSHORT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(490)
			p.IntegralType()
		}

	case Java8ParserDOUBLE, Java8ParserFLOAT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(491)
			p.FloatingPointType()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIntegralTypeContext is an interface to support dynamic dispatch.
type IIntegralTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BYTE() antlr.TerminalNode
	SHORT() antlr.TerminalNode
	INT() antlr.TerminalNode
	LONG() antlr.TerminalNode
	CHAR() antlr.TerminalNode

	// IsIntegralTypeContext differentiates from other interfaces.
	IsIntegralTypeContext()
}

type IntegralTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntegralTypeContext() *IntegralTypeContext {
	var p = new(IntegralTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_integralType
	return p
}

func InitEmptyIntegralTypeContext(p *IntegralTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_integralType
}

func (*IntegralTypeContext) IsIntegralTypeContext() {}

func NewIntegralTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntegralTypeContext {
	var p = new(IntegralTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_integralType

	return p
}

func (s *IntegralTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *IntegralTypeContext) BYTE() antlr.TerminalNode {
	return s.GetToken(Java8ParserBYTE, 0)
}

func (s *IntegralTypeContext) SHORT() antlr.TerminalNode {
	return s.GetToken(Java8ParserSHORT, 0)
}

func (s *IntegralTypeContext) INT() antlr.TerminalNode {
	return s.GetToken(Java8ParserINT, 0)
}

func (s *IntegralTypeContext) LONG() antlr.TerminalNode {
	return s.GetToken(Java8ParserLONG, 0)
}

func (s *IntegralTypeContext) CHAR() antlr.TerminalNode {
	return s.GetToken(Java8ParserCHAR, 0)
}

func (s *IntegralTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntegralTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntegralTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterIntegralType(s)
	}
}

func (s *IntegralTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitIntegralType(s)
	}
}

func (p *Java8Parser) IntegralType() (localctx IIntegralTypeContext) {
	localctx = NewIntegralTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, Java8ParserRULE_integralType)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(494)
		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&138110042400) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFloatingPointTypeContext is an interface to support dynamic dispatch.
type IFloatingPointTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FLOAT() antlr.TerminalNode
	DOUBLE() antlr.TerminalNode

	// IsFloatingPointTypeContext differentiates from other interfaces.
	IsFloatingPointTypeContext()
}

type FloatingPointTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFloatingPointTypeContext() *FloatingPointTypeContext {
	var p = new(FloatingPointTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_floatingPointType
	return p
}

func InitEmptyFloatingPointTypeContext(p *FloatingPointTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_floatingPointType
}

func (*FloatingPointTypeContext) IsFloatingPointTypeContext() {}

func NewFloatingPointTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FloatingPointTypeContext {
	var p = new(FloatingPointTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_floatingPointType

	return p
}

func (s *FloatingPointTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *FloatingPointTypeContext) FLOAT() antlr.TerminalNode {
	return s.GetToken(Java8ParserFLOAT, 0)
}

func (s *FloatingPointTypeContext) DOUBLE() antlr.TerminalNode {
	return s.GetToken(Java8ParserDOUBLE, 0)
}

func (s *FloatingPointTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FloatingPointTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FloatingPointTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterFloatingPointType(s)
	}
}

func (s *FloatingPointTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitFloatingPointType(s)
	}
}

func (p *Java8Parser) FloatingPointType() (localctx IFloatingPointTypeContext) {
	localctx = NewFloatingPointTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, Java8ParserRULE_floatingPointType)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(496)
		_la = p.GetTokenStream().LA(1)

		if !(_la == Java8ParserDOUBLE || _la == Java8ParserFLOAT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IReferenceTypeContext is an interface to support dynamic dispatch.
type IReferenceTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ClassOrInterfaceType() IClassOrInterfaceTypeContext
	TypeVariable() ITypeVariableContext
	ArrayType() IArrayTypeContext

	// IsReferenceTypeContext differentiates from other interfaces.
	IsReferenceTypeContext()
}

type ReferenceTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReferenceTypeContext() *ReferenceTypeContext {
	var p = new(ReferenceTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_referenceType
	return p
}

func InitEmptyReferenceTypeContext(p *ReferenceTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_referenceType
}

func (*ReferenceTypeContext) IsReferenceTypeContext() {}

func NewReferenceTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReferenceTypeContext {
	var p = new(ReferenceTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_referenceType

	return p
}

func (s *ReferenceTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ReferenceTypeContext) ClassOrInterfaceType() IClassOrInterfaceTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassOrInterfaceTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassOrInterfaceTypeContext)
}

func (s *ReferenceTypeContext) TypeVariable() ITypeVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeVariableContext)
}

func (s *ReferenceTypeContext) ArrayType() IArrayTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayTypeContext)
}

func (s *ReferenceTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReferenceTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReferenceTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterReferenceType(s)
	}
}

func (s *ReferenceTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitReferenceType(s)
	}
}

func (p *Java8Parser) ReferenceType() (localctx IReferenceTypeContext) {
	localctx = NewReferenceTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, Java8ParserRULE_referenceType)
	p.SetState(501)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 4, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(498)
			p.ClassOrInterfaceType()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(499)
			p.TypeVariable()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(500)
			p.ArrayType()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IClassOrInterfaceTypeContext is an interface to support dynamic dispatch.
type IClassOrInterfaceTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ClassType_lfno_classOrInterfaceType() IClassType_lfno_classOrInterfaceTypeContext
	InterfaceType_lfno_classOrInterfaceType() IInterfaceType_lfno_classOrInterfaceTypeContext
	AllClassType_lf_classOrInterfaceType() []IClassType_lf_classOrInterfaceTypeContext
	ClassType_lf_classOrInterfaceType(i int) IClassType_lf_classOrInterfaceTypeContext
	AllInterfaceType_lf_classOrInterfaceType() []IInterfaceType_lf_classOrInterfaceTypeContext
	InterfaceType_lf_classOrInterfaceType(i int) IInterfaceType_lf_classOrInterfaceTypeContext

	// IsClassOrInterfaceTypeContext differentiates from other interfaces.
	IsClassOrInterfaceTypeContext()
}

type ClassOrInterfaceTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassOrInterfaceTypeContext() *ClassOrInterfaceTypeContext {
	var p = new(ClassOrInterfaceTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_classOrInterfaceType
	return p
}

func InitEmptyClassOrInterfaceTypeContext(p *ClassOrInterfaceTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_classOrInterfaceType
}

func (*ClassOrInterfaceTypeContext) IsClassOrInterfaceTypeContext() {}

func NewClassOrInterfaceTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassOrInterfaceTypeContext {
	var p = new(ClassOrInterfaceTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_classOrInterfaceType

	return p
}

func (s *ClassOrInterfaceTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassOrInterfaceTypeContext) ClassType_lfno_classOrInterfaceType() IClassType_lfno_classOrInterfaceTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassType_lfno_classOrInterfaceTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassType_lfno_classOrInterfaceTypeContext)
}

func (s *ClassOrInterfaceTypeContext) InterfaceType_lfno_classOrInterfaceType() IInterfaceType_lfno_classOrInterfaceTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterfaceType_lfno_classOrInterfaceTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterfaceType_lfno_classOrInterfaceTypeContext)
}

func (s *ClassOrInterfaceTypeContext) AllClassType_lf_classOrInterfaceType() []IClassType_lf_classOrInterfaceTypeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IClassType_lf_classOrInterfaceTypeContext); ok {
			len++
		}
	}

	tst := make([]IClassType_lf_classOrInterfaceTypeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IClassType_lf_classOrInterfaceTypeContext); ok {
			tst[i] = t.(IClassType_lf_classOrInterfaceTypeContext)
			i++
		}
	}

	return tst
}

func (s *ClassOrInterfaceTypeContext) ClassType_lf_classOrInterfaceType(i int) IClassType_lf_classOrInterfaceTypeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassType_lf_classOrInterfaceTypeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassType_lf_classOrInterfaceTypeContext)
}

func (s *ClassOrInterfaceTypeContext) AllInterfaceType_lf_classOrInterfaceType() []IInterfaceType_lf_classOrInterfaceTypeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IInterfaceType_lf_classOrInterfaceTypeContext); ok {
			len++
		}
	}

	tst := make([]IInterfaceType_lf_classOrInterfaceTypeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IInterfaceType_lf_classOrInterfaceTypeContext); ok {
			tst[i] = t.(IInterfaceType_lf_classOrInterfaceTypeContext)
			i++
		}
	}

	return tst
}

func (s *ClassOrInterfaceTypeContext) InterfaceType_lf_classOrInterfaceType(i int) IInterfaceType_lf_classOrInterfaceTypeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterfaceType_lf_classOrInterfaceTypeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterfaceType_lf_classOrInterfaceTypeContext)
}

func (s *ClassOrInterfaceTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassOrInterfaceTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassOrInterfaceTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterClassOrInterfaceType(s)
	}
}

func (s *ClassOrInterfaceTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitClassOrInterfaceType(s)
	}
}

func (p *Java8Parser) ClassOrInterfaceType() (localctx IClassOrInterfaceTypeContext) {
	localctx = NewClassOrInterfaceTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, Java8ParserRULE_classOrInterfaceType)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(505)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 5, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(503)
			p.ClassType_lfno_classOrInterfaceType()
		}

	case 2:
		{
			p.SetState(504)
			p.InterfaceType_lfno_classOrInterfaceType()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.SetState(511)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 7, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(509)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 6, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(507)
					p.ClassType_lf_classOrInterfaceType()
				}

			case 2:
				{
					p.SetState(508)
					p.InterfaceType_lf_classOrInterfaceType()
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(513)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 7, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IClassTypeContext is an interface to support dynamic dispatch.
type IClassTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode
	AllAnnotation() []IAnnotationContext
	Annotation(i int) IAnnotationContext
	TypeArguments() ITypeArgumentsContext
	ClassOrInterfaceType() IClassOrInterfaceTypeContext
	DOT() antlr.TerminalNode

	// IsClassTypeContext differentiates from other interfaces.
	IsClassTypeContext()
}

type ClassTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassTypeContext() *ClassTypeContext {
	var p = new(ClassTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_classType
	return p
}

func InitEmptyClassTypeContext(p *ClassTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_classType
}

func (*ClassTypeContext) IsClassTypeContext() {}

func NewClassTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassTypeContext {
	var p = new(ClassTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_classType

	return p
}

func (s *ClassTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassTypeContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *ClassTypeContext) AllAnnotation() []IAnnotationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAnnotationContext); ok {
			len++
		}
	}

	tst := make([]IAnnotationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAnnotationContext); ok {
			tst[i] = t.(IAnnotationContext)
			i++
		}
	}

	return tst
}

func (s *ClassTypeContext) Annotation(i int) IAnnotationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *ClassTypeContext) TypeArguments() ITypeArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeArgumentsContext)
}

func (s *ClassTypeContext) ClassOrInterfaceType() IClassOrInterfaceTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassOrInterfaceTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassOrInterfaceTypeContext)
}

func (s *ClassTypeContext) DOT() antlr.TerminalNode {
	return s.GetToken(Java8ParserDOT, 0)
}

func (s *ClassTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterClassType(s)
	}
}

func (s *ClassTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitClassType(s)
	}
}

func (p *Java8Parser) ClassType() (localctx IClassTypeContext) {
	localctx = NewClassTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, Java8ParserRULE_classType)
	var _la int

	p.SetState(536)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 12, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(517)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == Java8ParserAT {
			{
				p.SetState(514)
				p.Annotation()
			}

			p.SetState(519)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(520)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(522)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(521)
				p.TypeArguments()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(524)
			p.ClassOrInterfaceType()
		}
		{
			p.SetState(525)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(529)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == Java8ParserAT {
			{
				p.SetState(526)
				p.Annotation()
			}

			p.SetState(531)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(532)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(534)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(533)
				p.TypeArguments()
			}

		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IClassType_lf_classOrInterfaceTypeContext is an interface to support dynamic dispatch.
type IClassType_lf_classOrInterfaceTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DOT() antlr.TerminalNode
	Identifier() antlr.TerminalNode
	AllAnnotation() []IAnnotationContext
	Annotation(i int) IAnnotationContext
	TypeArguments() ITypeArgumentsContext

	// IsClassType_lf_classOrInterfaceTypeContext differentiates from other interfaces.
	IsClassType_lf_classOrInterfaceTypeContext()
}

type ClassType_lf_classOrInterfaceTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassType_lf_classOrInterfaceTypeContext() *ClassType_lf_classOrInterfaceTypeContext {
	var p = new(ClassType_lf_classOrInterfaceTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_classType_lf_classOrInterfaceType
	return p
}

func InitEmptyClassType_lf_classOrInterfaceTypeContext(p *ClassType_lf_classOrInterfaceTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_classType_lf_classOrInterfaceType
}

func (*ClassType_lf_classOrInterfaceTypeContext) IsClassType_lf_classOrInterfaceTypeContext() {}

func NewClassType_lf_classOrInterfaceTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassType_lf_classOrInterfaceTypeContext {
	var p = new(ClassType_lf_classOrInterfaceTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_classType_lf_classOrInterfaceType

	return p
}

func (s *ClassType_lf_classOrInterfaceTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassType_lf_classOrInterfaceTypeContext) DOT() antlr.TerminalNode {
	return s.GetToken(Java8ParserDOT, 0)
}

func (s *ClassType_lf_classOrInterfaceTypeContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *ClassType_lf_classOrInterfaceTypeContext) AllAnnotation() []IAnnotationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAnnotationContext); ok {
			len++
		}
	}

	tst := make([]IAnnotationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAnnotationContext); ok {
			tst[i] = t.(IAnnotationContext)
			i++
		}
	}

	return tst
}

func (s *ClassType_lf_classOrInterfaceTypeContext) Annotation(i int) IAnnotationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *ClassType_lf_classOrInterfaceTypeContext) TypeArguments() ITypeArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeArgumentsContext)
}

func (s *ClassType_lf_classOrInterfaceTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassType_lf_classOrInterfaceTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassType_lf_classOrInterfaceTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterClassType_lf_classOrInterfaceType(s)
	}
}

func (s *ClassType_lf_classOrInterfaceTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitClassType_lf_classOrInterfaceType(s)
	}
}

func (p *Java8Parser) ClassType_lf_classOrInterfaceType() (localctx IClassType_lf_classOrInterfaceTypeContext) {
	localctx = NewClassType_lf_classOrInterfaceTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, Java8ParserRULE_classType_lf_classOrInterfaceType)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(538)
		p.Match(Java8ParserDOT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(542)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Java8ParserAT {
		{
			p.SetState(539)
			p.Annotation()
		}

		p.SetState(544)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(545)
		p.Match(Java8ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(547)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 14, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(546)
			p.TypeArguments()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IClassType_lfno_classOrInterfaceTypeContext is an interface to support dynamic dispatch.
type IClassType_lfno_classOrInterfaceTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode
	AllAnnotation() []IAnnotationContext
	Annotation(i int) IAnnotationContext
	TypeArguments() ITypeArgumentsContext

	// IsClassType_lfno_classOrInterfaceTypeContext differentiates from other interfaces.
	IsClassType_lfno_classOrInterfaceTypeContext()
}

type ClassType_lfno_classOrInterfaceTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassType_lfno_classOrInterfaceTypeContext() *ClassType_lfno_classOrInterfaceTypeContext {
	var p = new(ClassType_lfno_classOrInterfaceTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_classType_lfno_classOrInterfaceType
	return p
}

func InitEmptyClassType_lfno_classOrInterfaceTypeContext(p *ClassType_lfno_classOrInterfaceTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_classType_lfno_classOrInterfaceType
}

func (*ClassType_lfno_classOrInterfaceTypeContext) IsClassType_lfno_classOrInterfaceTypeContext() {}

func NewClassType_lfno_classOrInterfaceTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassType_lfno_classOrInterfaceTypeContext {
	var p = new(ClassType_lfno_classOrInterfaceTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_classType_lfno_classOrInterfaceType

	return p
}

func (s *ClassType_lfno_classOrInterfaceTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassType_lfno_classOrInterfaceTypeContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *ClassType_lfno_classOrInterfaceTypeContext) AllAnnotation() []IAnnotationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAnnotationContext); ok {
			len++
		}
	}

	tst := make([]IAnnotationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAnnotationContext); ok {
			tst[i] = t.(IAnnotationContext)
			i++
		}
	}

	return tst
}

func (s *ClassType_lfno_classOrInterfaceTypeContext) Annotation(i int) IAnnotationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *ClassType_lfno_classOrInterfaceTypeContext) TypeArguments() ITypeArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeArgumentsContext)
}

func (s *ClassType_lfno_classOrInterfaceTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassType_lfno_classOrInterfaceTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassType_lfno_classOrInterfaceTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterClassType_lfno_classOrInterfaceType(s)
	}
}

func (s *ClassType_lfno_classOrInterfaceTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitClassType_lfno_classOrInterfaceType(s)
	}
}

func (p *Java8Parser) ClassType_lfno_classOrInterfaceType() (localctx IClassType_lfno_classOrInterfaceTypeContext) {
	localctx = NewClassType_lfno_classOrInterfaceTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, Java8ParserRULE_classType_lfno_classOrInterfaceType)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(552)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Java8ParserAT {
		{
			p.SetState(549)
			p.Annotation()
		}

		p.SetState(554)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(555)
		p.Match(Java8ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(557)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 16, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(556)
			p.TypeArguments()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInterfaceTypeContext is an interface to support dynamic dispatch.
type IInterfaceTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ClassType() IClassTypeContext

	// IsInterfaceTypeContext differentiates from other interfaces.
	IsInterfaceTypeContext()
}

type InterfaceTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceTypeContext() *InterfaceTypeContext {
	var p = new(InterfaceTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_interfaceType
	return p
}

func InitEmptyInterfaceTypeContext(p *InterfaceTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_interfaceType
}

func (*InterfaceTypeContext) IsInterfaceTypeContext() {}

func NewInterfaceTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceTypeContext {
	var p = new(InterfaceTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_interfaceType

	return p
}

func (s *InterfaceTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceTypeContext) ClassType() IClassTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassTypeContext)
}

func (s *InterfaceTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterInterfaceType(s)
	}
}

func (s *InterfaceTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitInterfaceType(s)
	}
}

func (p *Java8Parser) InterfaceType() (localctx IInterfaceTypeContext) {
	localctx = NewInterfaceTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, Java8ParserRULE_interfaceType)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(559)
		p.ClassType()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInterfaceType_lf_classOrInterfaceTypeContext is an interface to support dynamic dispatch.
type IInterfaceType_lf_classOrInterfaceTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ClassType_lf_classOrInterfaceType() IClassType_lf_classOrInterfaceTypeContext

	// IsInterfaceType_lf_classOrInterfaceTypeContext differentiates from other interfaces.
	IsInterfaceType_lf_classOrInterfaceTypeContext()
}

type InterfaceType_lf_classOrInterfaceTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceType_lf_classOrInterfaceTypeContext() *InterfaceType_lf_classOrInterfaceTypeContext {
	var p = new(InterfaceType_lf_classOrInterfaceTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_interfaceType_lf_classOrInterfaceType
	return p
}

func InitEmptyInterfaceType_lf_classOrInterfaceTypeContext(p *InterfaceType_lf_classOrInterfaceTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_interfaceType_lf_classOrInterfaceType
}

func (*InterfaceType_lf_classOrInterfaceTypeContext) IsInterfaceType_lf_classOrInterfaceTypeContext() {
}

func NewInterfaceType_lf_classOrInterfaceTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceType_lf_classOrInterfaceTypeContext {
	var p = new(InterfaceType_lf_classOrInterfaceTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_interfaceType_lf_classOrInterfaceType

	return p
}

func (s *InterfaceType_lf_classOrInterfaceTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceType_lf_classOrInterfaceTypeContext) ClassType_lf_classOrInterfaceType() IClassType_lf_classOrInterfaceTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassType_lf_classOrInterfaceTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassType_lf_classOrInterfaceTypeContext)
}

func (s *InterfaceType_lf_classOrInterfaceTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceType_lf_classOrInterfaceTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceType_lf_classOrInterfaceTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterInterfaceType_lf_classOrInterfaceType(s)
	}
}

func (s *InterfaceType_lf_classOrInterfaceTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitInterfaceType_lf_classOrInterfaceType(s)
	}
}

func (p *Java8Parser) InterfaceType_lf_classOrInterfaceType() (localctx IInterfaceType_lf_classOrInterfaceTypeContext) {
	localctx = NewInterfaceType_lf_classOrInterfaceTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, Java8ParserRULE_interfaceType_lf_classOrInterfaceType)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(561)
		p.ClassType_lf_classOrInterfaceType()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInterfaceType_lfno_classOrInterfaceTypeContext is an interface to support dynamic dispatch.
type IInterfaceType_lfno_classOrInterfaceTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ClassType_lfno_classOrInterfaceType() IClassType_lfno_classOrInterfaceTypeContext

	// IsInterfaceType_lfno_classOrInterfaceTypeContext differentiates from other interfaces.
	IsInterfaceType_lfno_classOrInterfaceTypeContext()
}

type InterfaceType_lfno_classOrInterfaceTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceType_lfno_classOrInterfaceTypeContext() *InterfaceType_lfno_classOrInterfaceTypeContext {
	var p = new(InterfaceType_lfno_classOrInterfaceTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_interfaceType_lfno_classOrInterfaceType
	return p
}

func InitEmptyInterfaceType_lfno_classOrInterfaceTypeContext(p *InterfaceType_lfno_classOrInterfaceTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_interfaceType_lfno_classOrInterfaceType
}

func (*InterfaceType_lfno_classOrInterfaceTypeContext) IsInterfaceType_lfno_classOrInterfaceTypeContext() {
}

func NewInterfaceType_lfno_classOrInterfaceTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceType_lfno_classOrInterfaceTypeContext {
	var p = new(InterfaceType_lfno_classOrInterfaceTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_interfaceType_lfno_classOrInterfaceType

	return p
}

func (s *InterfaceType_lfno_classOrInterfaceTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceType_lfno_classOrInterfaceTypeContext) ClassType_lfno_classOrInterfaceType() IClassType_lfno_classOrInterfaceTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassType_lfno_classOrInterfaceTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassType_lfno_classOrInterfaceTypeContext)
}

func (s *InterfaceType_lfno_classOrInterfaceTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceType_lfno_classOrInterfaceTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceType_lfno_classOrInterfaceTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterInterfaceType_lfno_classOrInterfaceType(s)
	}
}

func (s *InterfaceType_lfno_classOrInterfaceTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitInterfaceType_lfno_classOrInterfaceType(s)
	}
}

func (p *Java8Parser) InterfaceType_lfno_classOrInterfaceType() (localctx IInterfaceType_lfno_classOrInterfaceTypeContext) {
	localctx = NewInterfaceType_lfno_classOrInterfaceTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, Java8ParserRULE_interfaceType_lfno_classOrInterfaceType)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(563)
		p.ClassType_lfno_classOrInterfaceType()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeVariableContext is an interface to support dynamic dispatch.
type ITypeVariableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode
	AllAnnotation() []IAnnotationContext
	Annotation(i int) IAnnotationContext

	// IsTypeVariableContext differentiates from other interfaces.
	IsTypeVariableContext()
}

type TypeVariableContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeVariableContext() *TypeVariableContext {
	var p = new(TypeVariableContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_typeVariable
	return p
}

func InitEmptyTypeVariableContext(p *TypeVariableContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_typeVariable
}

func (*TypeVariableContext) IsTypeVariableContext() {}

func NewTypeVariableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeVariableContext {
	var p = new(TypeVariableContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_typeVariable

	return p
}

func (s *TypeVariableContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeVariableContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *TypeVariableContext) AllAnnotation() []IAnnotationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAnnotationContext); ok {
			len++
		}
	}

	tst := make([]IAnnotationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAnnotationContext); ok {
			tst[i] = t.(IAnnotationContext)
			i++
		}
	}

	return tst
}

func (s *TypeVariableContext) Annotation(i int) IAnnotationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *TypeVariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeVariableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeVariableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterTypeVariable(s)
	}
}

func (s *TypeVariableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitTypeVariable(s)
	}
}

func (p *Java8Parser) TypeVariable() (localctx ITypeVariableContext) {
	localctx = NewTypeVariableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, Java8ParserRULE_typeVariable)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(568)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Java8ParserAT {
		{
			p.SetState(565)
			p.Annotation()
		}

		p.SetState(570)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(571)
		p.Match(Java8ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArrayTypeContext is an interface to support dynamic dispatch.
type IArrayTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PrimitiveType() IPrimitiveTypeContext
	Dims() IDimsContext
	ClassOrInterfaceType() IClassOrInterfaceTypeContext
	TypeVariable() ITypeVariableContext

	// IsArrayTypeContext differentiates from other interfaces.
	IsArrayTypeContext()
}

type ArrayTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayTypeContext() *ArrayTypeContext {
	var p = new(ArrayTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_arrayType
	return p
}

func InitEmptyArrayTypeContext(p *ArrayTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_arrayType
}

func (*ArrayTypeContext) IsArrayTypeContext() {}

func NewArrayTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayTypeContext {
	var p = new(ArrayTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_arrayType

	return p
}

func (s *ArrayTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayTypeContext) PrimitiveType() IPrimitiveTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimitiveTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimitiveTypeContext)
}

func (s *ArrayTypeContext) Dims() IDimsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDimsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDimsContext)
}

func (s *ArrayTypeContext) ClassOrInterfaceType() IClassOrInterfaceTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassOrInterfaceTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassOrInterfaceTypeContext)
}

func (s *ArrayTypeContext) TypeVariable() ITypeVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeVariableContext)
}

func (s *ArrayTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterArrayType(s)
	}
}

func (s *ArrayTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitArrayType(s)
	}
}

func (p *Java8Parser) ArrayType() (localctx IArrayTypeContext) {
	localctx = NewArrayTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, Java8ParserRULE_arrayType)
	p.SetState(582)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 18, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(573)
			p.PrimitiveType()
		}
		{
			p.SetState(574)
			p.Dims()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(576)
			p.ClassOrInterfaceType()
		}
		{
			p.SetState(577)
			p.Dims()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(579)
			p.TypeVariable()
		}
		{
			p.SetState(580)
			p.Dims()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDimsContext is an interface to support dynamic dispatch.
type IDimsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllLBRACK() []antlr.TerminalNode
	LBRACK(i int) antlr.TerminalNode
	AllRBRACK() []antlr.TerminalNode
	RBRACK(i int) antlr.TerminalNode
	AllAnnotation() []IAnnotationContext
	Annotation(i int) IAnnotationContext

	// IsDimsContext differentiates from other interfaces.
	IsDimsContext()
}

type DimsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDimsContext() *DimsContext {
	var p = new(DimsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_dims
	return p
}

func InitEmptyDimsContext(p *DimsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_dims
}

func (*DimsContext) IsDimsContext() {}

func NewDimsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DimsContext {
	var p = new(DimsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_dims

	return p
}

func (s *DimsContext) GetParser() antlr.Parser { return s.parser }

func (s *DimsContext) AllLBRACK() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserLBRACK)
}

func (s *DimsContext) LBRACK(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserLBRACK, i)
}

func (s *DimsContext) AllRBRACK() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserRBRACK)
}

func (s *DimsContext) RBRACK(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserRBRACK, i)
}

func (s *DimsContext) AllAnnotation() []IAnnotationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAnnotationContext); ok {
			len++
		}
	}

	tst := make([]IAnnotationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAnnotationContext); ok {
			tst[i] = t.(IAnnotationContext)
			i++
		}
	}

	return tst
}

func (s *DimsContext) Annotation(i int) IAnnotationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *DimsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DimsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DimsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterDims(s)
	}
}

func (s *DimsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitDims(s)
	}
}

func (p *Java8Parser) Dims() (localctx IDimsContext) {
	localctx = NewDimsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, Java8ParserRULE_dims)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(587)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Java8ParserAT {
		{
			p.SetState(584)
			p.Annotation()
		}

		p.SetState(589)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(590)
		p.Match(Java8ParserLBRACK)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(591)
		p.Match(Java8ParserRBRACK)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(602)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 21, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(595)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == Java8ParserAT {
				{
					p.SetState(592)
					p.Annotation()
				}

				p.SetState(597)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(598)
				p.Match(Java8ParserLBRACK)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(599)
				p.Match(Java8ParserRBRACK)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(604)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 21, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeParameterContext is an interface to support dynamic dispatch.
type ITypeParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode
	AllTypeParameterModifier() []ITypeParameterModifierContext
	TypeParameterModifier(i int) ITypeParameterModifierContext
	TypeBound() ITypeBoundContext

	// IsTypeParameterContext differentiates from other interfaces.
	IsTypeParameterContext()
}

type TypeParameterContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeParameterContext() *TypeParameterContext {
	var p = new(TypeParameterContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_typeParameter
	return p
}

func InitEmptyTypeParameterContext(p *TypeParameterContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_typeParameter
}

func (*TypeParameterContext) IsTypeParameterContext() {}

func NewTypeParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeParameterContext {
	var p = new(TypeParameterContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_typeParameter

	return p
}

func (s *TypeParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeParameterContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *TypeParameterContext) AllTypeParameterModifier() []ITypeParameterModifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeParameterModifierContext); ok {
			len++
		}
	}

	tst := make([]ITypeParameterModifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeParameterModifierContext); ok {
			tst[i] = t.(ITypeParameterModifierContext)
			i++
		}
	}

	return tst
}

func (s *TypeParameterContext) TypeParameterModifier(i int) ITypeParameterModifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeParameterModifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeParameterModifierContext)
}

func (s *TypeParameterContext) TypeBound() ITypeBoundContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeBoundContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeBoundContext)
}

func (s *TypeParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeParameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterTypeParameter(s)
	}
}

func (s *TypeParameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitTypeParameter(s)
	}
}

func (p *Java8Parser) TypeParameter() (localctx ITypeParameterContext) {
	localctx = NewTypeParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, Java8ParserRULE_typeParameter)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(608)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Java8ParserAT {
		{
			p.SetState(605)
			p.TypeParameterModifier()
		}

		p.SetState(610)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(611)
		p.Match(Java8ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(613)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserEXTENDS {
		{
			p.SetState(612)
			p.TypeBound()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeParameterModifierContext is an interface to support dynamic dispatch.
type ITypeParameterModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Annotation() IAnnotationContext

	// IsTypeParameterModifierContext differentiates from other interfaces.
	IsTypeParameterModifierContext()
}

type TypeParameterModifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeParameterModifierContext() *TypeParameterModifierContext {
	var p = new(TypeParameterModifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_typeParameterModifier
	return p
}

func InitEmptyTypeParameterModifierContext(p *TypeParameterModifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_typeParameterModifier
}

func (*TypeParameterModifierContext) IsTypeParameterModifierContext() {}

func NewTypeParameterModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeParameterModifierContext {
	var p = new(TypeParameterModifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_typeParameterModifier

	return p
}

func (s *TypeParameterModifierContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeParameterModifierContext) Annotation() IAnnotationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *TypeParameterModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeParameterModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeParameterModifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterTypeParameterModifier(s)
	}
}

func (s *TypeParameterModifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitTypeParameterModifier(s)
	}
}

func (p *Java8Parser) TypeParameterModifier() (localctx ITypeParameterModifierContext) {
	localctx = NewTypeParameterModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, Java8ParserRULE_typeParameterModifier)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(615)
		p.Annotation()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeBoundContext is an interface to support dynamic dispatch.
type ITypeBoundContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EXTENDS() antlr.TerminalNode
	TypeVariable() ITypeVariableContext
	ClassOrInterfaceType() IClassOrInterfaceTypeContext
	AllAdditionalBound() []IAdditionalBoundContext
	AdditionalBound(i int) IAdditionalBoundContext

	// IsTypeBoundContext differentiates from other interfaces.
	IsTypeBoundContext()
}

type TypeBoundContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeBoundContext() *TypeBoundContext {
	var p = new(TypeBoundContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_typeBound
	return p
}

func InitEmptyTypeBoundContext(p *TypeBoundContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_typeBound
}

func (*TypeBoundContext) IsTypeBoundContext() {}

func NewTypeBoundContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeBoundContext {
	var p = new(TypeBoundContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_typeBound

	return p
}

func (s *TypeBoundContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeBoundContext) EXTENDS() antlr.TerminalNode {
	return s.GetToken(Java8ParserEXTENDS, 0)
}

func (s *TypeBoundContext) TypeVariable() ITypeVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeVariableContext)
}

func (s *TypeBoundContext) ClassOrInterfaceType() IClassOrInterfaceTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassOrInterfaceTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassOrInterfaceTypeContext)
}

func (s *TypeBoundContext) AllAdditionalBound() []IAdditionalBoundContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAdditionalBoundContext); ok {
			len++
		}
	}

	tst := make([]IAdditionalBoundContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAdditionalBoundContext); ok {
			tst[i] = t.(IAdditionalBoundContext)
			i++
		}
	}

	return tst
}

func (s *TypeBoundContext) AdditionalBound(i int) IAdditionalBoundContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAdditionalBoundContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAdditionalBoundContext)
}

func (s *TypeBoundContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeBoundContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeBoundContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterTypeBound(s)
	}
}

func (s *TypeBoundContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitTypeBound(s)
	}
}

func (p *Java8Parser) TypeBound() (localctx ITypeBoundContext) {
	localctx = NewTypeBoundContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, Java8ParserRULE_typeBound)
	var _la int

	p.SetState(627)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 25, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(617)
			p.Match(Java8ParserEXTENDS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(618)
			p.TypeVariable()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(619)
			p.Match(Java8ParserEXTENDS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(620)
			p.ClassOrInterfaceType()
		}
		p.SetState(624)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == Java8ParserBITAND {
			{
				p.SetState(621)
				p.AdditionalBound()
			}

			p.SetState(626)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAdditionalBoundContext is an interface to support dynamic dispatch.
type IAdditionalBoundContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BITAND() antlr.TerminalNode
	InterfaceType() IInterfaceTypeContext

	// IsAdditionalBoundContext differentiates from other interfaces.
	IsAdditionalBoundContext()
}

type AdditionalBoundContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAdditionalBoundContext() *AdditionalBoundContext {
	var p = new(AdditionalBoundContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_additionalBound
	return p
}

func InitEmptyAdditionalBoundContext(p *AdditionalBoundContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_additionalBound
}

func (*AdditionalBoundContext) IsAdditionalBoundContext() {}

func NewAdditionalBoundContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AdditionalBoundContext {
	var p = new(AdditionalBoundContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_additionalBound

	return p
}

func (s *AdditionalBoundContext) GetParser() antlr.Parser { return s.parser }

func (s *AdditionalBoundContext) BITAND() antlr.TerminalNode {
	return s.GetToken(Java8ParserBITAND, 0)
}

func (s *AdditionalBoundContext) InterfaceType() IInterfaceTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterfaceTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterfaceTypeContext)
}

func (s *AdditionalBoundContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AdditionalBoundContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AdditionalBoundContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterAdditionalBound(s)
	}
}

func (s *AdditionalBoundContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitAdditionalBound(s)
	}
}

func (p *Java8Parser) AdditionalBound() (localctx IAdditionalBoundContext) {
	localctx = NewAdditionalBoundContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, Java8ParserRULE_additionalBound)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(629)
		p.Match(Java8ParserBITAND)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(630)
		p.InterfaceType()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeArgumentsContext is an interface to support dynamic dispatch.
type ITypeArgumentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LT() antlr.TerminalNode
	TypeArgumentList() ITypeArgumentListContext
	GT() antlr.TerminalNode

	// IsTypeArgumentsContext differentiates from other interfaces.
	IsTypeArgumentsContext()
}

type TypeArgumentsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeArgumentsContext() *TypeArgumentsContext {
	var p = new(TypeArgumentsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_typeArguments
	return p
}

func InitEmptyTypeArgumentsContext(p *TypeArgumentsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_typeArguments
}

func (*TypeArgumentsContext) IsTypeArgumentsContext() {}

func NewTypeArgumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeArgumentsContext {
	var p = new(TypeArgumentsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_typeArguments

	return p
}

func (s *TypeArgumentsContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeArgumentsContext) LT() antlr.TerminalNode {
	return s.GetToken(Java8ParserLT, 0)
}

func (s *TypeArgumentsContext) TypeArgumentList() ITypeArgumentListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeArgumentListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeArgumentListContext)
}

func (s *TypeArgumentsContext) GT() antlr.TerminalNode {
	return s.GetToken(Java8ParserGT, 0)
}

func (s *TypeArgumentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeArgumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeArgumentsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterTypeArguments(s)
	}
}

func (s *TypeArgumentsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitTypeArguments(s)
	}
}

func (p *Java8Parser) TypeArguments() (localctx ITypeArgumentsContext) {
	localctx = NewTypeArgumentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, Java8ParserRULE_typeArguments)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(632)
		p.Match(Java8ParserLT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(633)
		p.TypeArgumentList()
	}
	{
		p.SetState(634)
		p.Match(Java8ParserGT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeArgumentListContext is an interface to support dynamic dispatch.
type ITypeArgumentListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllTypeArgument() []ITypeArgumentContext
	TypeArgument(i int) ITypeArgumentContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsTypeArgumentListContext differentiates from other interfaces.
	IsTypeArgumentListContext()
}

type TypeArgumentListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeArgumentListContext() *TypeArgumentListContext {
	var p = new(TypeArgumentListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_typeArgumentList
	return p
}

func InitEmptyTypeArgumentListContext(p *TypeArgumentListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_typeArgumentList
}

func (*TypeArgumentListContext) IsTypeArgumentListContext() {}

func NewTypeArgumentListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeArgumentListContext {
	var p = new(TypeArgumentListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_typeArgumentList

	return p
}

func (s *TypeArgumentListContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeArgumentListContext) AllTypeArgument() []ITypeArgumentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeArgumentContext); ok {
			len++
		}
	}

	tst := make([]ITypeArgumentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeArgumentContext); ok {
			tst[i] = t.(ITypeArgumentContext)
			i++
		}
	}

	return tst
}

func (s *TypeArgumentListContext) TypeArgument(i int) ITypeArgumentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeArgumentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeArgumentContext)
}

func (s *TypeArgumentListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserCOMMA)
}

func (s *TypeArgumentListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserCOMMA, i)
}

func (s *TypeArgumentListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeArgumentListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeArgumentListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterTypeArgumentList(s)
	}
}

func (s *TypeArgumentListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitTypeArgumentList(s)
	}
}

func (p *Java8Parser) TypeArgumentList() (localctx ITypeArgumentListContext) {
	localctx = NewTypeArgumentListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, Java8ParserRULE_typeArgumentList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(636)
		p.TypeArgument()
	}
	p.SetState(641)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Java8ParserCOMMA {
		{
			p.SetState(637)
			p.Match(Java8ParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(638)
			p.TypeArgument()
		}

		p.SetState(643)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeArgumentContext is an interface to support dynamic dispatch.
type ITypeArgumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ReferenceType() IReferenceTypeContext
	Wildcard() IWildcardContext

	// IsTypeArgumentContext differentiates from other interfaces.
	IsTypeArgumentContext()
}

type TypeArgumentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeArgumentContext() *TypeArgumentContext {
	var p = new(TypeArgumentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_typeArgument
	return p
}

func InitEmptyTypeArgumentContext(p *TypeArgumentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_typeArgument
}

func (*TypeArgumentContext) IsTypeArgumentContext() {}

func NewTypeArgumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeArgumentContext {
	var p = new(TypeArgumentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_typeArgument

	return p
}

func (s *TypeArgumentContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeArgumentContext) ReferenceType() IReferenceTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReferenceTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReferenceTypeContext)
}

func (s *TypeArgumentContext) Wildcard() IWildcardContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWildcardContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWildcardContext)
}

func (s *TypeArgumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeArgumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeArgumentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterTypeArgument(s)
	}
}

func (s *TypeArgumentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitTypeArgument(s)
	}
}

func (p *Java8Parser) TypeArgument() (localctx ITypeArgumentContext) {
	localctx = NewTypeArgumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, Java8ParserRULE_typeArgument)
	p.SetState(646)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 27, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(644)
			p.ReferenceType()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(645)
			p.Wildcard()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWildcardContext is an interface to support dynamic dispatch.
type IWildcardContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	QUESTION() antlr.TerminalNode
	AllAnnotation() []IAnnotationContext
	Annotation(i int) IAnnotationContext
	WildcardBounds() IWildcardBoundsContext

	// IsWildcardContext differentiates from other interfaces.
	IsWildcardContext()
}

type WildcardContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWildcardContext() *WildcardContext {
	var p = new(WildcardContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_wildcard
	return p
}

func InitEmptyWildcardContext(p *WildcardContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_wildcard
}

func (*WildcardContext) IsWildcardContext() {}

func NewWildcardContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WildcardContext {
	var p = new(WildcardContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_wildcard

	return p
}

func (s *WildcardContext) GetParser() antlr.Parser { return s.parser }

func (s *WildcardContext) QUESTION() antlr.TerminalNode {
	return s.GetToken(Java8ParserQUESTION, 0)
}

func (s *WildcardContext) AllAnnotation() []IAnnotationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAnnotationContext); ok {
			len++
		}
	}

	tst := make([]IAnnotationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAnnotationContext); ok {
			tst[i] = t.(IAnnotationContext)
			i++
		}
	}

	return tst
}

func (s *WildcardContext) Annotation(i int) IAnnotationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *WildcardContext) WildcardBounds() IWildcardBoundsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWildcardBoundsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWildcardBoundsContext)
}

func (s *WildcardContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WildcardContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WildcardContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterWildcard(s)
	}
}

func (s *WildcardContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitWildcard(s)
	}
}

func (p *Java8Parser) Wildcard() (localctx IWildcardContext) {
	localctx = NewWildcardContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, Java8ParserRULE_wildcard)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(651)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Java8ParserAT {
		{
			p.SetState(648)
			p.Annotation()
		}

		p.SetState(653)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(654)
		p.Match(Java8ParserQUESTION)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(656)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserEXTENDS || _la == Java8ParserSUPER {
		{
			p.SetState(655)
			p.WildcardBounds()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWildcardBoundsContext is an interface to support dynamic dispatch.
type IWildcardBoundsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EXTENDS() antlr.TerminalNode
	ReferenceType() IReferenceTypeContext
	SUPER() antlr.TerminalNode

	// IsWildcardBoundsContext differentiates from other interfaces.
	IsWildcardBoundsContext()
}

type WildcardBoundsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWildcardBoundsContext() *WildcardBoundsContext {
	var p = new(WildcardBoundsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_wildcardBounds
	return p
}

func InitEmptyWildcardBoundsContext(p *WildcardBoundsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_wildcardBounds
}

func (*WildcardBoundsContext) IsWildcardBoundsContext() {}

func NewWildcardBoundsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WildcardBoundsContext {
	var p = new(WildcardBoundsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_wildcardBounds

	return p
}

func (s *WildcardBoundsContext) GetParser() antlr.Parser { return s.parser }

func (s *WildcardBoundsContext) EXTENDS() antlr.TerminalNode {
	return s.GetToken(Java8ParserEXTENDS, 0)
}

func (s *WildcardBoundsContext) ReferenceType() IReferenceTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReferenceTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReferenceTypeContext)
}

func (s *WildcardBoundsContext) SUPER() antlr.TerminalNode {
	return s.GetToken(Java8ParserSUPER, 0)
}

func (s *WildcardBoundsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WildcardBoundsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WildcardBoundsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterWildcardBounds(s)
	}
}

func (s *WildcardBoundsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitWildcardBounds(s)
	}
}

func (p *Java8Parser) WildcardBounds() (localctx IWildcardBoundsContext) {
	localctx = NewWildcardBoundsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, Java8ParserRULE_wildcardBounds)
	p.SetState(662)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case Java8ParserEXTENDS:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(658)
			p.Match(Java8ParserEXTENDS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(659)
			p.ReferenceType()
		}

	case Java8ParserSUPER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(660)
			p.Match(Java8ParserSUPER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(661)
			p.ReferenceType()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPackageNameContext is an interface to support dynamic dispatch.
type IPackageNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode
	PackageName() IPackageNameContext
	DOT() antlr.TerminalNode

	// IsPackageNameContext differentiates from other interfaces.
	IsPackageNameContext()
}

type PackageNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageNameContext() *PackageNameContext {
	var p = new(PackageNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_packageName
	return p
}

func InitEmptyPackageNameContext(p *PackageNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_packageName
}

func (*PackageNameContext) IsPackageNameContext() {}

func NewPackageNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageNameContext {
	var p = new(PackageNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_packageName

	return p
}

func (s *PackageNameContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageNameContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *PackageNameContext) PackageName() IPackageNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPackageNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPackageNameContext)
}

func (s *PackageNameContext) DOT() antlr.TerminalNode {
	return s.GetToken(Java8ParserDOT, 0)
}

func (s *PackageNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterPackageName(s)
	}
}

func (s *PackageNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitPackageName(s)
	}
}

func (p *Java8Parser) PackageName() (localctx IPackageNameContext) {
	return p.packageName(0)
}

func (p *Java8Parser) packageName(_p int) (localctx IPackageNameContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewPackageNameContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IPackageNameContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 50
	p.EnterRecursionRule(localctx, 50, Java8ParserRULE_packageName, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(665)
		p.Match(Java8ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(672)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 31, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewPackageNameContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, Java8ParserRULE_packageName)
			p.SetState(667)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				goto errorExit
			}
			{
				p.SetState(668)
				p.Match(Java8ParserDOT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(669)
				p.Match(Java8ParserIdentifier)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(674)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 31, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeNameContext is an interface to support dynamic dispatch.
type ITypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode
	PackageOrTypeName() IPackageOrTypeNameContext
	DOT() antlr.TerminalNode

	// IsTypeNameContext differentiates from other interfaces.
	IsTypeNameContext()
}

type TypeNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeNameContext() *TypeNameContext {
	var p = new(TypeNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_typeName
	return p
}

func InitEmptyTypeNameContext(p *TypeNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_typeName
}

func (*TypeNameContext) IsTypeNameContext() {}

func NewTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeNameContext {
	var p = new(TypeNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_typeName

	return p
}

func (s *TypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeNameContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *TypeNameContext) PackageOrTypeName() IPackageOrTypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPackageOrTypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPackageOrTypeNameContext)
}

func (s *TypeNameContext) DOT() antlr.TerminalNode {
	return s.GetToken(Java8ParserDOT, 0)
}

func (s *TypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterTypeName(s)
	}
}

func (s *TypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitTypeName(s)
	}
}

func (p *Java8Parser) TypeName() (localctx ITypeNameContext) {
	localctx = NewTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, Java8ParserRULE_typeName)
	p.SetState(680)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 32, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(675)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(676)
			p.packageOrTypeName(0)
		}
		{
			p.SetState(677)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(678)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPackageOrTypeNameContext is an interface to support dynamic dispatch.
type IPackageOrTypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode
	PackageOrTypeName() IPackageOrTypeNameContext
	DOT() antlr.TerminalNode

	// IsPackageOrTypeNameContext differentiates from other interfaces.
	IsPackageOrTypeNameContext()
}

type PackageOrTypeNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageOrTypeNameContext() *PackageOrTypeNameContext {
	var p = new(PackageOrTypeNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_packageOrTypeName
	return p
}

func InitEmptyPackageOrTypeNameContext(p *PackageOrTypeNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_packageOrTypeName
}

func (*PackageOrTypeNameContext) IsPackageOrTypeNameContext() {}

func NewPackageOrTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageOrTypeNameContext {
	var p = new(PackageOrTypeNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_packageOrTypeName

	return p
}

func (s *PackageOrTypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageOrTypeNameContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *PackageOrTypeNameContext) PackageOrTypeName() IPackageOrTypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPackageOrTypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPackageOrTypeNameContext)
}

func (s *PackageOrTypeNameContext) DOT() antlr.TerminalNode {
	return s.GetToken(Java8ParserDOT, 0)
}

func (s *PackageOrTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageOrTypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageOrTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterPackageOrTypeName(s)
	}
}

func (s *PackageOrTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitPackageOrTypeName(s)
	}
}

func (p *Java8Parser) PackageOrTypeName() (localctx IPackageOrTypeNameContext) {
	return p.packageOrTypeName(0)
}

func (p *Java8Parser) packageOrTypeName(_p int) (localctx IPackageOrTypeNameContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewPackageOrTypeNameContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IPackageOrTypeNameContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 54
	p.EnterRecursionRule(localctx, 54, Java8ParserRULE_packageOrTypeName, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(683)
		p.Match(Java8ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(690)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 33, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewPackageOrTypeNameContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, Java8ParserRULE_packageOrTypeName)
			p.SetState(685)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				goto errorExit
			}
			{
				p.SetState(686)
				p.Match(Java8ParserDOT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(687)
				p.Match(Java8ParserIdentifier)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(692)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 33, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpressionNameContext is an interface to support dynamic dispatch.
type IExpressionNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode
	AmbiguousName() IAmbiguousNameContext
	DOT() antlr.TerminalNode

	// IsExpressionNameContext differentiates from other interfaces.
	IsExpressionNameContext()
}

type ExpressionNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionNameContext() *ExpressionNameContext {
	var p = new(ExpressionNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_expressionName
	return p
}

func InitEmptyExpressionNameContext(p *ExpressionNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_expressionName
}

func (*ExpressionNameContext) IsExpressionNameContext() {}

func NewExpressionNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionNameContext {
	var p = new(ExpressionNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_expressionName

	return p
}

func (s *ExpressionNameContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionNameContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *ExpressionNameContext) AmbiguousName() IAmbiguousNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAmbiguousNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAmbiguousNameContext)
}

func (s *ExpressionNameContext) DOT() antlr.TerminalNode {
	return s.GetToken(Java8ParserDOT, 0)
}

func (s *ExpressionNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterExpressionName(s)
	}
}

func (s *ExpressionNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitExpressionName(s)
	}
}

func (p *Java8Parser) ExpressionName() (localctx IExpressionNameContext) {
	localctx = NewExpressionNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, Java8ParserRULE_expressionName)
	p.SetState(698)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 34, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(693)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(694)
			p.ambiguousName(0)
		}
		{
			p.SetState(695)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(696)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMethodNameContext is an interface to support dynamic dispatch.
type IMethodNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode

	// IsMethodNameContext differentiates from other interfaces.
	IsMethodNameContext()
}

type MethodNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMethodNameContext() *MethodNameContext {
	var p = new(MethodNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_methodName
	return p
}

func InitEmptyMethodNameContext(p *MethodNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_methodName
}

func (*MethodNameContext) IsMethodNameContext() {}

func NewMethodNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MethodNameContext {
	var p = new(MethodNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_methodName

	return p
}

func (s *MethodNameContext) GetParser() antlr.Parser { return s.parser }

func (s *MethodNameContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *MethodNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MethodNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MethodNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterMethodName(s)
	}
}

func (s *MethodNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitMethodName(s)
	}
}

func (p *Java8Parser) MethodName() (localctx IMethodNameContext) {
	localctx = NewMethodNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, Java8ParserRULE_methodName)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(700)
		p.Match(Java8ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAmbiguousNameContext is an interface to support dynamic dispatch.
type IAmbiguousNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode
	AmbiguousName() IAmbiguousNameContext
	DOT() antlr.TerminalNode

	// IsAmbiguousNameContext differentiates from other interfaces.
	IsAmbiguousNameContext()
}

type AmbiguousNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAmbiguousNameContext() *AmbiguousNameContext {
	var p = new(AmbiguousNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_ambiguousName
	return p
}

func InitEmptyAmbiguousNameContext(p *AmbiguousNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_ambiguousName
}

func (*AmbiguousNameContext) IsAmbiguousNameContext() {}

func NewAmbiguousNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AmbiguousNameContext {
	var p = new(AmbiguousNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_ambiguousName

	return p
}

func (s *AmbiguousNameContext) GetParser() antlr.Parser { return s.parser }

func (s *AmbiguousNameContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *AmbiguousNameContext) AmbiguousName() IAmbiguousNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAmbiguousNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAmbiguousNameContext)
}

func (s *AmbiguousNameContext) DOT() antlr.TerminalNode {
	return s.GetToken(Java8ParserDOT, 0)
}

func (s *AmbiguousNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AmbiguousNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AmbiguousNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterAmbiguousName(s)
	}
}

func (s *AmbiguousNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitAmbiguousName(s)
	}
}

func (p *Java8Parser) AmbiguousName() (localctx IAmbiguousNameContext) {
	return p.ambiguousName(0)
}

func (p *Java8Parser) ambiguousName(_p int) (localctx IAmbiguousNameContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewAmbiguousNameContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IAmbiguousNameContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 60
	p.EnterRecursionRule(localctx, 60, Java8ParserRULE_ambiguousName, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(703)
		p.Match(Java8ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(710)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 35, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewAmbiguousNameContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, Java8ParserRULE_ambiguousName)
			p.SetState(705)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				goto errorExit
			}
			{
				p.SetState(706)
				p.Match(Java8ParserDOT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(707)
				p.Match(Java8ParserIdentifier)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(712)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 35, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICompilationUnitContext is an interface to support dynamic dispatch.
type ICompilationUnitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EOF() antlr.TerminalNode
	PackageDeclaration() IPackageDeclarationContext
	AllImportDeclaration() []IImportDeclarationContext
	ImportDeclaration(i int) IImportDeclarationContext
	AllTypeDeclaration() []ITypeDeclarationContext
	TypeDeclaration(i int) ITypeDeclarationContext

	// IsCompilationUnitContext differentiates from other interfaces.
	IsCompilationUnitContext()
}

type CompilationUnitContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompilationUnitContext() *CompilationUnitContext {
	var p = new(CompilationUnitContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_compilationUnit
	return p
}

func InitEmptyCompilationUnitContext(p *CompilationUnitContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_compilationUnit
}

func (*CompilationUnitContext) IsCompilationUnitContext() {}

func NewCompilationUnitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CompilationUnitContext {
	var p = new(CompilationUnitContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_compilationUnit

	return p
}

func (s *CompilationUnitContext) GetParser() antlr.Parser { return s.parser }

func (s *CompilationUnitContext) EOF() antlr.TerminalNode {
	return s.GetToken(Java8ParserEOF, 0)
}

func (s *CompilationUnitContext) PackageDeclaration() IPackageDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPackageDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPackageDeclarationContext)
}

func (s *CompilationUnitContext) AllImportDeclaration() []IImportDeclarationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IImportDeclarationContext); ok {
			len++
		}
	}

	tst := make([]IImportDeclarationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IImportDeclarationContext); ok {
			tst[i] = t.(IImportDeclarationContext)
			i++
		}
	}

	return tst
}

func (s *CompilationUnitContext) ImportDeclaration(i int) IImportDeclarationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IImportDeclarationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IImportDeclarationContext)
}

func (s *CompilationUnitContext) AllTypeDeclaration() []ITypeDeclarationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeDeclarationContext); ok {
			len++
		}
	}

	tst := make([]ITypeDeclarationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeDeclarationContext); ok {
			tst[i] = t.(ITypeDeclarationContext)
			i++
		}
	}

	return tst
}

func (s *CompilationUnitContext) TypeDeclaration(i int) ITypeDeclarationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeDeclarationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeDeclarationContext)
}

func (s *CompilationUnitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CompilationUnitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CompilationUnitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterCompilationUnit(s)
	}
}

func (s *CompilationUnitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitCompilationUnit(s)
	}
}

func (p *Java8Parser) CompilationUnit() (localctx ICompilationUnitContext) {
	localctx = NewCompilationUnitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, Java8ParserRULE_compilationUnit)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(714)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 36, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(713)
			p.PackageDeclaration()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(719)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Java8ParserIMPORT {
		{
			p.SetState(716)
			p.ImportDeclaration()
		}

		p.SetState(721)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(725)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-9223371151822749182) != 0) || _la == Java8ParserAT {
		{
			p.SetState(722)
			p.TypeDeclaration()
		}

		p.SetState(727)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(728)
		p.Match(Java8ParserEOF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPackageDeclarationContext is an interface to support dynamic dispatch.
type IPackageDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PACKAGE() antlr.TerminalNode
	PackageName() IPackageNameContext
	SEMI() antlr.TerminalNode
	AllPackageModifier() []IPackageModifierContext
	PackageModifier(i int) IPackageModifierContext

	// IsPackageDeclarationContext differentiates from other interfaces.
	IsPackageDeclarationContext()
}

type PackageDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageDeclarationContext() *PackageDeclarationContext {
	var p = new(PackageDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_packageDeclaration
	return p
}

func InitEmptyPackageDeclarationContext(p *PackageDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_packageDeclaration
}

func (*PackageDeclarationContext) IsPackageDeclarationContext() {}

func NewPackageDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageDeclarationContext {
	var p = new(PackageDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_packageDeclaration

	return p
}

func (s *PackageDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageDeclarationContext) PACKAGE() antlr.TerminalNode {
	return s.GetToken(Java8ParserPACKAGE, 0)
}

func (s *PackageDeclarationContext) PackageName() IPackageNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPackageNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPackageNameContext)
}

func (s *PackageDeclarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(Java8ParserSEMI, 0)
}

func (s *PackageDeclarationContext) AllPackageModifier() []IPackageModifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPackageModifierContext); ok {
			len++
		}
	}

	tst := make([]IPackageModifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPackageModifierContext); ok {
			tst[i] = t.(IPackageModifierContext)
			i++
		}
	}

	return tst
}

func (s *PackageDeclarationContext) PackageModifier(i int) IPackageModifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPackageModifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPackageModifierContext)
}

func (s *PackageDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterPackageDeclaration(s)
	}
}

func (s *PackageDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitPackageDeclaration(s)
	}
}

func (p *Java8Parser) PackageDeclaration() (localctx IPackageDeclarationContext) {
	localctx = NewPackageDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, Java8ParserRULE_packageDeclaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(733)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Java8ParserAT {
		{
			p.SetState(730)
			p.PackageModifier()
		}

		p.SetState(735)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(736)
		p.Match(Java8ParserPACKAGE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(737)
		p.packageName(0)
	}
	{
		p.SetState(738)
		p.Match(Java8ParserSEMI)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPackageModifierContext is an interface to support dynamic dispatch.
type IPackageModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Annotation() IAnnotationContext

	// IsPackageModifierContext differentiates from other interfaces.
	IsPackageModifierContext()
}

type PackageModifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageModifierContext() *PackageModifierContext {
	var p = new(PackageModifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_packageModifier
	return p
}

func InitEmptyPackageModifierContext(p *PackageModifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_packageModifier
}

func (*PackageModifierContext) IsPackageModifierContext() {}

func NewPackageModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageModifierContext {
	var p = new(PackageModifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_packageModifier

	return p
}

func (s *PackageModifierContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageModifierContext) Annotation() IAnnotationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *PackageModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageModifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterPackageModifier(s)
	}
}

func (s *PackageModifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitPackageModifier(s)
	}
}

func (p *Java8Parser) PackageModifier() (localctx IPackageModifierContext) {
	localctx = NewPackageModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, Java8ParserRULE_packageModifier)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(740)
		p.Annotation()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IImportDeclarationContext is an interface to support dynamic dispatch.
type IImportDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SingleTypeImportDeclaration() ISingleTypeImportDeclarationContext
	TypeImportOnDemandDeclaration() ITypeImportOnDemandDeclarationContext
	SingleStaticImportDeclaration() ISingleStaticImportDeclarationContext
	StaticImportOnDemandDeclaration() IStaticImportOnDemandDeclarationContext

	// IsImportDeclarationContext differentiates from other interfaces.
	IsImportDeclarationContext()
}

type ImportDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportDeclarationContext() *ImportDeclarationContext {
	var p = new(ImportDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_importDeclaration
	return p
}

func InitEmptyImportDeclarationContext(p *ImportDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_importDeclaration
}

func (*ImportDeclarationContext) IsImportDeclarationContext() {}

func NewImportDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportDeclarationContext {
	var p = new(ImportDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_importDeclaration

	return p
}

func (s *ImportDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportDeclarationContext) SingleTypeImportDeclaration() ISingleTypeImportDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISingleTypeImportDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISingleTypeImportDeclarationContext)
}

func (s *ImportDeclarationContext) TypeImportOnDemandDeclaration() ITypeImportOnDemandDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeImportOnDemandDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeImportOnDemandDeclarationContext)
}

func (s *ImportDeclarationContext) SingleStaticImportDeclaration() ISingleStaticImportDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISingleStaticImportDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISingleStaticImportDeclarationContext)
}

func (s *ImportDeclarationContext) StaticImportOnDemandDeclaration() IStaticImportOnDemandDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStaticImportOnDemandDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStaticImportOnDemandDeclarationContext)
}

func (s *ImportDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterImportDeclaration(s)
	}
}

func (s *ImportDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitImportDeclaration(s)
	}
}

func (p *Java8Parser) ImportDeclaration() (localctx IImportDeclarationContext) {
	localctx = NewImportDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, Java8ParserRULE_importDeclaration)
	p.SetState(746)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 40, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(742)
			p.SingleTypeImportDeclaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(743)
			p.TypeImportOnDemandDeclaration()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(744)
			p.SingleStaticImportDeclaration()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(745)
			p.StaticImportOnDemandDeclaration()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISingleTypeImportDeclarationContext is an interface to support dynamic dispatch.
type ISingleTypeImportDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IMPORT() antlr.TerminalNode
	TypeName() ITypeNameContext
	SEMI() antlr.TerminalNode

	// IsSingleTypeImportDeclarationContext differentiates from other interfaces.
	IsSingleTypeImportDeclarationContext()
}

type SingleTypeImportDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySingleTypeImportDeclarationContext() *SingleTypeImportDeclarationContext {
	var p = new(SingleTypeImportDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_singleTypeImportDeclaration
	return p
}

func InitEmptySingleTypeImportDeclarationContext(p *SingleTypeImportDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_singleTypeImportDeclaration
}

func (*SingleTypeImportDeclarationContext) IsSingleTypeImportDeclarationContext() {}

func NewSingleTypeImportDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SingleTypeImportDeclarationContext {
	var p = new(SingleTypeImportDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_singleTypeImportDeclaration

	return p
}

func (s *SingleTypeImportDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *SingleTypeImportDeclarationContext) IMPORT() antlr.TerminalNode {
	return s.GetToken(Java8ParserIMPORT, 0)
}

func (s *SingleTypeImportDeclarationContext) TypeName() ITypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *SingleTypeImportDeclarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(Java8ParserSEMI, 0)
}

func (s *SingleTypeImportDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SingleTypeImportDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SingleTypeImportDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterSingleTypeImportDeclaration(s)
	}
}

func (s *SingleTypeImportDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitSingleTypeImportDeclaration(s)
	}
}

func (p *Java8Parser) SingleTypeImportDeclaration() (localctx ISingleTypeImportDeclarationContext) {
	localctx = NewSingleTypeImportDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, Java8ParserRULE_singleTypeImportDeclaration)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(748)
		p.Match(Java8ParserIMPORT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(749)
		p.TypeName()
	}
	{
		p.SetState(750)
		p.Match(Java8ParserSEMI)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeImportOnDemandDeclarationContext is an interface to support dynamic dispatch.
type ITypeImportOnDemandDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IMPORT() antlr.TerminalNode
	PackageOrTypeName() IPackageOrTypeNameContext
	DOT() antlr.TerminalNode
	MUL() antlr.TerminalNode
	SEMI() antlr.TerminalNode

	// IsTypeImportOnDemandDeclarationContext differentiates from other interfaces.
	IsTypeImportOnDemandDeclarationContext()
}

type TypeImportOnDemandDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeImportOnDemandDeclarationContext() *TypeImportOnDemandDeclarationContext {
	var p = new(TypeImportOnDemandDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_typeImportOnDemandDeclaration
	return p
}

func InitEmptyTypeImportOnDemandDeclarationContext(p *TypeImportOnDemandDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_typeImportOnDemandDeclaration
}

func (*TypeImportOnDemandDeclarationContext) IsTypeImportOnDemandDeclarationContext() {}

func NewTypeImportOnDemandDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeImportOnDemandDeclarationContext {
	var p = new(TypeImportOnDemandDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_typeImportOnDemandDeclaration

	return p
}

func (s *TypeImportOnDemandDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeImportOnDemandDeclarationContext) IMPORT() antlr.TerminalNode {
	return s.GetToken(Java8ParserIMPORT, 0)
}

func (s *TypeImportOnDemandDeclarationContext) PackageOrTypeName() IPackageOrTypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPackageOrTypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPackageOrTypeNameContext)
}

func (s *TypeImportOnDemandDeclarationContext) DOT() antlr.TerminalNode {
	return s.GetToken(Java8ParserDOT, 0)
}

func (s *TypeImportOnDemandDeclarationContext) MUL() antlr.TerminalNode {
	return s.GetToken(Java8ParserMUL, 0)
}

func (s *TypeImportOnDemandDeclarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(Java8ParserSEMI, 0)
}

func (s *TypeImportOnDemandDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeImportOnDemandDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeImportOnDemandDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterTypeImportOnDemandDeclaration(s)
	}
}

func (s *TypeImportOnDemandDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitTypeImportOnDemandDeclaration(s)
	}
}

func (p *Java8Parser) TypeImportOnDemandDeclaration() (localctx ITypeImportOnDemandDeclarationContext) {
	localctx = NewTypeImportOnDemandDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, Java8ParserRULE_typeImportOnDemandDeclaration)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(752)
		p.Match(Java8ParserIMPORT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(753)
		p.packageOrTypeName(0)
	}
	{
		p.SetState(754)
		p.Match(Java8ParserDOT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(755)
		p.Match(Java8ParserMUL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(756)
		p.Match(Java8ParserSEMI)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISingleStaticImportDeclarationContext is an interface to support dynamic dispatch.
type ISingleStaticImportDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IMPORT() antlr.TerminalNode
	STATIC() antlr.TerminalNode
	TypeName() ITypeNameContext
	DOT() antlr.TerminalNode
	Identifier() antlr.TerminalNode
	SEMI() antlr.TerminalNode

	// IsSingleStaticImportDeclarationContext differentiates from other interfaces.
	IsSingleStaticImportDeclarationContext()
}

type SingleStaticImportDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySingleStaticImportDeclarationContext() *SingleStaticImportDeclarationContext {
	var p = new(SingleStaticImportDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_singleStaticImportDeclaration
	return p
}

func InitEmptySingleStaticImportDeclarationContext(p *SingleStaticImportDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_singleStaticImportDeclaration
}

func (*SingleStaticImportDeclarationContext) IsSingleStaticImportDeclarationContext() {}

func NewSingleStaticImportDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SingleStaticImportDeclarationContext {
	var p = new(SingleStaticImportDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_singleStaticImportDeclaration

	return p
}

func (s *SingleStaticImportDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *SingleStaticImportDeclarationContext) IMPORT() antlr.TerminalNode {
	return s.GetToken(Java8ParserIMPORT, 0)
}

func (s *SingleStaticImportDeclarationContext) STATIC() antlr.TerminalNode {
	return s.GetToken(Java8ParserSTATIC, 0)
}

func (s *SingleStaticImportDeclarationContext) TypeName() ITypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *SingleStaticImportDeclarationContext) DOT() antlr.TerminalNode {
	return s.GetToken(Java8ParserDOT, 0)
}

func (s *SingleStaticImportDeclarationContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *SingleStaticImportDeclarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(Java8ParserSEMI, 0)
}

func (s *SingleStaticImportDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SingleStaticImportDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SingleStaticImportDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterSingleStaticImportDeclaration(s)
	}
}

func (s *SingleStaticImportDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitSingleStaticImportDeclaration(s)
	}
}

func (p *Java8Parser) SingleStaticImportDeclaration() (localctx ISingleStaticImportDeclarationContext) {
	localctx = NewSingleStaticImportDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, Java8ParserRULE_singleStaticImportDeclaration)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(758)
		p.Match(Java8ParserIMPORT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(759)
		p.Match(Java8ParserSTATIC)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(760)
		p.TypeName()
	}
	{
		p.SetState(761)
		p.Match(Java8ParserDOT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(762)
		p.Match(Java8ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(763)
		p.Match(Java8ParserSEMI)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStaticImportOnDemandDeclarationContext is an interface to support dynamic dispatch.
type IStaticImportOnDemandDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IMPORT() antlr.TerminalNode
	STATIC() antlr.TerminalNode
	TypeName() ITypeNameContext
	DOT() antlr.TerminalNode
	MUL() antlr.TerminalNode
	SEMI() antlr.TerminalNode

	// IsStaticImportOnDemandDeclarationContext differentiates from other interfaces.
	IsStaticImportOnDemandDeclarationContext()
}

type StaticImportOnDemandDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStaticImportOnDemandDeclarationContext() *StaticImportOnDemandDeclarationContext {
	var p = new(StaticImportOnDemandDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_staticImportOnDemandDeclaration
	return p
}

func InitEmptyStaticImportOnDemandDeclarationContext(p *StaticImportOnDemandDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_staticImportOnDemandDeclaration
}

func (*StaticImportOnDemandDeclarationContext) IsStaticImportOnDemandDeclarationContext() {}

func NewStaticImportOnDemandDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StaticImportOnDemandDeclarationContext {
	var p = new(StaticImportOnDemandDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_staticImportOnDemandDeclaration

	return p
}

func (s *StaticImportOnDemandDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *StaticImportOnDemandDeclarationContext) IMPORT() antlr.TerminalNode {
	return s.GetToken(Java8ParserIMPORT, 0)
}

func (s *StaticImportOnDemandDeclarationContext) STATIC() antlr.TerminalNode {
	return s.GetToken(Java8ParserSTATIC, 0)
}

func (s *StaticImportOnDemandDeclarationContext) TypeName() ITypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *StaticImportOnDemandDeclarationContext) DOT() antlr.TerminalNode {
	return s.GetToken(Java8ParserDOT, 0)
}

func (s *StaticImportOnDemandDeclarationContext) MUL() antlr.TerminalNode {
	return s.GetToken(Java8ParserMUL, 0)
}

func (s *StaticImportOnDemandDeclarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(Java8ParserSEMI, 0)
}

func (s *StaticImportOnDemandDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticImportOnDemandDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StaticImportOnDemandDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterStaticImportOnDemandDeclaration(s)
	}
}

func (s *StaticImportOnDemandDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitStaticImportOnDemandDeclaration(s)
	}
}

func (p *Java8Parser) StaticImportOnDemandDeclaration() (localctx IStaticImportOnDemandDeclarationContext) {
	localctx = NewStaticImportOnDemandDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, Java8ParserRULE_staticImportOnDemandDeclaration)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(765)
		p.Match(Java8ParserIMPORT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(766)
		p.Match(Java8ParserSTATIC)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(767)
		p.TypeName()
	}
	{
		p.SetState(768)
		p.Match(Java8ParserDOT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(769)
		p.Match(Java8ParserMUL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(770)
		p.Match(Java8ParserSEMI)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeDeclarationContext is an interface to support dynamic dispatch.
type ITypeDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ClassDeclaration() IClassDeclarationContext
	InterfaceDeclaration() IInterfaceDeclarationContext
	SEMI() antlr.TerminalNode

	// IsTypeDeclarationContext differentiates from other interfaces.
	IsTypeDeclarationContext()
}

type TypeDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeDeclarationContext() *TypeDeclarationContext {
	var p = new(TypeDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_typeDeclaration
	return p
}

func InitEmptyTypeDeclarationContext(p *TypeDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_typeDeclaration
}

func (*TypeDeclarationContext) IsTypeDeclarationContext() {}

func NewTypeDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeDeclarationContext {
	var p = new(TypeDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_typeDeclaration

	return p
}

func (s *TypeDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeDeclarationContext) ClassDeclaration() IClassDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassDeclarationContext)
}

func (s *TypeDeclarationContext) InterfaceDeclaration() IInterfaceDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterfaceDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterfaceDeclarationContext)
}

func (s *TypeDeclarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(Java8ParserSEMI, 0)
}

func (s *TypeDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterTypeDeclaration(s)
	}
}

func (s *TypeDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitTypeDeclaration(s)
	}
}

func (p *Java8Parser) TypeDeclaration() (localctx ITypeDeclarationContext) {
	localctx = NewTypeDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, Java8ParserRULE_typeDeclaration)
	p.SetState(775)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 41, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(772)
			p.ClassDeclaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(773)
			p.InterfaceDeclaration()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(774)
			p.Match(Java8ParserSEMI)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IClassDeclarationContext is an interface to support dynamic dispatch.
type IClassDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NormalClassDeclaration() INormalClassDeclarationContext
	EnumDeclaration() IEnumDeclarationContext

	// IsClassDeclarationContext differentiates from other interfaces.
	IsClassDeclarationContext()
}

type ClassDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassDeclarationContext() *ClassDeclarationContext {
	var p = new(ClassDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_classDeclaration
	return p
}

func InitEmptyClassDeclarationContext(p *ClassDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_classDeclaration
}

func (*ClassDeclarationContext) IsClassDeclarationContext() {}

func NewClassDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassDeclarationContext {
	var p = new(ClassDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_classDeclaration

	return p
}

func (s *ClassDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassDeclarationContext) NormalClassDeclaration() INormalClassDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INormalClassDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INormalClassDeclarationContext)
}

func (s *ClassDeclarationContext) EnumDeclaration() IEnumDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumDeclarationContext)
}

func (s *ClassDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterClassDeclaration(s)
	}
}

func (s *ClassDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitClassDeclaration(s)
	}
}

func (p *Java8Parser) ClassDeclaration() (localctx IClassDeclarationContext) {
	localctx = NewClassDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, Java8ParserRULE_classDeclaration)
	p.SetState(779)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 42, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(777)
			p.NormalClassDeclaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(778)
			p.EnumDeclaration()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INormalClassDeclarationContext is an interface to support dynamic dispatch.
type INormalClassDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CLASS() antlr.TerminalNode
	Identifier() antlr.TerminalNode
	ClassBody() IClassBodyContext
	AllClassModifier() []IClassModifierContext
	ClassModifier(i int) IClassModifierContext
	TypeParameters() ITypeParametersContext
	Superclass() ISuperclassContext
	Superinterfaces() ISuperinterfacesContext

	// IsNormalClassDeclarationContext differentiates from other interfaces.
	IsNormalClassDeclarationContext()
}

type NormalClassDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNormalClassDeclarationContext() *NormalClassDeclarationContext {
	var p = new(NormalClassDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_normalClassDeclaration
	return p
}

func InitEmptyNormalClassDeclarationContext(p *NormalClassDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_normalClassDeclaration
}

func (*NormalClassDeclarationContext) IsNormalClassDeclarationContext() {}

func NewNormalClassDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NormalClassDeclarationContext {
	var p = new(NormalClassDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_normalClassDeclaration

	return p
}

func (s *NormalClassDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *NormalClassDeclarationContext) CLASS() antlr.TerminalNode {
	return s.GetToken(Java8ParserCLASS, 0)
}

func (s *NormalClassDeclarationContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *NormalClassDeclarationContext) ClassBody() IClassBodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassBodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassBodyContext)
}

func (s *NormalClassDeclarationContext) AllClassModifier() []IClassModifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IClassModifierContext); ok {
			len++
		}
	}

	tst := make([]IClassModifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IClassModifierContext); ok {
			tst[i] = t.(IClassModifierContext)
			i++
		}
	}

	return tst
}

func (s *NormalClassDeclarationContext) ClassModifier(i int) IClassModifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassModifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassModifierContext)
}

func (s *NormalClassDeclarationContext) TypeParameters() ITypeParametersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeParametersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeParametersContext)
}

func (s *NormalClassDeclarationContext) Superclass() ISuperclassContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISuperclassContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISuperclassContext)
}

func (s *NormalClassDeclarationContext) Superinterfaces() ISuperinterfacesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISuperinterfacesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISuperinterfacesContext)
}

func (s *NormalClassDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NormalClassDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NormalClassDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterNormalClassDeclaration(s)
	}
}

func (s *NormalClassDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitNormalClassDeclaration(s)
	}
}

func (p *Java8Parser) NormalClassDeclaration() (localctx INormalClassDeclarationContext) {
	localctx = NewNormalClassDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, Java8ParserRULE_normalClassDeclaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(784)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&884763525122) != 0) || _la == Java8ParserAT {
		{
			p.SetState(781)
			p.ClassModifier()
		}

		p.SetState(786)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(787)
		p.Match(Java8ParserCLASS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(788)
		p.Match(Java8ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(790)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserLT {
		{
			p.SetState(789)
			p.TypeParameters()
		}

	}
	p.SetState(793)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserEXTENDS {
		{
			p.SetState(792)
			p.Superclass()
		}

	}
	p.SetState(796)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserIMPLEMENTS {
		{
			p.SetState(795)
			p.Superinterfaces()
		}

	}
	{
		p.SetState(798)
		p.ClassBody()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IClassModifierContext is an interface to support dynamic dispatch.
type IClassModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Annotation() IAnnotationContext
	PUBLIC() antlr.TerminalNode
	PROTECTED() antlr.TerminalNode
	PRIVATE() antlr.TerminalNode
	ABSTRACT() antlr.TerminalNode
	STATIC() antlr.TerminalNode
	FINAL() antlr.TerminalNode
	STRICTFP() antlr.TerminalNode

	// IsClassModifierContext differentiates from other interfaces.
	IsClassModifierContext()
}

type ClassModifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassModifierContext() *ClassModifierContext {
	var p = new(ClassModifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_classModifier
	return p
}

func InitEmptyClassModifierContext(p *ClassModifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_classModifier
}

func (*ClassModifierContext) IsClassModifierContext() {}

func NewClassModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassModifierContext {
	var p = new(ClassModifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_classModifier

	return p
}

func (s *ClassModifierContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassModifierContext) Annotation() IAnnotationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *ClassModifierContext) PUBLIC() antlr.TerminalNode {
	return s.GetToken(Java8ParserPUBLIC, 0)
}

func (s *ClassModifierContext) PROTECTED() antlr.TerminalNode {
	return s.GetToken(Java8ParserPROTECTED, 0)
}

func (s *ClassModifierContext) PRIVATE() antlr.TerminalNode {
	return s.GetToken(Java8ParserPRIVATE, 0)
}

func (s *ClassModifierContext) ABSTRACT() antlr.TerminalNode {
	return s.GetToken(Java8ParserABSTRACT, 0)
}

func (s *ClassModifierContext) STATIC() antlr.TerminalNode {
	return s.GetToken(Java8ParserSTATIC, 0)
}

func (s *ClassModifierContext) FINAL() antlr.TerminalNode {
	return s.GetToken(Java8ParserFINAL, 0)
}

func (s *ClassModifierContext) STRICTFP() antlr.TerminalNode {
	return s.GetToken(Java8ParserSTRICTFP, 0)
}

func (s *ClassModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassModifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterClassModifier(s)
	}
}

func (s *ClassModifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitClassModifier(s)
	}
}

func (p *Java8Parser) ClassModifier() (localctx IClassModifierContext) {
	localctx = NewClassModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, Java8ParserRULE_classModifier)
	p.SetState(808)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case Java8ParserAT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(800)
			p.Annotation()
		}

	case Java8ParserPUBLIC:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(801)
			p.Match(Java8ParserPUBLIC)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserPROTECTED:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(802)
			p.Match(Java8ParserPROTECTED)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserPRIVATE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(803)
			p.Match(Java8ParserPRIVATE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserABSTRACT:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(804)
			p.Match(Java8ParserABSTRACT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserSTATIC:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(805)
			p.Match(Java8ParserSTATIC)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserFINAL:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(806)
			p.Match(Java8ParserFINAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserSTRICTFP:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(807)
			p.Match(Java8ParserSTRICTFP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeParametersContext is an interface to support dynamic dispatch.
type ITypeParametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LT() antlr.TerminalNode
	TypeParameterList() ITypeParameterListContext
	GT() antlr.TerminalNode

	// IsTypeParametersContext differentiates from other interfaces.
	IsTypeParametersContext()
}

type TypeParametersContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeParametersContext() *TypeParametersContext {
	var p = new(TypeParametersContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_typeParameters
	return p
}

func InitEmptyTypeParametersContext(p *TypeParametersContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_typeParameters
}

func (*TypeParametersContext) IsTypeParametersContext() {}

func NewTypeParametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeParametersContext {
	var p = new(TypeParametersContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_typeParameters

	return p
}

func (s *TypeParametersContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeParametersContext) LT() antlr.TerminalNode {
	return s.GetToken(Java8ParserLT, 0)
}

func (s *TypeParametersContext) TypeParameterList() ITypeParameterListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeParameterListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeParameterListContext)
}

func (s *TypeParametersContext) GT() antlr.TerminalNode {
	return s.GetToken(Java8ParserGT, 0)
}

func (s *TypeParametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeParametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeParametersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterTypeParameters(s)
	}
}

func (s *TypeParametersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitTypeParameters(s)
	}
}

func (p *Java8Parser) TypeParameters() (localctx ITypeParametersContext) {
	localctx = NewTypeParametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, Java8ParserRULE_typeParameters)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(810)
		p.Match(Java8ParserLT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(811)
		p.TypeParameterList()
	}
	{
		p.SetState(812)
		p.Match(Java8ParserGT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeParameterListContext is an interface to support dynamic dispatch.
type ITypeParameterListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllTypeParameter() []ITypeParameterContext
	TypeParameter(i int) ITypeParameterContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsTypeParameterListContext differentiates from other interfaces.
	IsTypeParameterListContext()
}

type TypeParameterListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeParameterListContext() *TypeParameterListContext {
	var p = new(TypeParameterListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_typeParameterList
	return p
}

func InitEmptyTypeParameterListContext(p *TypeParameterListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_typeParameterList
}

func (*TypeParameterListContext) IsTypeParameterListContext() {}

func NewTypeParameterListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeParameterListContext {
	var p = new(TypeParameterListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_typeParameterList

	return p
}

func (s *TypeParameterListContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeParameterListContext) AllTypeParameter() []ITypeParameterContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeParameterContext); ok {
			len++
		}
	}

	tst := make([]ITypeParameterContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeParameterContext); ok {
			tst[i] = t.(ITypeParameterContext)
			i++
		}
	}

	return tst
}

func (s *TypeParameterListContext) TypeParameter(i int) ITypeParameterContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeParameterContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeParameterContext)
}

func (s *TypeParameterListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserCOMMA)
}

func (s *TypeParameterListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserCOMMA, i)
}

func (s *TypeParameterListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeParameterListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeParameterListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterTypeParameterList(s)
	}
}

func (s *TypeParameterListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitTypeParameterList(s)
	}
}

func (p *Java8Parser) TypeParameterList() (localctx ITypeParameterListContext) {
	localctx = NewTypeParameterListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, Java8ParserRULE_typeParameterList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(814)
		p.TypeParameter()
	}
	p.SetState(819)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Java8ParserCOMMA {
		{
			p.SetState(815)
			p.Match(Java8ParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(816)
			p.TypeParameter()
		}

		p.SetState(821)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISuperclassContext is an interface to support dynamic dispatch.
type ISuperclassContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EXTENDS() antlr.TerminalNode
	ClassType() IClassTypeContext

	// IsSuperclassContext differentiates from other interfaces.
	IsSuperclassContext()
}

type SuperclassContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySuperclassContext() *SuperclassContext {
	var p = new(SuperclassContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_superclass
	return p
}

func InitEmptySuperclassContext(p *SuperclassContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_superclass
}

func (*SuperclassContext) IsSuperclassContext() {}

func NewSuperclassContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SuperclassContext {
	var p = new(SuperclassContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_superclass

	return p
}

func (s *SuperclassContext) GetParser() antlr.Parser { return s.parser }

func (s *SuperclassContext) EXTENDS() antlr.TerminalNode {
	return s.GetToken(Java8ParserEXTENDS, 0)
}

func (s *SuperclassContext) ClassType() IClassTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassTypeContext)
}

func (s *SuperclassContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SuperclassContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SuperclassContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterSuperclass(s)
	}
}

func (s *SuperclassContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitSuperclass(s)
	}
}

func (p *Java8Parser) Superclass() (localctx ISuperclassContext) {
	localctx = NewSuperclassContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, Java8ParserRULE_superclass)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(822)
		p.Match(Java8ParserEXTENDS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(823)
		p.ClassType()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISuperinterfacesContext is an interface to support dynamic dispatch.
type ISuperinterfacesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IMPLEMENTS() antlr.TerminalNode
	InterfaceTypeList() IInterfaceTypeListContext

	// IsSuperinterfacesContext differentiates from other interfaces.
	IsSuperinterfacesContext()
}

type SuperinterfacesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySuperinterfacesContext() *SuperinterfacesContext {
	var p = new(SuperinterfacesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_superinterfaces
	return p
}

func InitEmptySuperinterfacesContext(p *SuperinterfacesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_superinterfaces
}

func (*SuperinterfacesContext) IsSuperinterfacesContext() {}

func NewSuperinterfacesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SuperinterfacesContext {
	var p = new(SuperinterfacesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_superinterfaces

	return p
}

func (s *SuperinterfacesContext) GetParser() antlr.Parser { return s.parser }

func (s *SuperinterfacesContext) IMPLEMENTS() antlr.TerminalNode {
	return s.GetToken(Java8ParserIMPLEMENTS, 0)
}

func (s *SuperinterfacesContext) InterfaceTypeList() IInterfaceTypeListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterfaceTypeListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterfaceTypeListContext)
}

func (s *SuperinterfacesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SuperinterfacesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SuperinterfacesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterSuperinterfaces(s)
	}
}

func (s *SuperinterfacesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitSuperinterfaces(s)
	}
}

func (p *Java8Parser) Superinterfaces() (localctx ISuperinterfacesContext) {
	localctx = NewSuperinterfacesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, Java8ParserRULE_superinterfaces)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(825)
		p.Match(Java8ParserIMPLEMENTS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(826)
		p.InterfaceTypeList()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInterfaceTypeListContext is an interface to support dynamic dispatch.
type IInterfaceTypeListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllInterfaceType() []IInterfaceTypeContext
	InterfaceType(i int) IInterfaceTypeContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsInterfaceTypeListContext differentiates from other interfaces.
	IsInterfaceTypeListContext()
}

type InterfaceTypeListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceTypeListContext() *InterfaceTypeListContext {
	var p = new(InterfaceTypeListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_interfaceTypeList
	return p
}

func InitEmptyInterfaceTypeListContext(p *InterfaceTypeListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_interfaceTypeList
}

func (*InterfaceTypeListContext) IsInterfaceTypeListContext() {}

func NewInterfaceTypeListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceTypeListContext {
	var p = new(InterfaceTypeListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_interfaceTypeList

	return p
}

func (s *InterfaceTypeListContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceTypeListContext) AllInterfaceType() []IInterfaceTypeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IInterfaceTypeContext); ok {
			len++
		}
	}

	tst := make([]IInterfaceTypeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IInterfaceTypeContext); ok {
			tst[i] = t.(IInterfaceTypeContext)
			i++
		}
	}

	return tst
}

func (s *InterfaceTypeListContext) InterfaceType(i int) IInterfaceTypeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterfaceTypeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterfaceTypeContext)
}

func (s *InterfaceTypeListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserCOMMA)
}

func (s *InterfaceTypeListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserCOMMA, i)
}

func (s *InterfaceTypeListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceTypeListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceTypeListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterInterfaceTypeList(s)
	}
}

func (s *InterfaceTypeListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitInterfaceTypeList(s)
	}
}

func (p *Java8Parser) InterfaceTypeList() (localctx IInterfaceTypeListContext) {
	localctx = NewInterfaceTypeListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, Java8ParserRULE_interfaceTypeList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(828)
		p.InterfaceType()
	}
	p.SetState(833)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Java8ParserCOMMA {
		{
			p.SetState(829)
			p.Match(Java8ParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(830)
			p.InterfaceType()
		}

		p.SetState(835)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IClassBodyContext is an interface to support dynamic dispatch.
type IClassBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	AllClassBodyDeclaration() []IClassBodyDeclarationContext
	ClassBodyDeclaration(i int) IClassBodyDeclarationContext

	// IsClassBodyContext differentiates from other interfaces.
	IsClassBodyContext()
}

type ClassBodyContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassBodyContext() *ClassBodyContext {
	var p = new(ClassBodyContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_classBody
	return p
}

func InitEmptyClassBodyContext(p *ClassBodyContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_classBody
}

func (*ClassBodyContext) IsClassBodyContext() {}

func NewClassBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassBodyContext {
	var p = new(ClassBodyContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_classBody

	return p
}

func (s *ClassBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassBodyContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(Java8ParserLBRACE, 0)
}

func (s *ClassBodyContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(Java8ParserRBRACE, 0)
}

func (s *ClassBodyContext) AllClassBodyDeclaration() []IClassBodyDeclarationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IClassBodyDeclarationContext); ok {
			len++
		}
	}

	tst := make([]IClassBodyDeclarationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IClassBodyDeclarationContext); ok {
			tst[i] = t.(IClassBodyDeclarationContext)
			i++
		}
	}

	return tst
}

func (s *ClassBodyContext) ClassBodyDeclaration(i int) IClassBodyDeclarationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassBodyDeclarationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassBodyDeclarationContext)
}

func (s *ClassBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassBodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterClassBody(s)
	}
}

func (s *ClassBodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitClassBody(s)
	}
}

func (p *Java8Parser) ClassBody() (localctx IClassBodyContext) {
	localctx = NewClassBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, Java8ParserRULE_classBody)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(836)
		p.Match(Java8ParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(840)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8645991068613655766) != 0) || ((int64((_la-68)) & ^0x3f) == 0 && ((int64(1)<<(_la-68))&51539607553) != 0) {
		{
			p.SetState(837)
			p.ClassBodyDeclaration()
		}

		p.SetState(842)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(843)
		p.Match(Java8ParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IClassBodyDeclarationContext is an interface to support dynamic dispatch.
type IClassBodyDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ClassMemberDeclaration() IClassMemberDeclarationContext
	InstanceInitializer() IInstanceInitializerContext
	StaticInitializer() IStaticInitializerContext
	ConstructorDeclaration() IConstructorDeclarationContext

	// IsClassBodyDeclarationContext differentiates from other interfaces.
	IsClassBodyDeclarationContext()
}

type ClassBodyDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassBodyDeclarationContext() *ClassBodyDeclarationContext {
	var p = new(ClassBodyDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_classBodyDeclaration
	return p
}

func InitEmptyClassBodyDeclarationContext(p *ClassBodyDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_classBodyDeclaration
}

func (*ClassBodyDeclarationContext) IsClassBodyDeclarationContext() {}

func NewClassBodyDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassBodyDeclarationContext {
	var p = new(ClassBodyDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_classBodyDeclaration

	return p
}

func (s *ClassBodyDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassBodyDeclarationContext) ClassMemberDeclaration() IClassMemberDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassMemberDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassMemberDeclarationContext)
}

func (s *ClassBodyDeclarationContext) InstanceInitializer() IInstanceInitializerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInstanceInitializerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInstanceInitializerContext)
}

func (s *ClassBodyDeclarationContext) StaticInitializer() IStaticInitializerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStaticInitializerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStaticInitializerContext)
}

func (s *ClassBodyDeclarationContext) ConstructorDeclaration() IConstructorDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstructorDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstructorDeclarationContext)
}

func (s *ClassBodyDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassBodyDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassBodyDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterClassBodyDeclaration(s)
	}
}

func (s *ClassBodyDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitClassBodyDeclaration(s)
	}
}

func (p *Java8Parser) ClassBodyDeclaration() (localctx IClassBodyDeclarationContext) {
	localctx = NewClassBodyDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, Java8ParserRULE_classBodyDeclaration)
	p.SetState(849)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 51, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(845)
			p.ClassMemberDeclaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(846)
			p.InstanceInitializer()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(847)
			p.StaticInitializer()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(848)
			p.ConstructorDeclaration()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IClassMemberDeclarationContext is an interface to support dynamic dispatch.
type IClassMemberDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FieldDeclaration() IFieldDeclarationContext
	MethodDeclaration() IMethodDeclarationContext
	ClassDeclaration() IClassDeclarationContext
	InterfaceDeclaration() IInterfaceDeclarationContext
	SEMI() antlr.TerminalNode

	// IsClassMemberDeclarationContext differentiates from other interfaces.
	IsClassMemberDeclarationContext()
}

type ClassMemberDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassMemberDeclarationContext() *ClassMemberDeclarationContext {
	var p = new(ClassMemberDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_classMemberDeclaration
	return p
}

func InitEmptyClassMemberDeclarationContext(p *ClassMemberDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_classMemberDeclaration
}

func (*ClassMemberDeclarationContext) IsClassMemberDeclarationContext() {}

func NewClassMemberDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassMemberDeclarationContext {
	var p = new(ClassMemberDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_classMemberDeclaration

	return p
}

func (s *ClassMemberDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassMemberDeclarationContext) FieldDeclaration() IFieldDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFieldDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFieldDeclarationContext)
}

func (s *ClassMemberDeclarationContext) MethodDeclaration() IMethodDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMethodDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMethodDeclarationContext)
}

func (s *ClassMemberDeclarationContext) ClassDeclaration() IClassDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassDeclarationContext)
}

func (s *ClassMemberDeclarationContext) InterfaceDeclaration() IInterfaceDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterfaceDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterfaceDeclarationContext)
}

func (s *ClassMemberDeclarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(Java8ParserSEMI, 0)
}

func (s *ClassMemberDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassMemberDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassMemberDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterClassMemberDeclaration(s)
	}
}

func (s *ClassMemberDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitClassMemberDeclaration(s)
	}
}

func (p *Java8Parser) ClassMemberDeclaration() (localctx IClassMemberDeclarationContext) {
	localctx = NewClassMemberDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, Java8ParserRULE_classMemberDeclaration)
	p.SetState(856)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 52, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(851)
			p.FieldDeclaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(852)
			p.MethodDeclaration()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(853)
			p.ClassDeclaration()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(854)
			p.InterfaceDeclaration()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(855)
			p.Match(Java8ParserSEMI)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFieldDeclarationContext is an interface to support dynamic dispatch.
type IFieldDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UnannType() IUnannTypeContext
	VariableDeclaratorList() IVariableDeclaratorListContext
	SEMI() antlr.TerminalNode
	AllFieldModifier() []IFieldModifierContext
	FieldModifier(i int) IFieldModifierContext

	// IsFieldDeclarationContext differentiates from other interfaces.
	IsFieldDeclarationContext()
}

type FieldDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldDeclarationContext() *FieldDeclarationContext {
	var p = new(FieldDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_fieldDeclaration
	return p
}

func InitEmptyFieldDeclarationContext(p *FieldDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_fieldDeclaration
}

func (*FieldDeclarationContext) IsFieldDeclarationContext() {}

func NewFieldDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldDeclarationContext {
	var p = new(FieldDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_fieldDeclaration

	return p
}

func (s *FieldDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldDeclarationContext) UnannType() IUnannTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnannTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnannTypeContext)
}

func (s *FieldDeclarationContext) VariableDeclaratorList() IVariableDeclaratorListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableDeclaratorListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableDeclaratorListContext)
}

func (s *FieldDeclarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(Java8ParserSEMI, 0)
}

func (s *FieldDeclarationContext) AllFieldModifier() []IFieldModifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFieldModifierContext); ok {
			len++
		}
	}

	tst := make([]IFieldModifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFieldModifierContext); ok {
			tst[i] = t.(IFieldModifierContext)
			i++
		}
	}

	return tst
}

func (s *FieldDeclarationContext) FieldModifier(i int) IFieldModifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFieldModifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFieldModifierContext)
}

func (s *FieldDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterFieldDeclaration(s)
	}
}

func (s *FieldDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitFieldDeclaration(s)
	}
}

func (p *Java8Parser) FieldDeclaration() (localctx IFieldDeclarationContext) {
	localctx = NewFieldDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, Java8ParserRULE_fieldDeclaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(861)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&633653705310208) != 0) || _la == Java8ParserAT {
		{
			p.SetState(858)
			p.FieldModifier()
		}

		p.SetState(863)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(864)
		p.UnannType()
	}
	{
		p.SetState(865)
		p.VariableDeclaratorList()
	}
	{
		p.SetState(866)
		p.Match(Java8ParserSEMI)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFieldModifierContext is an interface to support dynamic dispatch.
type IFieldModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Annotation() IAnnotationContext
	PUBLIC() antlr.TerminalNode
	PROTECTED() antlr.TerminalNode
	PRIVATE() antlr.TerminalNode
	STATIC() antlr.TerminalNode
	FINAL() antlr.TerminalNode
	TRANSIENT() antlr.TerminalNode
	VOLATILE() antlr.TerminalNode

	// IsFieldModifierContext differentiates from other interfaces.
	IsFieldModifierContext()
}

type FieldModifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldModifierContext() *FieldModifierContext {
	var p = new(FieldModifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_fieldModifier
	return p
}

func InitEmptyFieldModifierContext(p *FieldModifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_fieldModifier
}

func (*FieldModifierContext) IsFieldModifierContext() {}

func NewFieldModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldModifierContext {
	var p = new(FieldModifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_fieldModifier

	return p
}

func (s *FieldModifierContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldModifierContext) Annotation() IAnnotationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *FieldModifierContext) PUBLIC() antlr.TerminalNode {
	return s.GetToken(Java8ParserPUBLIC, 0)
}

func (s *FieldModifierContext) PROTECTED() antlr.TerminalNode {
	return s.GetToken(Java8ParserPROTECTED, 0)
}

func (s *FieldModifierContext) PRIVATE() antlr.TerminalNode {
	return s.GetToken(Java8ParserPRIVATE, 0)
}

func (s *FieldModifierContext) STATIC() antlr.TerminalNode {
	return s.GetToken(Java8ParserSTATIC, 0)
}

func (s *FieldModifierContext) FINAL() antlr.TerminalNode {
	return s.GetToken(Java8ParserFINAL, 0)
}

func (s *FieldModifierContext) TRANSIENT() antlr.TerminalNode {
	return s.GetToken(Java8ParserTRANSIENT, 0)
}

func (s *FieldModifierContext) VOLATILE() antlr.TerminalNode {
	return s.GetToken(Java8ParserVOLATILE, 0)
}

func (s *FieldModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldModifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterFieldModifier(s)
	}
}

func (s *FieldModifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitFieldModifier(s)
	}
}

func (p *Java8Parser) FieldModifier() (localctx IFieldModifierContext) {
	localctx = NewFieldModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, Java8ParserRULE_fieldModifier)
	p.SetState(876)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case Java8ParserAT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(868)
			p.Annotation()
		}

	case Java8ParserPUBLIC:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(869)
			p.Match(Java8ParserPUBLIC)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserPROTECTED:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(870)
			p.Match(Java8ParserPROTECTED)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserPRIVATE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(871)
			p.Match(Java8ParserPRIVATE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserSTATIC:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(872)
			p.Match(Java8ParserSTATIC)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserFINAL:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(873)
			p.Match(Java8ParserFINAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserTRANSIENT:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(874)
			p.Match(Java8ParserTRANSIENT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserVOLATILE:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(875)
			p.Match(Java8ParserVOLATILE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVariableDeclaratorListContext is an interface to support dynamic dispatch.
type IVariableDeclaratorListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllVariableDeclarator() []IVariableDeclaratorContext
	VariableDeclarator(i int) IVariableDeclaratorContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsVariableDeclaratorListContext differentiates from other interfaces.
	IsVariableDeclaratorListContext()
}

type VariableDeclaratorListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclaratorListContext() *VariableDeclaratorListContext {
	var p = new(VariableDeclaratorListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_variableDeclaratorList
	return p
}

func InitEmptyVariableDeclaratorListContext(p *VariableDeclaratorListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_variableDeclaratorList
}

func (*VariableDeclaratorListContext) IsVariableDeclaratorListContext() {}

func NewVariableDeclaratorListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclaratorListContext {
	var p = new(VariableDeclaratorListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_variableDeclaratorList

	return p
}

func (s *VariableDeclaratorListContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclaratorListContext) AllVariableDeclarator() []IVariableDeclaratorContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVariableDeclaratorContext); ok {
			len++
		}
	}

	tst := make([]IVariableDeclaratorContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVariableDeclaratorContext); ok {
			tst[i] = t.(IVariableDeclaratorContext)
			i++
		}
	}

	return tst
}

func (s *VariableDeclaratorListContext) VariableDeclarator(i int) IVariableDeclaratorContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableDeclaratorContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableDeclaratorContext)
}

func (s *VariableDeclaratorListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserCOMMA)
}

func (s *VariableDeclaratorListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserCOMMA, i)
}

func (s *VariableDeclaratorListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclaratorListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclaratorListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterVariableDeclaratorList(s)
	}
}

func (s *VariableDeclaratorListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitVariableDeclaratorList(s)
	}
}

func (p *Java8Parser) VariableDeclaratorList() (localctx IVariableDeclaratorListContext) {
	localctx = NewVariableDeclaratorListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, Java8ParserRULE_variableDeclaratorList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(878)
		p.VariableDeclarator()
	}
	p.SetState(883)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Java8ParserCOMMA {
		{
			p.SetState(879)
			p.Match(Java8ParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(880)
			p.VariableDeclarator()
		}

		p.SetState(885)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVariableDeclaratorContext is an interface to support dynamic dispatch.
type IVariableDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	VariableDeclaratorId() IVariableDeclaratorIdContext
	ASSIGN() antlr.TerminalNode
	VariableInitializer() IVariableInitializerContext

	// IsVariableDeclaratorContext differentiates from other interfaces.
	IsVariableDeclaratorContext()
}

type VariableDeclaratorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclaratorContext() *VariableDeclaratorContext {
	var p = new(VariableDeclaratorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_variableDeclarator
	return p
}

func InitEmptyVariableDeclaratorContext(p *VariableDeclaratorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_variableDeclarator
}

func (*VariableDeclaratorContext) IsVariableDeclaratorContext() {}

func NewVariableDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclaratorContext {
	var p = new(VariableDeclaratorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_variableDeclarator

	return p
}

func (s *VariableDeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclaratorContext) VariableDeclaratorId() IVariableDeclaratorIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableDeclaratorIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableDeclaratorIdContext)
}

func (s *VariableDeclaratorContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(Java8ParserASSIGN, 0)
}

func (s *VariableDeclaratorContext) VariableInitializer() IVariableInitializerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableInitializerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableInitializerContext)
}

func (s *VariableDeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterVariableDeclarator(s)
	}
}

func (s *VariableDeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitVariableDeclarator(s)
	}
}

func (p *Java8Parser) VariableDeclarator() (localctx IVariableDeclaratorContext) {
	localctx = NewVariableDeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, Java8ParserRULE_variableDeclarator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(886)
		p.VariableDeclaratorId()
	}
	p.SetState(889)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserASSIGN {
		{
			p.SetState(887)
			p.Match(Java8ParserASSIGN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(888)
			p.VariableInitializer()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVariableDeclaratorIdContext is an interface to support dynamic dispatch.
type IVariableDeclaratorIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode
	Dims() IDimsContext

	// IsVariableDeclaratorIdContext differentiates from other interfaces.
	IsVariableDeclaratorIdContext()
}

type VariableDeclaratorIdContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclaratorIdContext() *VariableDeclaratorIdContext {
	var p = new(VariableDeclaratorIdContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_variableDeclaratorId
	return p
}

func InitEmptyVariableDeclaratorIdContext(p *VariableDeclaratorIdContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_variableDeclaratorId
}

func (*VariableDeclaratorIdContext) IsVariableDeclaratorIdContext() {}

func NewVariableDeclaratorIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclaratorIdContext {
	var p = new(VariableDeclaratorIdContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_variableDeclaratorId

	return p
}

func (s *VariableDeclaratorIdContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclaratorIdContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *VariableDeclaratorIdContext) Dims() IDimsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDimsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDimsContext)
}

func (s *VariableDeclaratorIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclaratorIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclaratorIdContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterVariableDeclaratorId(s)
	}
}

func (s *VariableDeclaratorIdContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitVariableDeclaratorId(s)
	}
}

func (p *Java8Parser) VariableDeclaratorId() (localctx IVariableDeclaratorIdContext) {
	localctx = NewVariableDeclaratorIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, Java8ParserRULE_variableDeclaratorId)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(891)
		p.Match(Java8ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(893)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserLBRACK || _la == Java8ParserAT {
		{
			p.SetState(892)
			p.Dims()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVariableInitializerContext is an interface to support dynamic dispatch.
type IVariableInitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	ArrayInitializer() IArrayInitializerContext

	// IsVariableInitializerContext differentiates from other interfaces.
	IsVariableInitializerContext()
}

type VariableInitializerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableInitializerContext() *VariableInitializerContext {
	var p = new(VariableInitializerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_variableInitializer
	return p
}

func InitEmptyVariableInitializerContext(p *VariableInitializerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_variableInitializer
}

func (*VariableInitializerContext) IsVariableInitializerContext() {}

func NewVariableInitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableInitializerContext {
	var p = new(VariableInitializerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_variableInitializer

	return p
}

func (s *VariableInitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableInitializerContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *VariableInitializerContext) ArrayInitializer() IArrayInitializerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayInitializerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayInitializerContext)
}

func (s *VariableInitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableInitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableInitializerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterVariableInitializer(s)
	}
}

func (s *VariableInitializerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitVariableInitializer(s)
	}
}

func (p *Java8Parser) VariableInitializer() (localctx IVariableInitializerContext) {
	localctx = NewVariableInitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, Java8ParserRULE_variableInitializer)
	p.SetState(897)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case Java8ParserBOOLEAN, Java8ParserBYTE, Java8ParserCHAR, Java8ParserDOUBLE, Java8ParserFLOAT, Java8ParserINT, Java8ParserLONG, Java8ParserNEW, Java8ParserSHORT, Java8ParserSUPER, Java8ParserTHIS, Java8ParserVOID, Java8ParserIntegerLiteral, Java8ParserFloatingPointLiteral, Java8ParserBooleanLiteral, Java8ParserCharacterLiteral, Java8ParserStringLiteral, Java8ParserNullLiteral, Java8ParserLPAREN, Java8ParserBANG, Java8ParserTILDE, Java8ParserINC, Java8ParserDEC, Java8ParserADD, Java8ParserSUB, Java8ParserIdentifier, Java8ParserAT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(895)
			p.Expression()
		}

	case Java8ParserLBRACE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(896)
			p.ArrayInitializer()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnannTypeContext is an interface to support dynamic dispatch.
type IUnannTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UnannPrimitiveType() IUnannPrimitiveTypeContext
	UnannReferenceType() IUnannReferenceTypeContext

	// IsUnannTypeContext differentiates from other interfaces.
	IsUnannTypeContext()
}

type UnannTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnannTypeContext() *UnannTypeContext {
	var p = new(UnannTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_unannType
	return p
}

func InitEmptyUnannTypeContext(p *UnannTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_unannType
}

func (*UnannTypeContext) IsUnannTypeContext() {}

func NewUnannTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnannTypeContext {
	var p = new(UnannTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_unannType

	return p
}

func (s *UnannTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *UnannTypeContext) UnannPrimitiveType() IUnannPrimitiveTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnannPrimitiveTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnannPrimitiveTypeContext)
}

func (s *UnannTypeContext) UnannReferenceType() IUnannReferenceTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnannReferenceTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnannReferenceTypeContext)
}

func (s *UnannTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnannTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnannTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterUnannType(s)
	}
}

func (s *UnannTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitUnannType(s)
	}
}

func (p *Java8Parser) UnannType() (localctx IUnannTypeContext) {
	localctx = NewUnannTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, Java8ParserRULE_unannType)
	p.SetState(901)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 59, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(899)
			p.UnannPrimitiveType()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(900)
			p.UnannReferenceType()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnannPrimitiveTypeContext is an interface to support dynamic dispatch.
type IUnannPrimitiveTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NumericType() INumericTypeContext
	BOOLEAN() antlr.TerminalNode

	// IsUnannPrimitiveTypeContext differentiates from other interfaces.
	IsUnannPrimitiveTypeContext()
}

type UnannPrimitiveTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnannPrimitiveTypeContext() *UnannPrimitiveTypeContext {
	var p = new(UnannPrimitiveTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_unannPrimitiveType
	return p
}

func InitEmptyUnannPrimitiveTypeContext(p *UnannPrimitiveTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_unannPrimitiveType
}

func (*UnannPrimitiveTypeContext) IsUnannPrimitiveTypeContext() {}

func NewUnannPrimitiveTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnannPrimitiveTypeContext {
	var p = new(UnannPrimitiveTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_unannPrimitiveType

	return p
}

func (s *UnannPrimitiveTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *UnannPrimitiveTypeContext) NumericType() INumericTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericTypeContext)
}

func (s *UnannPrimitiveTypeContext) BOOLEAN() antlr.TerminalNode {
	return s.GetToken(Java8ParserBOOLEAN, 0)
}

func (s *UnannPrimitiveTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnannPrimitiveTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnannPrimitiveTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterUnannPrimitiveType(s)
	}
}

func (s *UnannPrimitiveTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitUnannPrimitiveType(s)
	}
}

func (p *Java8Parser) UnannPrimitiveType() (localctx IUnannPrimitiveTypeContext) {
	localctx = NewUnannPrimitiveTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, Java8ParserRULE_unannPrimitiveType)
	p.SetState(905)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case Java8ParserBYTE, Java8ParserCHAR, Java8ParserDOUBLE, Java8ParserFLOAT, Java8ParserINT, Java8ParserLONG, Java8ParserSHORT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(903)
			p.NumericType()
		}

	case Java8ParserBOOLEAN:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(904)
			p.Match(Java8ParserBOOLEAN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnannReferenceTypeContext is an interface to support dynamic dispatch.
type IUnannReferenceTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UnannClassOrInterfaceType() IUnannClassOrInterfaceTypeContext
	UnannTypeVariable() IUnannTypeVariableContext
	UnannArrayType() IUnannArrayTypeContext

	// IsUnannReferenceTypeContext differentiates from other interfaces.
	IsUnannReferenceTypeContext()
}

type UnannReferenceTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnannReferenceTypeContext() *UnannReferenceTypeContext {
	var p = new(UnannReferenceTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_unannReferenceType
	return p
}

func InitEmptyUnannReferenceTypeContext(p *UnannReferenceTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_unannReferenceType
}

func (*UnannReferenceTypeContext) IsUnannReferenceTypeContext() {}

func NewUnannReferenceTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnannReferenceTypeContext {
	var p = new(UnannReferenceTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_unannReferenceType

	return p
}

func (s *UnannReferenceTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *UnannReferenceTypeContext) UnannClassOrInterfaceType() IUnannClassOrInterfaceTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnannClassOrInterfaceTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnannClassOrInterfaceTypeContext)
}

func (s *UnannReferenceTypeContext) UnannTypeVariable() IUnannTypeVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnannTypeVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnannTypeVariableContext)
}

func (s *UnannReferenceTypeContext) UnannArrayType() IUnannArrayTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnannArrayTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnannArrayTypeContext)
}

func (s *UnannReferenceTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnannReferenceTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnannReferenceTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterUnannReferenceType(s)
	}
}

func (s *UnannReferenceTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitUnannReferenceType(s)
	}
}

func (p *Java8Parser) UnannReferenceType() (localctx IUnannReferenceTypeContext) {
	localctx = NewUnannReferenceTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, Java8ParserRULE_unannReferenceType)
	p.SetState(910)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 61, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(907)
			p.UnannClassOrInterfaceType()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(908)
			p.UnannTypeVariable()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(909)
			p.UnannArrayType()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnannClassOrInterfaceTypeContext is an interface to support dynamic dispatch.
type IUnannClassOrInterfaceTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UnannClassType_lfno_unannClassOrInterfaceType() IUnannClassType_lfno_unannClassOrInterfaceTypeContext
	UnannInterfaceType_lfno_unannClassOrInterfaceType() IUnannInterfaceType_lfno_unannClassOrInterfaceTypeContext
	AllUnannClassType_lf_unannClassOrInterfaceType() []IUnannClassType_lf_unannClassOrInterfaceTypeContext
	UnannClassType_lf_unannClassOrInterfaceType(i int) IUnannClassType_lf_unannClassOrInterfaceTypeContext
	AllUnannInterfaceType_lf_unannClassOrInterfaceType() []IUnannInterfaceType_lf_unannClassOrInterfaceTypeContext
	UnannInterfaceType_lf_unannClassOrInterfaceType(i int) IUnannInterfaceType_lf_unannClassOrInterfaceTypeContext

	// IsUnannClassOrInterfaceTypeContext differentiates from other interfaces.
	IsUnannClassOrInterfaceTypeContext()
}

type UnannClassOrInterfaceTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnannClassOrInterfaceTypeContext() *UnannClassOrInterfaceTypeContext {
	var p = new(UnannClassOrInterfaceTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_unannClassOrInterfaceType
	return p
}

func InitEmptyUnannClassOrInterfaceTypeContext(p *UnannClassOrInterfaceTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_unannClassOrInterfaceType
}

func (*UnannClassOrInterfaceTypeContext) IsUnannClassOrInterfaceTypeContext() {}

func NewUnannClassOrInterfaceTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnannClassOrInterfaceTypeContext {
	var p = new(UnannClassOrInterfaceTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_unannClassOrInterfaceType

	return p
}

func (s *UnannClassOrInterfaceTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *UnannClassOrInterfaceTypeContext) UnannClassType_lfno_unannClassOrInterfaceType() IUnannClassType_lfno_unannClassOrInterfaceTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnannClassType_lfno_unannClassOrInterfaceTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnannClassType_lfno_unannClassOrInterfaceTypeContext)
}

func (s *UnannClassOrInterfaceTypeContext) UnannInterfaceType_lfno_unannClassOrInterfaceType() IUnannInterfaceType_lfno_unannClassOrInterfaceTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnannInterfaceType_lfno_unannClassOrInterfaceTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnannInterfaceType_lfno_unannClassOrInterfaceTypeContext)
}

func (s *UnannClassOrInterfaceTypeContext) AllUnannClassType_lf_unannClassOrInterfaceType() []IUnannClassType_lf_unannClassOrInterfaceTypeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IUnannClassType_lf_unannClassOrInterfaceTypeContext); ok {
			len++
		}
	}

	tst := make([]IUnannClassType_lf_unannClassOrInterfaceTypeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IUnannClassType_lf_unannClassOrInterfaceTypeContext); ok {
			tst[i] = t.(IUnannClassType_lf_unannClassOrInterfaceTypeContext)
			i++
		}
	}

	return tst
}

func (s *UnannClassOrInterfaceTypeContext) UnannClassType_lf_unannClassOrInterfaceType(i int) IUnannClassType_lf_unannClassOrInterfaceTypeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnannClassType_lf_unannClassOrInterfaceTypeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnannClassType_lf_unannClassOrInterfaceTypeContext)
}

func (s *UnannClassOrInterfaceTypeContext) AllUnannInterfaceType_lf_unannClassOrInterfaceType() []IUnannInterfaceType_lf_unannClassOrInterfaceTypeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IUnannInterfaceType_lf_unannClassOrInterfaceTypeContext); ok {
			len++
		}
	}

	tst := make([]IUnannInterfaceType_lf_unannClassOrInterfaceTypeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IUnannInterfaceType_lf_unannClassOrInterfaceTypeContext); ok {
			tst[i] = t.(IUnannInterfaceType_lf_unannClassOrInterfaceTypeContext)
			i++
		}
	}

	return tst
}

func (s *UnannClassOrInterfaceTypeContext) UnannInterfaceType_lf_unannClassOrInterfaceType(i int) IUnannInterfaceType_lf_unannClassOrInterfaceTypeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnannInterfaceType_lf_unannClassOrInterfaceTypeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnannInterfaceType_lf_unannClassOrInterfaceTypeContext)
}

func (s *UnannClassOrInterfaceTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnannClassOrInterfaceTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnannClassOrInterfaceTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterUnannClassOrInterfaceType(s)
	}
}

func (s *UnannClassOrInterfaceTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitUnannClassOrInterfaceType(s)
	}
}

func (p *Java8Parser) UnannClassOrInterfaceType() (localctx IUnannClassOrInterfaceTypeContext) {
	localctx = NewUnannClassOrInterfaceTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, Java8ParserRULE_unannClassOrInterfaceType)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(914)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 62, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(912)
			p.UnannClassType_lfno_unannClassOrInterfaceType()
		}

	case 2:
		{
			p.SetState(913)
			p.UnannInterfaceType_lfno_unannClassOrInterfaceType()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.SetState(920)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 64, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(918)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 63, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(916)
					p.UnannClassType_lf_unannClassOrInterfaceType()
				}

			case 2:
				{
					p.SetState(917)
					p.UnannInterfaceType_lf_unannClassOrInterfaceType()
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(922)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 64, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnannClassTypeContext is an interface to support dynamic dispatch.
type IUnannClassTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode
	TypeArguments() ITypeArgumentsContext
	UnannClassOrInterfaceType() IUnannClassOrInterfaceTypeContext
	DOT() antlr.TerminalNode
	AllAnnotation() []IAnnotationContext
	Annotation(i int) IAnnotationContext

	// IsUnannClassTypeContext differentiates from other interfaces.
	IsUnannClassTypeContext()
}

type UnannClassTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnannClassTypeContext() *UnannClassTypeContext {
	var p = new(UnannClassTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_unannClassType
	return p
}

func InitEmptyUnannClassTypeContext(p *UnannClassTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_unannClassType
}

func (*UnannClassTypeContext) IsUnannClassTypeContext() {}

func NewUnannClassTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnannClassTypeContext {
	var p = new(UnannClassTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_unannClassType

	return p
}

func (s *UnannClassTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *UnannClassTypeContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *UnannClassTypeContext) TypeArguments() ITypeArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeArgumentsContext)
}

func (s *UnannClassTypeContext) UnannClassOrInterfaceType() IUnannClassOrInterfaceTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnannClassOrInterfaceTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnannClassOrInterfaceTypeContext)
}

func (s *UnannClassTypeContext) DOT() antlr.TerminalNode {
	return s.GetToken(Java8ParserDOT, 0)
}

func (s *UnannClassTypeContext) AllAnnotation() []IAnnotationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAnnotationContext); ok {
			len++
		}
	}

	tst := make([]IAnnotationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAnnotationContext); ok {
			tst[i] = t.(IAnnotationContext)
			i++
		}
	}

	return tst
}

func (s *UnannClassTypeContext) Annotation(i int) IAnnotationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *UnannClassTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnannClassTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnannClassTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterUnannClassType(s)
	}
}

func (s *UnannClassTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitUnannClassType(s)
	}
}

func (p *Java8Parser) UnannClassType() (localctx IUnannClassTypeContext) {
	localctx = NewUnannClassTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, Java8ParserRULE_unannClassType)
	var _la int

	p.SetState(939)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 68, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(923)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(925)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(924)
				p.TypeArguments()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(927)
			p.UnannClassOrInterfaceType()
		}
		{
			p.SetState(928)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(932)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == Java8ParserAT {
			{
				p.SetState(929)
				p.Annotation()
			}

			p.SetState(934)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(935)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(937)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(936)
				p.TypeArguments()
			}

		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnannClassType_lf_unannClassOrInterfaceTypeContext is an interface to support dynamic dispatch.
type IUnannClassType_lf_unannClassOrInterfaceTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DOT() antlr.TerminalNode
	Identifier() antlr.TerminalNode
	AllAnnotation() []IAnnotationContext
	Annotation(i int) IAnnotationContext
	TypeArguments() ITypeArgumentsContext

	// IsUnannClassType_lf_unannClassOrInterfaceTypeContext differentiates from other interfaces.
	IsUnannClassType_lf_unannClassOrInterfaceTypeContext()
}

type UnannClassType_lf_unannClassOrInterfaceTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnannClassType_lf_unannClassOrInterfaceTypeContext() *UnannClassType_lf_unannClassOrInterfaceTypeContext {
	var p = new(UnannClassType_lf_unannClassOrInterfaceTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_unannClassType_lf_unannClassOrInterfaceType
	return p
}

func InitEmptyUnannClassType_lf_unannClassOrInterfaceTypeContext(p *UnannClassType_lf_unannClassOrInterfaceTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_unannClassType_lf_unannClassOrInterfaceType
}

func (*UnannClassType_lf_unannClassOrInterfaceTypeContext) IsUnannClassType_lf_unannClassOrInterfaceTypeContext() {
}

func NewUnannClassType_lf_unannClassOrInterfaceTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnannClassType_lf_unannClassOrInterfaceTypeContext {
	var p = new(UnannClassType_lf_unannClassOrInterfaceTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_unannClassType_lf_unannClassOrInterfaceType

	return p
}

func (s *UnannClassType_lf_unannClassOrInterfaceTypeContext) GetParser() antlr.Parser {
	return s.parser
}

func (s *UnannClassType_lf_unannClassOrInterfaceTypeContext) DOT() antlr.TerminalNode {
	return s.GetToken(Java8ParserDOT, 0)
}

func (s *UnannClassType_lf_unannClassOrInterfaceTypeContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *UnannClassType_lf_unannClassOrInterfaceTypeContext) AllAnnotation() []IAnnotationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAnnotationContext); ok {
			len++
		}
	}

	tst := make([]IAnnotationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAnnotationContext); ok {
			tst[i] = t.(IAnnotationContext)
			i++
		}
	}

	return tst
}

func (s *UnannClassType_lf_unannClassOrInterfaceTypeContext) Annotation(i int) IAnnotationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *UnannClassType_lf_unannClassOrInterfaceTypeContext) TypeArguments() ITypeArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeArgumentsContext)
}

func (s *UnannClassType_lf_unannClassOrInterfaceTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnannClassType_lf_unannClassOrInterfaceTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnannClassType_lf_unannClassOrInterfaceTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterUnannClassType_lf_unannClassOrInterfaceType(s)
	}
}

func (s *UnannClassType_lf_unannClassOrInterfaceTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitUnannClassType_lf_unannClassOrInterfaceType(s)
	}
}

func (p *Java8Parser) UnannClassType_lf_unannClassOrInterfaceType() (localctx IUnannClassType_lf_unannClassOrInterfaceTypeContext) {
	localctx = NewUnannClassType_lf_unannClassOrInterfaceTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, Java8ParserRULE_unannClassType_lf_unannClassOrInterfaceType)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(941)
		p.Match(Java8ParserDOT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(945)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Java8ParserAT {
		{
			p.SetState(942)
			p.Annotation()
		}

		p.SetState(947)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(948)
		p.Match(Java8ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(950)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserLT {
		{
			p.SetState(949)
			p.TypeArguments()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnannClassType_lfno_unannClassOrInterfaceTypeContext is an interface to support dynamic dispatch.
type IUnannClassType_lfno_unannClassOrInterfaceTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode
	TypeArguments() ITypeArgumentsContext

	// IsUnannClassType_lfno_unannClassOrInterfaceTypeContext differentiates from other interfaces.
	IsUnannClassType_lfno_unannClassOrInterfaceTypeContext()
}

type UnannClassType_lfno_unannClassOrInterfaceTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnannClassType_lfno_unannClassOrInterfaceTypeContext() *UnannClassType_lfno_unannClassOrInterfaceTypeContext {
	var p = new(UnannClassType_lfno_unannClassOrInterfaceTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_unannClassType_lfno_unannClassOrInterfaceType
	return p
}

func InitEmptyUnannClassType_lfno_unannClassOrInterfaceTypeContext(p *UnannClassType_lfno_unannClassOrInterfaceTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_unannClassType_lfno_unannClassOrInterfaceType
}

func (*UnannClassType_lfno_unannClassOrInterfaceTypeContext) IsUnannClassType_lfno_unannClassOrInterfaceTypeContext() {
}

func NewUnannClassType_lfno_unannClassOrInterfaceTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnannClassType_lfno_unannClassOrInterfaceTypeContext {
	var p = new(UnannClassType_lfno_unannClassOrInterfaceTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_unannClassType_lfno_unannClassOrInterfaceType

	return p
}

func (s *UnannClassType_lfno_unannClassOrInterfaceTypeContext) GetParser() antlr.Parser {
	return s.parser
}

func (s *UnannClassType_lfno_unannClassOrInterfaceTypeContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *UnannClassType_lfno_unannClassOrInterfaceTypeContext) TypeArguments() ITypeArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeArgumentsContext)
}

func (s *UnannClassType_lfno_unannClassOrInterfaceTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnannClassType_lfno_unannClassOrInterfaceTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnannClassType_lfno_unannClassOrInterfaceTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterUnannClassType_lfno_unannClassOrInterfaceType(s)
	}
}

func (s *UnannClassType_lfno_unannClassOrInterfaceTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitUnannClassType_lfno_unannClassOrInterfaceType(s)
	}
}

func (p *Java8Parser) UnannClassType_lfno_unannClassOrInterfaceType() (localctx IUnannClassType_lfno_unannClassOrInterfaceTypeContext) {
	localctx = NewUnannClassType_lfno_unannClassOrInterfaceTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, Java8ParserRULE_unannClassType_lfno_unannClassOrInterfaceType)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(952)
		p.Match(Java8ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(954)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserLT {
		{
			p.SetState(953)
			p.TypeArguments()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnannInterfaceTypeContext is an interface to support dynamic dispatch.
type IUnannInterfaceTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UnannClassType() IUnannClassTypeContext

	// IsUnannInterfaceTypeContext differentiates from other interfaces.
	IsUnannInterfaceTypeContext()
}

type UnannInterfaceTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnannInterfaceTypeContext() *UnannInterfaceTypeContext {
	var p = new(UnannInterfaceTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_unannInterfaceType
	return p
}

func InitEmptyUnannInterfaceTypeContext(p *UnannInterfaceTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_unannInterfaceType
}

func (*UnannInterfaceTypeContext) IsUnannInterfaceTypeContext() {}

func NewUnannInterfaceTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnannInterfaceTypeContext {
	var p = new(UnannInterfaceTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_unannInterfaceType

	return p
}

func (s *UnannInterfaceTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *UnannInterfaceTypeContext) UnannClassType() IUnannClassTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnannClassTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnannClassTypeContext)
}

func (s *UnannInterfaceTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnannInterfaceTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnannInterfaceTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterUnannInterfaceType(s)
	}
}

func (s *UnannInterfaceTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitUnannInterfaceType(s)
	}
}

func (p *Java8Parser) UnannInterfaceType() (localctx IUnannInterfaceTypeContext) {
	localctx = NewUnannInterfaceTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, Java8ParserRULE_unannInterfaceType)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(956)
		p.UnannClassType()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnannInterfaceType_lf_unannClassOrInterfaceTypeContext is an interface to support dynamic dispatch.
type IUnannInterfaceType_lf_unannClassOrInterfaceTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UnannClassType_lf_unannClassOrInterfaceType() IUnannClassType_lf_unannClassOrInterfaceTypeContext

	// IsUnannInterfaceType_lf_unannClassOrInterfaceTypeContext differentiates from other interfaces.
	IsUnannInterfaceType_lf_unannClassOrInterfaceTypeContext()
}

type UnannInterfaceType_lf_unannClassOrInterfaceTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnannInterfaceType_lf_unannClassOrInterfaceTypeContext() *UnannInterfaceType_lf_unannClassOrInterfaceTypeContext {
	var p = new(UnannInterfaceType_lf_unannClassOrInterfaceTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_unannInterfaceType_lf_unannClassOrInterfaceType
	return p
}

func InitEmptyUnannInterfaceType_lf_unannClassOrInterfaceTypeContext(p *UnannInterfaceType_lf_unannClassOrInterfaceTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_unannInterfaceType_lf_unannClassOrInterfaceType
}

func (*UnannInterfaceType_lf_unannClassOrInterfaceTypeContext) IsUnannInterfaceType_lf_unannClassOrInterfaceTypeContext() {
}

func NewUnannInterfaceType_lf_unannClassOrInterfaceTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnannInterfaceType_lf_unannClassOrInterfaceTypeContext {
	var p = new(UnannInterfaceType_lf_unannClassOrInterfaceTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_unannInterfaceType_lf_unannClassOrInterfaceType

	return p
}

func (s *UnannInterfaceType_lf_unannClassOrInterfaceTypeContext) GetParser() antlr.Parser {
	return s.parser
}

func (s *UnannInterfaceType_lf_unannClassOrInterfaceTypeContext) UnannClassType_lf_unannClassOrInterfaceType() IUnannClassType_lf_unannClassOrInterfaceTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnannClassType_lf_unannClassOrInterfaceTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnannClassType_lf_unannClassOrInterfaceTypeContext)
}

func (s *UnannInterfaceType_lf_unannClassOrInterfaceTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnannInterfaceType_lf_unannClassOrInterfaceTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnannInterfaceType_lf_unannClassOrInterfaceTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterUnannInterfaceType_lf_unannClassOrInterfaceType(s)
	}
}

func (s *UnannInterfaceType_lf_unannClassOrInterfaceTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitUnannInterfaceType_lf_unannClassOrInterfaceType(s)
	}
}

func (p *Java8Parser) UnannInterfaceType_lf_unannClassOrInterfaceType() (localctx IUnannInterfaceType_lf_unannClassOrInterfaceTypeContext) {
	localctx = NewUnannInterfaceType_lf_unannClassOrInterfaceTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, Java8ParserRULE_unannInterfaceType_lf_unannClassOrInterfaceType)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(958)
		p.UnannClassType_lf_unannClassOrInterfaceType()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnannInterfaceType_lfno_unannClassOrInterfaceTypeContext is an interface to support dynamic dispatch.
type IUnannInterfaceType_lfno_unannClassOrInterfaceTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UnannClassType_lfno_unannClassOrInterfaceType() IUnannClassType_lfno_unannClassOrInterfaceTypeContext

	// IsUnannInterfaceType_lfno_unannClassOrInterfaceTypeContext differentiates from other interfaces.
	IsUnannInterfaceType_lfno_unannClassOrInterfaceTypeContext()
}

type UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnannInterfaceType_lfno_unannClassOrInterfaceTypeContext() *UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext {
	var p = new(UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_unannInterfaceType_lfno_unannClassOrInterfaceType
	return p
}

func InitEmptyUnannInterfaceType_lfno_unannClassOrInterfaceTypeContext(p *UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_unannInterfaceType_lfno_unannClassOrInterfaceType
}

func (*UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext) IsUnannInterfaceType_lfno_unannClassOrInterfaceTypeContext() {
}

func NewUnannInterfaceType_lfno_unannClassOrInterfaceTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext {
	var p = new(UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_unannInterfaceType_lfno_unannClassOrInterfaceType

	return p
}

func (s *UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext) GetParser() antlr.Parser {
	return s.parser
}

func (s *UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext) UnannClassType_lfno_unannClassOrInterfaceType() IUnannClassType_lfno_unannClassOrInterfaceTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnannClassType_lfno_unannClassOrInterfaceTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnannClassType_lfno_unannClassOrInterfaceTypeContext)
}

func (s *UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterUnannInterfaceType_lfno_unannClassOrInterfaceType(s)
	}
}

func (s *UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitUnannInterfaceType_lfno_unannClassOrInterfaceType(s)
	}
}

func (p *Java8Parser) UnannInterfaceType_lfno_unannClassOrInterfaceType() (localctx IUnannInterfaceType_lfno_unannClassOrInterfaceTypeContext) {
	localctx = NewUnannInterfaceType_lfno_unannClassOrInterfaceTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, Java8ParserRULE_unannInterfaceType_lfno_unannClassOrInterfaceType)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(960)
		p.UnannClassType_lfno_unannClassOrInterfaceType()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnannTypeVariableContext is an interface to support dynamic dispatch.
type IUnannTypeVariableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode

	// IsUnannTypeVariableContext differentiates from other interfaces.
	IsUnannTypeVariableContext()
}

type UnannTypeVariableContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnannTypeVariableContext() *UnannTypeVariableContext {
	var p = new(UnannTypeVariableContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_unannTypeVariable
	return p
}

func InitEmptyUnannTypeVariableContext(p *UnannTypeVariableContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_unannTypeVariable
}

func (*UnannTypeVariableContext) IsUnannTypeVariableContext() {}

func NewUnannTypeVariableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnannTypeVariableContext {
	var p = new(UnannTypeVariableContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_unannTypeVariable

	return p
}

func (s *UnannTypeVariableContext) GetParser() antlr.Parser { return s.parser }

func (s *UnannTypeVariableContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *UnannTypeVariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnannTypeVariableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnannTypeVariableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterUnannTypeVariable(s)
	}
}

func (s *UnannTypeVariableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitUnannTypeVariable(s)
	}
}

func (p *Java8Parser) UnannTypeVariable() (localctx IUnannTypeVariableContext) {
	localctx = NewUnannTypeVariableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, Java8ParserRULE_unannTypeVariable)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(962)
		p.Match(Java8ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnannArrayTypeContext is an interface to support dynamic dispatch.
type IUnannArrayTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UnannPrimitiveType() IUnannPrimitiveTypeContext
	Dims() IDimsContext
	UnannClassOrInterfaceType() IUnannClassOrInterfaceTypeContext
	UnannTypeVariable() IUnannTypeVariableContext

	// IsUnannArrayTypeContext differentiates from other interfaces.
	IsUnannArrayTypeContext()
}

type UnannArrayTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnannArrayTypeContext() *UnannArrayTypeContext {
	var p = new(UnannArrayTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_unannArrayType
	return p
}

func InitEmptyUnannArrayTypeContext(p *UnannArrayTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_unannArrayType
}

func (*UnannArrayTypeContext) IsUnannArrayTypeContext() {}

func NewUnannArrayTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnannArrayTypeContext {
	var p = new(UnannArrayTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_unannArrayType

	return p
}

func (s *UnannArrayTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *UnannArrayTypeContext) UnannPrimitiveType() IUnannPrimitiveTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnannPrimitiveTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnannPrimitiveTypeContext)
}

func (s *UnannArrayTypeContext) Dims() IDimsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDimsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDimsContext)
}

func (s *UnannArrayTypeContext) UnannClassOrInterfaceType() IUnannClassOrInterfaceTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnannClassOrInterfaceTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnannClassOrInterfaceTypeContext)
}

func (s *UnannArrayTypeContext) UnannTypeVariable() IUnannTypeVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnannTypeVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnannTypeVariableContext)
}

func (s *UnannArrayTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnannArrayTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnannArrayTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterUnannArrayType(s)
	}
}

func (s *UnannArrayTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitUnannArrayType(s)
	}
}

func (p *Java8Parser) UnannArrayType() (localctx IUnannArrayTypeContext) {
	localctx = NewUnannArrayTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, Java8ParserRULE_unannArrayType)
	p.SetState(973)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 72, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(964)
			p.UnannPrimitiveType()
		}
		{
			p.SetState(965)
			p.Dims()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(967)
			p.UnannClassOrInterfaceType()
		}
		{
			p.SetState(968)
			p.Dims()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(970)
			p.UnannTypeVariable()
		}
		{
			p.SetState(971)
			p.Dims()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMethodDeclarationContext is an interface to support dynamic dispatch.
type IMethodDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MethodHeader() IMethodHeaderContext
	MethodBody() IMethodBodyContext
	AllMethodModifier() []IMethodModifierContext
	MethodModifier(i int) IMethodModifierContext

	// IsMethodDeclarationContext differentiates from other interfaces.
	IsMethodDeclarationContext()
}

type MethodDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMethodDeclarationContext() *MethodDeclarationContext {
	var p = new(MethodDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_methodDeclaration
	return p
}

func InitEmptyMethodDeclarationContext(p *MethodDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_methodDeclaration
}

func (*MethodDeclarationContext) IsMethodDeclarationContext() {}

func NewMethodDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MethodDeclarationContext {
	var p = new(MethodDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_methodDeclaration

	return p
}

func (s *MethodDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *MethodDeclarationContext) MethodHeader() IMethodHeaderContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMethodHeaderContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMethodHeaderContext)
}

func (s *MethodDeclarationContext) MethodBody() IMethodBodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMethodBodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMethodBodyContext)
}

func (s *MethodDeclarationContext) AllMethodModifier() []IMethodModifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMethodModifierContext); ok {
			len++
		}
	}

	tst := make([]IMethodModifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMethodModifierContext); ok {
			tst[i] = t.(IMethodModifierContext)
			i++
		}
	}

	return tst
}

func (s *MethodDeclarationContext) MethodModifier(i int) IMethodModifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMethodModifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMethodModifierContext)
}

func (s *MethodDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MethodDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MethodDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterMethodDeclaration(s)
	}
}

func (s *MethodDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitMethodDeclaration(s)
	}
}

func (p *Java8Parser) MethodDeclaration() (localctx IMethodDeclarationContext) {
	localctx = NewMethodDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, Java8ParserRULE_methodDeclaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(978)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&5283883778050) != 0) || _la == Java8ParserAT {
		{
			p.SetState(975)
			p.MethodModifier()
		}

		p.SetState(980)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(981)
		p.MethodHeader()
	}
	{
		p.SetState(982)
		p.MethodBody()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMethodModifierContext is an interface to support dynamic dispatch.
type IMethodModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Annotation() IAnnotationContext
	PUBLIC() antlr.TerminalNode
	PROTECTED() antlr.TerminalNode
	PRIVATE() antlr.TerminalNode
	ABSTRACT() antlr.TerminalNode
	STATIC() antlr.TerminalNode
	FINAL() antlr.TerminalNode
	SYNCHRONIZED() antlr.TerminalNode
	NATIVE() antlr.TerminalNode
	STRICTFP() antlr.TerminalNode

	// IsMethodModifierContext differentiates from other interfaces.
	IsMethodModifierContext()
}

type MethodModifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMethodModifierContext() *MethodModifierContext {
	var p = new(MethodModifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_methodModifier
	return p
}

func InitEmptyMethodModifierContext(p *MethodModifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_methodModifier
}

func (*MethodModifierContext) IsMethodModifierContext() {}

func NewMethodModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MethodModifierContext {
	var p = new(MethodModifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_methodModifier

	return p
}

func (s *MethodModifierContext) GetParser() antlr.Parser { return s.parser }

func (s *MethodModifierContext) Annotation() IAnnotationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *MethodModifierContext) PUBLIC() antlr.TerminalNode {
	return s.GetToken(Java8ParserPUBLIC, 0)
}

func (s *MethodModifierContext) PROTECTED() antlr.TerminalNode {
	return s.GetToken(Java8ParserPROTECTED, 0)
}

func (s *MethodModifierContext) PRIVATE() antlr.TerminalNode {
	return s.GetToken(Java8ParserPRIVATE, 0)
}

func (s *MethodModifierContext) ABSTRACT() antlr.TerminalNode {
	return s.GetToken(Java8ParserABSTRACT, 0)
}

func (s *MethodModifierContext) STATIC() antlr.TerminalNode {
	return s.GetToken(Java8ParserSTATIC, 0)
}

func (s *MethodModifierContext) FINAL() antlr.TerminalNode {
	return s.GetToken(Java8ParserFINAL, 0)
}

func (s *MethodModifierContext) SYNCHRONIZED() antlr.TerminalNode {
	return s.GetToken(Java8ParserSYNCHRONIZED, 0)
}

func (s *MethodModifierContext) NATIVE() antlr.TerminalNode {
	return s.GetToken(Java8ParserNATIVE, 0)
}

func (s *MethodModifierContext) STRICTFP() antlr.TerminalNode {
	return s.GetToken(Java8ParserSTRICTFP, 0)
}

func (s *MethodModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MethodModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MethodModifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterMethodModifier(s)
	}
}

func (s *MethodModifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitMethodModifier(s)
	}
}

func (p *Java8Parser) MethodModifier() (localctx IMethodModifierContext) {
	localctx = NewMethodModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, Java8ParserRULE_methodModifier)
	p.SetState(994)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case Java8ParserAT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(984)
			p.Annotation()
		}

	case Java8ParserPUBLIC:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(985)
			p.Match(Java8ParserPUBLIC)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserPROTECTED:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(986)
			p.Match(Java8ParserPROTECTED)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserPRIVATE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(987)
			p.Match(Java8ParserPRIVATE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserABSTRACT:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(988)
			p.Match(Java8ParserABSTRACT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserSTATIC:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(989)
			p.Match(Java8ParserSTATIC)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserFINAL:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(990)
			p.Match(Java8ParserFINAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserSYNCHRONIZED:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(991)
			p.Match(Java8ParserSYNCHRONIZED)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserNATIVE:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(992)
			p.Match(Java8ParserNATIVE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserSTRICTFP:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(993)
			p.Match(Java8ParserSTRICTFP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMethodHeaderContext is an interface to support dynamic dispatch.
type IMethodHeaderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Result() IResultContext
	MethodDeclarator() IMethodDeclaratorContext
	Throws_() IThrows_Context
	TypeParameters() ITypeParametersContext
	AllAnnotation() []IAnnotationContext
	Annotation(i int) IAnnotationContext

	// IsMethodHeaderContext differentiates from other interfaces.
	IsMethodHeaderContext()
}

type MethodHeaderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMethodHeaderContext() *MethodHeaderContext {
	var p = new(MethodHeaderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_methodHeader
	return p
}

func InitEmptyMethodHeaderContext(p *MethodHeaderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_methodHeader
}

func (*MethodHeaderContext) IsMethodHeaderContext() {}

func NewMethodHeaderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MethodHeaderContext {
	var p = new(MethodHeaderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_methodHeader

	return p
}

func (s *MethodHeaderContext) GetParser() antlr.Parser { return s.parser }

func (s *MethodHeaderContext) Result() IResultContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResultContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResultContext)
}

func (s *MethodHeaderContext) MethodDeclarator() IMethodDeclaratorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMethodDeclaratorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMethodDeclaratorContext)
}

func (s *MethodHeaderContext) Throws_() IThrows_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IThrows_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IThrows_Context)
}

func (s *MethodHeaderContext) TypeParameters() ITypeParametersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeParametersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeParametersContext)
}

func (s *MethodHeaderContext) AllAnnotation() []IAnnotationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAnnotationContext); ok {
			len++
		}
	}

	tst := make([]IAnnotationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAnnotationContext); ok {
			tst[i] = t.(IAnnotationContext)
			i++
		}
	}

	return tst
}

func (s *MethodHeaderContext) Annotation(i int) IAnnotationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *MethodHeaderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MethodHeaderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MethodHeaderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterMethodHeader(s)
	}
}

func (s *MethodHeaderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitMethodHeader(s)
	}
}

func (p *Java8Parser) MethodHeader() (localctx IMethodHeaderContext) {
	localctx = NewMethodHeaderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, Java8ParserRULE_methodHeader)
	var _la int

	p.SetState(1013)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case Java8ParserBOOLEAN, Java8ParserBYTE, Java8ParserCHAR, Java8ParserDOUBLE, Java8ParserFLOAT, Java8ParserINT, Java8ParserLONG, Java8ParserSHORT, Java8ParserVOID, Java8ParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(996)
			p.Result()
		}
		{
			p.SetState(997)
			p.MethodDeclarator()
		}
		p.SetState(999)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserTHROWS {
			{
				p.SetState(998)
				p.Throws_()
			}

		}

	case Java8ParserLT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1001)
			p.TypeParameters()
		}
		p.SetState(1005)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == Java8ParserAT {
			{
				p.SetState(1002)
				p.Annotation()
			}

			p.SetState(1007)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1008)
			p.Result()
		}
		{
			p.SetState(1009)
			p.MethodDeclarator()
		}
		p.SetState(1011)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserTHROWS {
			{
				p.SetState(1010)
				p.Throws_()
			}

		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IResultContext is an interface to support dynamic dispatch.
type IResultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UnannType() IUnannTypeContext
	VOID() antlr.TerminalNode

	// IsResultContext differentiates from other interfaces.
	IsResultContext()
}

type ResultContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyResultContext() *ResultContext {
	var p = new(ResultContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_result
	return p
}

func InitEmptyResultContext(p *ResultContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_result
}

func (*ResultContext) IsResultContext() {}

func NewResultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ResultContext {
	var p = new(ResultContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_result

	return p
}

func (s *ResultContext) GetParser() antlr.Parser { return s.parser }

func (s *ResultContext) UnannType() IUnannTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnannTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnannTypeContext)
}

func (s *ResultContext) VOID() antlr.TerminalNode {
	return s.GetToken(Java8ParserVOID, 0)
}

func (s *ResultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ResultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ResultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterResult(s)
	}
}

func (s *ResultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitResult(s)
	}
}

func (p *Java8Parser) Result() (localctx IResultContext) {
	localctx = NewResultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, Java8ParserRULE_result)
	p.SetState(1017)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case Java8ParserBOOLEAN, Java8ParserBYTE, Java8ParserCHAR, Java8ParserDOUBLE, Java8ParserFLOAT, Java8ParserINT, Java8ParserLONG, Java8ParserSHORT, Java8ParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1015)
			p.UnannType()
		}

	case Java8ParserVOID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1016)
			p.Match(Java8ParserVOID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMethodDeclaratorContext is an interface to support dynamic dispatch.
type IMethodDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	FormalParameterList() IFormalParameterListContext
	Dims() IDimsContext

	// IsMethodDeclaratorContext differentiates from other interfaces.
	IsMethodDeclaratorContext()
}

type MethodDeclaratorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMethodDeclaratorContext() *MethodDeclaratorContext {
	var p = new(MethodDeclaratorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_methodDeclarator
	return p
}

func InitEmptyMethodDeclaratorContext(p *MethodDeclaratorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_methodDeclarator
}

func (*MethodDeclaratorContext) IsMethodDeclaratorContext() {}

func NewMethodDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MethodDeclaratorContext {
	var p = new(MethodDeclaratorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_methodDeclarator

	return p
}

func (s *MethodDeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *MethodDeclaratorContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *MethodDeclaratorContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserLPAREN, 0)
}

func (s *MethodDeclaratorContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRPAREN, 0)
}

func (s *MethodDeclaratorContext) FormalParameterList() IFormalParameterListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFormalParameterListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFormalParameterListContext)
}

func (s *MethodDeclaratorContext) Dims() IDimsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDimsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDimsContext)
}

func (s *MethodDeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MethodDeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MethodDeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterMethodDeclarator(s)
	}
}

func (s *MethodDeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitMethodDeclarator(s)
	}
}

func (p *Java8Parser) MethodDeclarator() (localctx IMethodDeclaratorContext) {
	localctx = NewMethodDeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, Java8ParserRULE_methodDeclarator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1019)
		p.Match(Java8ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1020)
		p.Match(Java8ParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1022)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&138111369512) != 0) || _la == Java8ParserIdentifier || _la == Java8ParserAT {
		{
			p.SetState(1021)
			p.FormalParameterList()
		}

	}
	{
		p.SetState(1024)
		p.Match(Java8ParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1026)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserLBRACK || _la == Java8ParserAT {
		{
			p.SetState(1025)
			p.Dims()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFormalParameterListContext is an interface to support dynamic dispatch.
type IFormalParameterListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ReceiverParameter() IReceiverParameterContext
	FormalParameters() IFormalParametersContext
	COMMA() antlr.TerminalNode
	LastFormalParameter() ILastFormalParameterContext

	// IsFormalParameterListContext differentiates from other interfaces.
	IsFormalParameterListContext()
}

type FormalParameterListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFormalParameterListContext() *FormalParameterListContext {
	var p = new(FormalParameterListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_formalParameterList
	return p
}

func InitEmptyFormalParameterListContext(p *FormalParameterListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_formalParameterList
}

func (*FormalParameterListContext) IsFormalParameterListContext() {}

func NewFormalParameterListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FormalParameterListContext {
	var p = new(FormalParameterListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_formalParameterList

	return p
}

func (s *FormalParameterListContext) GetParser() antlr.Parser { return s.parser }

func (s *FormalParameterListContext) ReceiverParameter() IReceiverParameterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReceiverParameterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReceiverParameterContext)
}

func (s *FormalParameterListContext) FormalParameters() IFormalParametersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFormalParametersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFormalParametersContext)
}

func (s *FormalParameterListContext) COMMA() antlr.TerminalNode {
	return s.GetToken(Java8ParserCOMMA, 0)
}

func (s *FormalParameterListContext) LastFormalParameter() ILastFormalParameterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILastFormalParameterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILastFormalParameterContext)
}

func (s *FormalParameterListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FormalParameterListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FormalParameterListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterFormalParameterList(s)
	}
}

func (s *FormalParameterListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitFormalParameterList(s)
	}
}

func (p *Java8Parser) FormalParameterList() (localctx IFormalParameterListContext) {
	localctx = NewFormalParameterListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, Java8ParserRULE_formalParameterList)
	p.SetState(1034)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 82, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1028)
			p.ReceiverParameter()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1029)
			p.FormalParameters()
		}
		{
			p.SetState(1030)
			p.Match(Java8ParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1031)
			p.LastFormalParameter()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1033)
			p.LastFormalParameter()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFormalParametersContext is an interface to support dynamic dispatch.
type IFormalParametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllFormalParameter() []IFormalParameterContext
	FormalParameter(i int) IFormalParameterContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	ReceiverParameter() IReceiverParameterContext

	// IsFormalParametersContext differentiates from other interfaces.
	IsFormalParametersContext()
}

type FormalParametersContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFormalParametersContext() *FormalParametersContext {
	var p = new(FormalParametersContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_formalParameters
	return p
}

func InitEmptyFormalParametersContext(p *FormalParametersContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_formalParameters
}

func (*FormalParametersContext) IsFormalParametersContext() {}

func NewFormalParametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FormalParametersContext {
	var p = new(FormalParametersContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_formalParameters

	return p
}

func (s *FormalParametersContext) GetParser() antlr.Parser { return s.parser }

func (s *FormalParametersContext) AllFormalParameter() []IFormalParameterContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFormalParameterContext); ok {
			len++
		}
	}

	tst := make([]IFormalParameterContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFormalParameterContext); ok {
			tst[i] = t.(IFormalParameterContext)
			i++
		}
	}

	return tst
}

func (s *FormalParametersContext) FormalParameter(i int) IFormalParameterContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFormalParameterContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFormalParameterContext)
}

func (s *FormalParametersContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserCOMMA)
}

func (s *FormalParametersContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserCOMMA, i)
}

func (s *FormalParametersContext) ReceiverParameter() IReceiverParameterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReceiverParameterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReceiverParameterContext)
}

func (s *FormalParametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FormalParametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FormalParametersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterFormalParameters(s)
	}
}

func (s *FormalParametersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitFormalParameters(s)
	}
}

func (p *Java8Parser) FormalParameters() (localctx IFormalParametersContext) {
	localctx = NewFormalParametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, Java8ParserRULE_formalParameters)
	var _alt int

	p.SetState(1052)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 85, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1036)
			p.FormalParameter()
		}
		p.SetState(1041)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 83, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1037)
					p.Match(Java8ParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1038)
					p.FormalParameter()
				}

			}
			p.SetState(1043)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 83, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1044)
			p.ReceiverParameter()
		}
		p.SetState(1049)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 84, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1045)
					p.Match(Java8ParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1046)
					p.FormalParameter()
				}

			}
			p.SetState(1051)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 84, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFormalParameterContext is an interface to support dynamic dispatch.
type IFormalParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UnannType() IUnannTypeContext
	VariableDeclaratorId() IVariableDeclaratorIdContext
	AllVariableModifier() []IVariableModifierContext
	VariableModifier(i int) IVariableModifierContext

	// IsFormalParameterContext differentiates from other interfaces.
	IsFormalParameterContext()
}

type FormalParameterContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFormalParameterContext() *FormalParameterContext {
	var p = new(FormalParameterContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_formalParameter
	return p
}

func InitEmptyFormalParameterContext(p *FormalParameterContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_formalParameter
}

func (*FormalParameterContext) IsFormalParameterContext() {}

func NewFormalParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FormalParameterContext {
	var p = new(FormalParameterContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_formalParameter

	return p
}

func (s *FormalParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *FormalParameterContext) UnannType() IUnannTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnannTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnannTypeContext)
}

func (s *FormalParameterContext) VariableDeclaratorId() IVariableDeclaratorIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableDeclaratorIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableDeclaratorIdContext)
}

func (s *FormalParameterContext) AllVariableModifier() []IVariableModifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVariableModifierContext); ok {
			len++
		}
	}

	tst := make([]IVariableModifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVariableModifierContext); ok {
			tst[i] = t.(IVariableModifierContext)
			i++
		}
	}

	return tst
}

func (s *FormalParameterContext) VariableModifier(i int) IVariableModifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableModifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableModifierContext)
}

func (s *FormalParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FormalParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FormalParameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterFormalParameter(s)
	}
}

func (s *FormalParameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitFormalParameter(s)
	}
}

func (p *Java8Parser) FormalParameter() (localctx IFormalParameterContext) {
	localctx = NewFormalParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, Java8ParserRULE_formalParameter)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1057)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Java8ParserFINAL || _la == Java8ParserAT {
		{
			p.SetState(1054)
			p.VariableModifier()
		}

		p.SetState(1059)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1060)
		p.UnannType()
	}
	{
		p.SetState(1061)
		p.VariableDeclaratorId()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVariableModifierContext is an interface to support dynamic dispatch.
type IVariableModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Annotation() IAnnotationContext
	FINAL() antlr.TerminalNode

	// IsVariableModifierContext differentiates from other interfaces.
	IsVariableModifierContext()
}

type VariableModifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableModifierContext() *VariableModifierContext {
	var p = new(VariableModifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_variableModifier
	return p
}

func InitEmptyVariableModifierContext(p *VariableModifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_variableModifier
}

func (*VariableModifierContext) IsVariableModifierContext() {}

func NewVariableModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableModifierContext {
	var p = new(VariableModifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_variableModifier

	return p
}

func (s *VariableModifierContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableModifierContext) Annotation() IAnnotationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *VariableModifierContext) FINAL() antlr.TerminalNode {
	return s.GetToken(Java8ParserFINAL, 0)
}

func (s *VariableModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableModifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterVariableModifier(s)
	}
}

func (s *VariableModifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitVariableModifier(s)
	}
}

func (p *Java8Parser) VariableModifier() (localctx IVariableModifierContext) {
	localctx = NewVariableModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, Java8ParserRULE_variableModifier)
	p.SetState(1065)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case Java8ParserAT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1063)
			p.Annotation()
		}

	case Java8ParserFINAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1064)
			p.Match(Java8ParserFINAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILastFormalParameterContext is an interface to support dynamic dispatch.
type ILastFormalParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UnannType() IUnannTypeContext
	ELLIPSIS() antlr.TerminalNode
	VariableDeclaratorId() IVariableDeclaratorIdContext
	AllVariableModifier() []IVariableModifierContext
	VariableModifier(i int) IVariableModifierContext
	AllAnnotation() []IAnnotationContext
	Annotation(i int) IAnnotationContext
	FormalParameter() IFormalParameterContext

	// IsLastFormalParameterContext differentiates from other interfaces.
	IsLastFormalParameterContext()
}

type LastFormalParameterContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLastFormalParameterContext() *LastFormalParameterContext {
	var p = new(LastFormalParameterContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_lastFormalParameter
	return p
}

func InitEmptyLastFormalParameterContext(p *LastFormalParameterContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_lastFormalParameter
}

func (*LastFormalParameterContext) IsLastFormalParameterContext() {}

func NewLastFormalParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LastFormalParameterContext {
	var p = new(LastFormalParameterContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_lastFormalParameter

	return p
}

func (s *LastFormalParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *LastFormalParameterContext) UnannType() IUnannTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnannTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnannTypeContext)
}

func (s *LastFormalParameterContext) ELLIPSIS() antlr.TerminalNode {
	return s.GetToken(Java8ParserELLIPSIS, 0)
}

func (s *LastFormalParameterContext) VariableDeclaratorId() IVariableDeclaratorIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableDeclaratorIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableDeclaratorIdContext)
}

func (s *LastFormalParameterContext) AllVariableModifier() []IVariableModifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVariableModifierContext); ok {
			len++
		}
	}

	tst := make([]IVariableModifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVariableModifierContext); ok {
			tst[i] = t.(IVariableModifierContext)
			i++
		}
	}

	return tst
}

func (s *LastFormalParameterContext) VariableModifier(i int) IVariableModifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableModifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableModifierContext)
}

func (s *LastFormalParameterContext) AllAnnotation() []IAnnotationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAnnotationContext); ok {
			len++
		}
	}

	tst := make([]IAnnotationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAnnotationContext); ok {
			tst[i] = t.(IAnnotationContext)
			i++
		}
	}

	return tst
}

func (s *LastFormalParameterContext) Annotation(i int) IAnnotationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *LastFormalParameterContext) FormalParameter() IFormalParameterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFormalParameterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFormalParameterContext)
}

func (s *LastFormalParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LastFormalParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LastFormalParameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterLastFormalParameter(s)
	}
}

func (s *LastFormalParameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitLastFormalParameter(s)
	}
}

func (p *Java8Parser) LastFormalParameter() (localctx ILastFormalParameterContext) {
	localctx = NewLastFormalParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, Java8ParserRULE_lastFormalParameter)
	var _la int

	p.SetState(1084)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 90, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1070)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == Java8ParserFINAL || _la == Java8ParserAT {
			{
				p.SetState(1067)
				p.VariableModifier()
			}

			p.SetState(1072)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1073)
			p.UnannType()
		}
		p.SetState(1077)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == Java8ParserAT {
			{
				p.SetState(1074)
				p.Annotation()
			}

			p.SetState(1079)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1080)
			p.Match(Java8ParserELLIPSIS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1081)
			p.VariableDeclaratorId()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1083)
			p.FormalParameter()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IReceiverParameterContext is an interface to support dynamic dispatch.
type IReceiverParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UnannType() IUnannTypeContext
	THIS() antlr.TerminalNode
	AllAnnotation() []IAnnotationContext
	Annotation(i int) IAnnotationContext
	Identifier() antlr.TerminalNode
	DOT() antlr.TerminalNode

	// IsReceiverParameterContext differentiates from other interfaces.
	IsReceiverParameterContext()
}

type ReceiverParameterContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReceiverParameterContext() *ReceiverParameterContext {
	var p = new(ReceiverParameterContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_receiverParameter
	return p
}

func InitEmptyReceiverParameterContext(p *ReceiverParameterContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_receiverParameter
}

func (*ReceiverParameterContext) IsReceiverParameterContext() {}

func NewReceiverParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReceiverParameterContext {
	var p = new(ReceiverParameterContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_receiverParameter

	return p
}

func (s *ReceiverParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *ReceiverParameterContext) UnannType() IUnannTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnannTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnannTypeContext)
}

func (s *ReceiverParameterContext) THIS() antlr.TerminalNode {
	return s.GetToken(Java8ParserTHIS, 0)
}

func (s *ReceiverParameterContext) AllAnnotation() []IAnnotationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAnnotationContext); ok {
			len++
		}
	}

	tst := make([]IAnnotationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAnnotationContext); ok {
			tst[i] = t.(IAnnotationContext)
			i++
		}
	}

	return tst
}

func (s *ReceiverParameterContext) Annotation(i int) IAnnotationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *ReceiverParameterContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *ReceiverParameterContext) DOT() antlr.TerminalNode {
	return s.GetToken(Java8ParserDOT, 0)
}

func (s *ReceiverParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReceiverParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReceiverParameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterReceiverParameter(s)
	}
}

func (s *ReceiverParameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitReceiverParameter(s)
	}
}

func (p *Java8Parser) ReceiverParameter() (localctx IReceiverParameterContext) {
	localctx = NewReceiverParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, Java8ParserRULE_receiverParameter)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1089)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Java8ParserAT {
		{
			p.SetState(1086)
			p.Annotation()
		}

		p.SetState(1091)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1092)
		p.UnannType()
	}
	p.SetState(1095)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserIdentifier {
		{
			p.SetState(1093)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1094)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1097)
		p.Match(Java8ParserTHIS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IThrows_Context is an interface to support dynamic dispatch.
type IThrows_Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	THROWS() antlr.TerminalNode
	ExceptionTypeList() IExceptionTypeListContext

	// IsThrows_Context differentiates from other interfaces.
	IsThrows_Context()
}

type Throws_Context struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyThrows_Context() *Throws_Context {
	var p = new(Throws_Context)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_throws_
	return p
}

func InitEmptyThrows_Context(p *Throws_Context) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_throws_
}

func (*Throws_Context) IsThrows_Context() {}

func NewThrows_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Throws_Context {
	var p = new(Throws_Context)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_throws_

	return p
}

func (s *Throws_Context) GetParser() antlr.Parser { return s.parser }

func (s *Throws_Context) THROWS() antlr.TerminalNode {
	return s.GetToken(Java8ParserTHROWS, 0)
}

func (s *Throws_Context) ExceptionTypeList() IExceptionTypeListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExceptionTypeListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExceptionTypeListContext)
}

func (s *Throws_Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Throws_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Throws_Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterThrows_(s)
	}
}

func (s *Throws_Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitThrows_(s)
	}
}

func (p *Java8Parser) Throws_() (localctx IThrows_Context) {
	localctx = NewThrows_Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, Java8ParserRULE_throws_)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1099)
		p.Match(Java8ParserTHROWS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1100)
		p.ExceptionTypeList()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExceptionTypeListContext is an interface to support dynamic dispatch.
type IExceptionTypeListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllExceptionType() []IExceptionTypeContext
	ExceptionType(i int) IExceptionTypeContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsExceptionTypeListContext differentiates from other interfaces.
	IsExceptionTypeListContext()
}

type ExceptionTypeListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExceptionTypeListContext() *ExceptionTypeListContext {
	var p = new(ExceptionTypeListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_exceptionTypeList
	return p
}

func InitEmptyExceptionTypeListContext(p *ExceptionTypeListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_exceptionTypeList
}

func (*ExceptionTypeListContext) IsExceptionTypeListContext() {}

func NewExceptionTypeListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExceptionTypeListContext {
	var p = new(ExceptionTypeListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_exceptionTypeList

	return p
}

func (s *ExceptionTypeListContext) GetParser() antlr.Parser { return s.parser }

func (s *ExceptionTypeListContext) AllExceptionType() []IExceptionTypeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExceptionTypeContext); ok {
			len++
		}
	}

	tst := make([]IExceptionTypeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExceptionTypeContext); ok {
			tst[i] = t.(IExceptionTypeContext)
			i++
		}
	}

	return tst
}

func (s *ExceptionTypeListContext) ExceptionType(i int) IExceptionTypeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExceptionTypeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExceptionTypeContext)
}

func (s *ExceptionTypeListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserCOMMA)
}

func (s *ExceptionTypeListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserCOMMA, i)
}

func (s *ExceptionTypeListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExceptionTypeListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExceptionTypeListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterExceptionTypeList(s)
	}
}

func (s *ExceptionTypeListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitExceptionTypeList(s)
	}
}

func (p *Java8Parser) ExceptionTypeList() (localctx IExceptionTypeListContext) {
	localctx = NewExceptionTypeListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, Java8ParserRULE_exceptionTypeList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1102)
		p.ExceptionType()
	}
	p.SetState(1107)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Java8ParserCOMMA {
		{
			p.SetState(1103)
			p.Match(Java8ParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1104)
			p.ExceptionType()
		}

		p.SetState(1109)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExceptionTypeContext is an interface to support dynamic dispatch.
type IExceptionTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ClassType() IClassTypeContext
	TypeVariable() ITypeVariableContext

	// IsExceptionTypeContext differentiates from other interfaces.
	IsExceptionTypeContext()
}

type ExceptionTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExceptionTypeContext() *ExceptionTypeContext {
	var p = new(ExceptionTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_exceptionType
	return p
}

func InitEmptyExceptionTypeContext(p *ExceptionTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_exceptionType
}

func (*ExceptionTypeContext) IsExceptionTypeContext() {}

func NewExceptionTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExceptionTypeContext {
	var p = new(ExceptionTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_exceptionType

	return p
}

func (s *ExceptionTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ExceptionTypeContext) ClassType() IClassTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassTypeContext)
}

func (s *ExceptionTypeContext) TypeVariable() ITypeVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeVariableContext)
}

func (s *ExceptionTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExceptionTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExceptionTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterExceptionType(s)
	}
}

func (s *ExceptionTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitExceptionType(s)
	}
}

func (p *Java8Parser) ExceptionType() (localctx IExceptionTypeContext) {
	localctx = NewExceptionTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, Java8ParserRULE_exceptionType)
	p.SetState(1112)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 94, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1110)
			p.ClassType()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1111)
			p.TypeVariable()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMethodBodyContext is an interface to support dynamic dispatch.
type IMethodBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Block() IBlockContext
	SEMI() antlr.TerminalNode

	// IsMethodBodyContext differentiates from other interfaces.
	IsMethodBodyContext()
}

type MethodBodyContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMethodBodyContext() *MethodBodyContext {
	var p = new(MethodBodyContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_methodBody
	return p
}

func InitEmptyMethodBodyContext(p *MethodBodyContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_methodBody
}

func (*MethodBodyContext) IsMethodBodyContext() {}

func NewMethodBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MethodBodyContext {
	var p = new(MethodBodyContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_methodBody

	return p
}

func (s *MethodBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *MethodBodyContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *MethodBodyContext) SEMI() antlr.TerminalNode {
	return s.GetToken(Java8ParserSEMI, 0)
}

func (s *MethodBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MethodBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MethodBodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterMethodBody(s)
	}
}

func (s *MethodBodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitMethodBody(s)
	}
}

func (p *Java8Parser) MethodBody() (localctx IMethodBodyContext) {
	localctx = NewMethodBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, Java8ParserRULE_methodBody)
	p.SetState(1116)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case Java8ParserLBRACE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1114)
			p.Block()
		}

	case Java8ParserSEMI:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1115)
			p.Match(Java8ParserSEMI)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInstanceInitializerContext is an interface to support dynamic dispatch.
type IInstanceInitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Block() IBlockContext

	// IsInstanceInitializerContext differentiates from other interfaces.
	IsInstanceInitializerContext()
}

type InstanceInitializerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInstanceInitializerContext() *InstanceInitializerContext {
	var p = new(InstanceInitializerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_instanceInitializer
	return p
}

func InitEmptyInstanceInitializerContext(p *InstanceInitializerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_instanceInitializer
}

func (*InstanceInitializerContext) IsInstanceInitializerContext() {}

func NewInstanceInitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstanceInitializerContext {
	var p = new(InstanceInitializerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_instanceInitializer

	return p
}

func (s *InstanceInitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *InstanceInitializerContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *InstanceInitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstanceInitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InstanceInitializerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterInstanceInitializer(s)
	}
}

func (s *InstanceInitializerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitInstanceInitializer(s)
	}
}

func (p *Java8Parser) InstanceInitializer() (localctx IInstanceInitializerContext) {
	localctx = NewInstanceInitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, Java8ParserRULE_instanceInitializer)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1118)
		p.Block()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStaticInitializerContext is an interface to support dynamic dispatch.
type IStaticInitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	STATIC() antlr.TerminalNode
	Block() IBlockContext

	// IsStaticInitializerContext differentiates from other interfaces.
	IsStaticInitializerContext()
}

type StaticInitializerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStaticInitializerContext() *StaticInitializerContext {
	var p = new(StaticInitializerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_staticInitializer
	return p
}

func InitEmptyStaticInitializerContext(p *StaticInitializerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_staticInitializer
}

func (*StaticInitializerContext) IsStaticInitializerContext() {}

func NewStaticInitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StaticInitializerContext {
	var p = new(StaticInitializerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_staticInitializer

	return p
}

func (s *StaticInitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *StaticInitializerContext) STATIC() antlr.TerminalNode {
	return s.GetToken(Java8ParserSTATIC, 0)
}

func (s *StaticInitializerContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *StaticInitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticInitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StaticInitializerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterStaticInitializer(s)
	}
}

func (s *StaticInitializerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitStaticInitializer(s)
	}
}

func (p *Java8Parser) StaticInitializer() (localctx IStaticInitializerContext) {
	localctx = NewStaticInitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, Java8ParserRULE_staticInitializer)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1120)
		p.Match(Java8ParserSTATIC)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1121)
		p.Block()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConstructorDeclarationContext is an interface to support dynamic dispatch.
type IConstructorDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ConstructorDeclarator() IConstructorDeclaratorContext
	ConstructorBody() IConstructorBodyContext
	AllConstructorModifier() []IConstructorModifierContext
	ConstructorModifier(i int) IConstructorModifierContext
	Throws_() IThrows_Context

	// IsConstructorDeclarationContext differentiates from other interfaces.
	IsConstructorDeclarationContext()
}

type ConstructorDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstructorDeclarationContext() *ConstructorDeclarationContext {
	var p = new(ConstructorDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_constructorDeclaration
	return p
}

func InitEmptyConstructorDeclarationContext(p *ConstructorDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_constructorDeclaration
}

func (*ConstructorDeclarationContext) IsConstructorDeclarationContext() {}

func NewConstructorDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstructorDeclarationContext {
	var p = new(ConstructorDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_constructorDeclaration

	return p
}

func (s *ConstructorDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstructorDeclarationContext) ConstructorDeclarator() IConstructorDeclaratorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstructorDeclaratorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstructorDeclaratorContext)
}

func (s *ConstructorDeclarationContext) ConstructorBody() IConstructorBodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstructorBodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstructorBodyContext)
}

func (s *ConstructorDeclarationContext) AllConstructorModifier() []IConstructorModifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IConstructorModifierContext); ok {
			len++
		}
	}

	tst := make([]IConstructorModifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IConstructorModifierContext); ok {
			tst[i] = t.(IConstructorModifierContext)
			i++
		}
	}

	return tst
}

func (s *ConstructorDeclarationContext) ConstructorModifier(i int) IConstructorModifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstructorModifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstructorModifierContext)
}

func (s *ConstructorDeclarationContext) Throws_() IThrows_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IThrows_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IThrows_Context)
}

func (s *ConstructorDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstructorDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstructorDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterConstructorDeclaration(s)
	}
}

func (s *ConstructorDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitConstructorDeclaration(s)
	}
}

func (p *Java8Parser) ConstructorDeclaration() (localctx IConstructorDeclarationContext) {
	localctx = NewConstructorDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, Java8ParserRULE_constructorDeclaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1126)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&60129542144) != 0) || _la == Java8ParserAT {
		{
			p.SetState(1123)
			p.ConstructorModifier()
		}

		p.SetState(1128)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1129)
		p.ConstructorDeclarator()
	}
	p.SetState(1131)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserTHROWS {
		{
			p.SetState(1130)
			p.Throws_()
		}

	}
	{
		p.SetState(1133)
		p.ConstructorBody()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConstructorModifierContext is an interface to support dynamic dispatch.
type IConstructorModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Annotation() IAnnotationContext
	PUBLIC() antlr.TerminalNode
	PROTECTED() antlr.TerminalNode
	PRIVATE() antlr.TerminalNode

	// IsConstructorModifierContext differentiates from other interfaces.
	IsConstructorModifierContext()
}

type ConstructorModifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstructorModifierContext() *ConstructorModifierContext {
	var p = new(ConstructorModifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_constructorModifier
	return p
}

func InitEmptyConstructorModifierContext(p *ConstructorModifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_constructorModifier
}

func (*ConstructorModifierContext) IsConstructorModifierContext() {}

func NewConstructorModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstructorModifierContext {
	var p = new(ConstructorModifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_constructorModifier

	return p
}

func (s *ConstructorModifierContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstructorModifierContext) Annotation() IAnnotationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *ConstructorModifierContext) PUBLIC() antlr.TerminalNode {
	return s.GetToken(Java8ParserPUBLIC, 0)
}

func (s *ConstructorModifierContext) PROTECTED() antlr.TerminalNode {
	return s.GetToken(Java8ParserPROTECTED, 0)
}

func (s *ConstructorModifierContext) PRIVATE() antlr.TerminalNode {
	return s.GetToken(Java8ParserPRIVATE, 0)
}

func (s *ConstructorModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstructorModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstructorModifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterConstructorModifier(s)
	}
}

func (s *ConstructorModifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitConstructorModifier(s)
	}
}

func (p *Java8Parser) ConstructorModifier() (localctx IConstructorModifierContext) {
	localctx = NewConstructorModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, Java8ParserRULE_constructorModifier)
	p.SetState(1139)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case Java8ParserAT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1135)
			p.Annotation()
		}

	case Java8ParserPUBLIC:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1136)
			p.Match(Java8ParserPUBLIC)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserPROTECTED:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1137)
			p.Match(Java8ParserPROTECTED)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserPRIVATE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1138)
			p.Match(Java8ParserPRIVATE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConstructorDeclaratorContext is an interface to support dynamic dispatch.
type IConstructorDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SimpleTypeName() ISimpleTypeNameContext
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	TypeParameters() ITypeParametersContext
	FormalParameterList() IFormalParameterListContext

	// IsConstructorDeclaratorContext differentiates from other interfaces.
	IsConstructorDeclaratorContext()
}

type ConstructorDeclaratorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstructorDeclaratorContext() *ConstructorDeclaratorContext {
	var p = new(ConstructorDeclaratorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_constructorDeclarator
	return p
}

func InitEmptyConstructorDeclaratorContext(p *ConstructorDeclaratorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_constructorDeclarator
}

func (*ConstructorDeclaratorContext) IsConstructorDeclaratorContext() {}

func NewConstructorDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstructorDeclaratorContext {
	var p = new(ConstructorDeclaratorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_constructorDeclarator

	return p
}

func (s *ConstructorDeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstructorDeclaratorContext) SimpleTypeName() ISimpleTypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimpleTypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimpleTypeNameContext)
}

func (s *ConstructorDeclaratorContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserLPAREN, 0)
}

func (s *ConstructorDeclaratorContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRPAREN, 0)
}

func (s *ConstructorDeclaratorContext) TypeParameters() ITypeParametersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeParametersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeParametersContext)
}

func (s *ConstructorDeclaratorContext) FormalParameterList() IFormalParameterListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFormalParameterListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFormalParameterListContext)
}

func (s *ConstructorDeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstructorDeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstructorDeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterConstructorDeclarator(s)
	}
}

func (s *ConstructorDeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitConstructorDeclarator(s)
	}
}

func (p *Java8Parser) ConstructorDeclarator() (localctx IConstructorDeclaratorContext) {
	localctx = NewConstructorDeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, Java8ParserRULE_constructorDeclarator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1142)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserLT {
		{
			p.SetState(1141)
			p.TypeParameters()
		}

	}
	{
		p.SetState(1144)
		p.SimpleTypeName()
	}
	{
		p.SetState(1145)
		p.Match(Java8ParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1147)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&138111369512) != 0) || _la == Java8ParserIdentifier || _la == Java8ParserAT {
		{
			p.SetState(1146)
			p.FormalParameterList()
		}

	}
	{
		p.SetState(1149)
		p.Match(Java8ParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISimpleTypeNameContext is an interface to support dynamic dispatch.
type ISimpleTypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode

	// IsSimpleTypeNameContext differentiates from other interfaces.
	IsSimpleTypeNameContext()
}

type SimpleTypeNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimpleTypeNameContext() *SimpleTypeNameContext {
	var p = new(SimpleTypeNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_simpleTypeName
	return p
}

func InitEmptySimpleTypeNameContext(p *SimpleTypeNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_simpleTypeName
}

func (*SimpleTypeNameContext) IsSimpleTypeNameContext() {}

func NewSimpleTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimpleTypeNameContext {
	var p = new(SimpleTypeNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_simpleTypeName

	return p
}

func (s *SimpleTypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *SimpleTypeNameContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *SimpleTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleTypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SimpleTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterSimpleTypeName(s)
	}
}

func (s *SimpleTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitSimpleTypeName(s)
	}
}

func (p *Java8Parser) SimpleTypeName() (localctx ISimpleTypeNameContext) {
	localctx = NewSimpleTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, Java8ParserRULE_simpleTypeName)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1151)
		p.Match(Java8ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConstructorBodyContext is an interface to support dynamic dispatch.
type IConstructorBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	ExplicitConstructorInvocation() IExplicitConstructorInvocationContext
	BlockStatements() IBlockStatementsContext

	// IsConstructorBodyContext differentiates from other interfaces.
	IsConstructorBodyContext()
}

type ConstructorBodyContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstructorBodyContext() *ConstructorBodyContext {
	var p = new(ConstructorBodyContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_constructorBody
	return p
}

func InitEmptyConstructorBodyContext(p *ConstructorBodyContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_constructorBody
}

func (*ConstructorBodyContext) IsConstructorBodyContext() {}

func NewConstructorBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstructorBodyContext {
	var p = new(ConstructorBodyContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_constructorBody

	return p
}

func (s *ConstructorBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstructorBodyContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(Java8ParserLBRACE, 0)
}

func (s *ConstructorBodyContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(Java8ParserRBRACE, 0)
}

func (s *ConstructorBodyContext) ExplicitConstructorInvocation() IExplicitConstructorInvocationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExplicitConstructorInvocationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExplicitConstructorInvocationContext)
}

func (s *ConstructorBodyContext) BlockStatements() IBlockStatementsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockStatementsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockStatementsContext)
}

func (s *ConstructorBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstructorBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstructorBodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterConstructorBody(s)
	}
}

func (s *ConstructorBodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitConstructorBody(s)
	}
}

func (p *Java8Parser) ConstructorBody() (localctx IConstructorBodyContext) {
	localctx = NewConstructorBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, Java8ParserRULE_constructorBody)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1153)
		p.Match(Java8ParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1155)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 101, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1154)
			p.ExplicitConstructorInvocation()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1158)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8359349417232995522) != 0) || ((int64((_la-79)) & ^0x3f) == 0 && ((int64(1)<<(_la-79))&25165827) != 0) {
		{
			p.SetState(1157)
			p.BlockStatements()
		}

	}
	{
		p.SetState(1160)
		p.Match(Java8ParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExplicitConstructorInvocationContext is an interface to support dynamic dispatch.
type IExplicitConstructorInvocationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	THIS() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	SEMI() antlr.TerminalNode
	TypeArguments() ITypeArgumentsContext
	ArgumentList() IArgumentListContext
	SUPER() antlr.TerminalNode
	ExpressionName() IExpressionNameContext
	DOT() antlr.TerminalNode
	Primary() IPrimaryContext

	// IsExplicitConstructorInvocationContext differentiates from other interfaces.
	IsExplicitConstructorInvocationContext()
}

type ExplicitConstructorInvocationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExplicitConstructorInvocationContext() *ExplicitConstructorInvocationContext {
	var p = new(ExplicitConstructorInvocationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_explicitConstructorInvocation
	return p
}

func InitEmptyExplicitConstructorInvocationContext(p *ExplicitConstructorInvocationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_explicitConstructorInvocation
}

func (*ExplicitConstructorInvocationContext) IsExplicitConstructorInvocationContext() {}

func NewExplicitConstructorInvocationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExplicitConstructorInvocationContext {
	var p = new(ExplicitConstructorInvocationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_explicitConstructorInvocation

	return p
}

func (s *ExplicitConstructorInvocationContext) GetParser() antlr.Parser { return s.parser }

func (s *ExplicitConstructorInvocationContext) THIS() antlr.TerminalNode {
	return s.GetToken(Java8ParserTHIS, 0)
}

func (s *ExplicitConstructorInvocationContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserLPAREN, 0)
}

func (s *ExplicitConstructorInvocationContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRPAREN, 0)
}

func (s *ExplicitConstructorInvocationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(Java8ParserSEMI, 0)
}

func (s *ExplicitConstructorInvocationContext) TypeArguments() ITypeArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeArgumentsContext)
}

func (s *ExplicitConstructorInvocationContext) ArgumentList() IArgumentListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArgumentListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArgumentListContext)
}

func (s *ExplicitConstructorInvocationContext) SUPER() antlr.TerminalNode {
	return s.GetToken(Java8ParserSUPER, 0)
}

func (s *ExplicitConstructorInvocationContext) ExpressionName() IExpressionNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionNameContext)
}

func (s *ExplicitConstructorInvocationContext) DOT() antlr.TerminalNode {
	return s.GetToken(Java8ParserDOT, 0)
}

func (s *ExplicitConstructorInvocationContext) Primary() IPrimaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimaryContext)
}

func (s *ExplicitConstructorInvocationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExplicitConstructorInvocationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExplicitConstructorInvocationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterExplicitConstructorInvocation(s)
	}
}

func (s *ExplicitConstructorInvocationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitExplicitConstructorInvocation(s)
	}
}

func (p *Java8Parser) ExplicitConstructorInvocation() (localctx IExplicitConstructorInvocationContext) {
	localctx = NewExplicitConstructorInvocationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, Java8ParserRULE_explicitConstructorInvocation)
	var _la int

	p.SetState(1208)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 111, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1163)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(1162)
				p.TypeArguments()
			}

		}
		{
			p.SetState(1165)
			p.Match(Java8ParserTHIS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1166)
			p.Match(Java8ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1168)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&286270087177978152) != 0) || ((int64((_la-69)) & ^0x3f) == 0 && ((int64(1)<<(_la-69))&25769819139) != 0) {
			{
				p.SetState(1167)
				p.ArgumentList()
			}

		}
		{
			p.SetState(1170)
			p.Match(Java8ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1171)
			p.Match(Java8ParserSEMI)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1173)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(1172)
				p.TypeArguments()
			}

		}
		{
			p.SetState(1175)
			p.Match(Java8ParserSUPER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1176)
			p.Match(Java8ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1178)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&286270087177978152) != 0) || ((int64((_la-69)) & ^0x3f) == 0 && ((int64(1)<<(_la-69))&25769819139) != 0) {
			{
				p.SetState(1177)
				p.ArgumentList()
			}

		}
		{
			p.SetState(1180)
			p.Match(Java8ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1181)
			p.Match(Java8ParserSEMI)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1182)
			p.ExpressionName()
		}
		{
			p.SetState(1183)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1185)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(1184)
				p.TypeArguments()
			}

		}
		{
			p.SetState(1187)
			p.Match(Java8ParserSUPER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1188)
			p.Match(Java8ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1190)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&286270087177978152) != 0) || ((int64((_la-69)) & ^0x3f) == 0 && ((int64(1)<<(_la-69))&25769819139) != 0) {
			{
				p.SetState(1189)
				p.ArgumentList()
			}

		}
		{
			p.SetState(1192)
			p.Match(Java8ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1193)
			p.Match(Java8ParserSEMI)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1195)
			p.Primary()
		}
		{
			p.SetState(1196)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1198)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(1197)
				p.TypeArguments()
			}

		}
		{
			p.SetState(1200)
			p.Match(Java8ParserSUPER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1201)
			p.Match(Java8ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1203)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&286270087177978152) != 0) || ((int64((_la-69)) & ^0x3f) == 0 && ((int64(1)<<(_la-69))&25769819139) != 0) {
			{
				p.SetState(1202)
				p.ArgumentList()
			}

		}
		{
			p.SetState(1205)
			p.Match(Java8ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1206)
			p.Match(Java8ParserSEMI)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEnumDeclarationContext is an interface to support dynamic dispatch.
type IEnumDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ENUM() antlr.TerminalNode
	Identifier() antlr.TerminalNode
	EnumBody() IEnumBodyContext
	AllClassModifier() []IClassModifierContext
	ClassModifier(i int) IClassModifierContext
	Superinterfaces() ISuperinterfacesContext

	// IsEnumDeclarationContext differentiates from other interfaces.
	IsEnumDeclarationContext()
}

type EnumDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumDeclarationContext() *EnumDeclarationContext {
	var p = new(EnumDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_enumDeclaration
	return p
}

func InitEmptyEnumDeclarationContext(p *EnumDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_enumDeclaration
}

func (*EnumDeclarationContext) IsEnumDeclarationContext() {}

func NewEnumDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumDeclarationContext {
	var p = new(EnumDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_enumDeclaration

	return p
}

func (s *EnumDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumDeclarationContext) ENUM() antlr.TerminalNode {
	return s.GetToken(Java8ParserENUM, 0)
}

func (s *EnumDeclarationContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *EnumDeclarationContext) EnumBody() IEnumBodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumBodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumBodyContext)
}

func (s *EnumDeclarationContext) AllClassModifier() []IClassModifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IClassModifierContext); ok {
			len++
		}
	}

	tst := make([]IClassModifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IClassModifierContext); ok {
			tst[i] = t.(IClassModifierContext)
			i++
		}
	}

	return tst
}

func (s *EnumDeclarationContext) ClassModifier(i int) IClassModifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassModifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassModifierContext)
}

func (s *EnumDeclarationContext) Superinterfaces() ISuperinterfacesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISuperinterfacesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISuperinterfacesContext)
}

func (s *EnumDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterEnumDeclaration(s)
	}
}

func (s *EnumDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitEnumDeclaration(s)
	}
}

func (p *Java8Parser) EnumDeclaration() (localctx IEnumDeclarationContext) {
	localctx = NewEnumDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, Java8ParserRULE_enumDeclaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1213)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&884763525122) != 0) || _la == Java8ParserAT {
		{
			p.SetState(1210)
			p.ClassModifier()
		}

		p.SetState(1215)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1216)
		p.Match(Java8ParserENUM)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1217)
		p.Match(Java8ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1219)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserIMPLEMENTS {
		{
			p.SetState(1218)
			p.Superinterfaces()
		}

	}
	{
		p.SetState(1221)
		p.EnumBody()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEnumBodyContext is an interface to support dynamic dispatch.
type IEnumBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	EnumConstantList() IEnumConstantListContext
	COMMA() antlr.TerminalNode
	EnumBodyDeclarations() IEnumBodyDeclarationsContext

	// IsEnumBodyContext differentiates from other interfaces.
	IsEnumBodyContext()
}

type EnumBodyContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumBodyContext() *EnumBodyContext {
	var p = new(EnumBodyContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_enumBody
	return p
}

func InitEmptyEnumBodyContext(p *EnumBodyContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_enumBody
}

func (*EnumBodyContext) IsEnumBodyContext() {}

func NewEnumBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumBodyContext {
	var p = new(EnumBodyContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_enumBody

	return p
}

func (s *EnumBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumBodyContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(Java8ParserLBRACE, 0)
}

func (s *EnumBodyContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(Java8ParserRBRACE, 0)
}

func (s *EnumBodyContext) EnumConstantList() IEnumConstantListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumConstantListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumConstantListContext)
}

func (s *EnumBodyContext) COMMA() antlr.TerminalNode {
	return s.GetToken(Java8ParserCOMMA, 0)
}

func (s *EnumBodyContext) EnumBodyDeclarations() IEnumBodyDeclarationsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumBodyDeclarationsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumBodyDeclarationsContext)
}

func (s *EnumBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumBodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterEnumBody(s)
	}
}

func (s *EnumBodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitEnumBody(s)
	}
}

func (p *Java8Parser) EnumBody() (localctx IEnumBodyContext) {
	localctx = NewEnumBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, Java8ParserRULE_enumBody)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1223)
		p.Match(Java8ParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1225)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserIdentifier || _la == Java8ParserAT {
		{
			p.SetState(1224)
			p.EnumConstantList()
		}

	}
	p.SetState(1228)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserCOMMA {
		{
			p.SetState(1227)
			p.Match(Java8ParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1231)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserSEMI {
		{
			p.SetState(1230)
			p.EnumBodyDeclarations()
		}

	}
	{
		p.SetState(1233)
		p.Match(Java8ParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEnumConstantListContext is an interface to support dynamic dispatch.
type IEnumConstantListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllEnumConstant() []IEnumConstantContext
	EnumConstant(i int) IEnumConstantContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsEnumConstantListContext differentiates from other interfaces.
	IsEnumConstantListContext()
}

type EnumConstantListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumConstantListContext() *EnumConstantListContext {
	var p = new(EnumConstantListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_enumConstantList
	return p
}

func InitEmptyEnumConstantListContext(p *EnumConstantListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_enumConstantList
}

func (*EnumConstantListContext) IsEnumConstantListContext() {}

func NewEnumConstantListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumConstantListContext {
	var p = new(EnumConstantListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_enumConstantList

	return p
}

func (s *EnumConstantListContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumConstantListContext) AllEnumConstant() []IEnumConstantContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEnumConstantContext); ok {
			len++
		}
	}

	tst := make([]IEnumConstantContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEnumConstantContext); ok {
			tst[i] = t.(IEnumConstantContext)
			i++
		}
	}

	return tst
}

func (s *EnumConstantListContext) EnumConstant(i int) IEnumConstantContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumConstantContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumConstantContext)
}

func (s *EnumConstantListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserCOMMA)
}

func (s *EnumConstantListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserCOMMA, i)
}

func (s *EnumConstantListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumConstantListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumConstantListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterEnumConstantList(s)
	}
}

func (s *EnumConstantListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitEnumConstantList(s)
	}
}

func (p *Java8Parser) EnumConstantList() (localctx IEnumConstantListContext) {
	localctx = NewEnumConstantListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, Java8ParserRULE_enumConstantList)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1235)
		p.EnumConstant()
	}
	p.SetState(1240)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 117, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1236)
				p.Match(Java8ParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1237)
				p.EnumConstant()
			}

		}
		p.SetState(1242)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 117, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEnumConstantContext is an interface to support dynamic dispatch.
type IEnumConstantContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode
	AllEnumConstantModifier() []IEnumConstantModifierContext
	EnumConstantModifier(i int) IEnumConstantModifierContext
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	ClassBody() IClassBodyContext
	ArgumentList() IArgumentListContext

	// IsEnumConstantContext differentiates from other interfaces.
	IsEnumConstantContext()
}

type EnumConstantContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumConstantContext() *EnumConstantContext {
	var p = new(EnumConstantContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_enumConstant
	return p
}

func InitEmptyEnumConstantContext(p *EnumConstantContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_enumConstant
}

func (*EnumConstantContext) IsEnumConstantContext() {}

func NewEnumConstantContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumConstantContext {
	var p = new(EnumConstantContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_enumConstant

	return p
}

func (s *EnumConstantContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumConstantContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *EnumConstantContext) AllEnumConstantModifier() []IEnumConstantModifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEnumConstantModifierContext); ok {
			len++
		}
	}

	tst := make([]IEnumConstantModifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEnumConstantModifierContext); ok {
			tst[i] = t.(IEnumConstantModifierContext)
			i++
		}
	}

	return tst
}

func (s *EnumConstantContext) EnumConstantModifier(i int) IEnumConstantModifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumConstantModifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumConstantModifierContext)
}

func (s *EnumConstantContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserLPAREN, 0)
}

func (s *EnumConstantContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRPAREN, 0)
}

func (s *EnumConstantContext) ClassBody() IClassBodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassBodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassBodyContext)
}

func (s *EnumConstantContext) ArgumentList() IArgumentListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArgumentListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArgumentListContext)
}

func (s *EnumConstantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumConstantContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumConstantContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterEnumConstant(s)
	}
}

func (s *EnumConstantContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitEnumConstant(s)
	}
}

func (p *Java8Parser) EnumConstant() (localctx IEnumConstantContext) {
	localctx = NewEnumConstantContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, Java8ParserRULE_enumConstant)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1246)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Java8ParserAT {
		{
			p.SetState(1243)
			p.EnumConstantModifier()
		}

		p.SetState(1248)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1249)
		p.Match(Java8ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1255)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserLPAREN {
		{
			p.SetState(1250)
			p.Match(Java8ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1252)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&286270087177978152) != 0) || ((int64((_la-69)) & ^0x3f) == 0 && ((int64(1)<<(_la-69))&25769819139) != 0) {
			{
				p.SetState(1251)
				p.ArgumentList()
			}

		}
		{
			p.SetState(1254)
			p.Match(Java8ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1258)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserLBRACE {
		{
			p.SetState(1257)
			p.ClassBody()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEnumConstantModifierContext is an interface to support dynamic dispatch.
type IEnumConstantModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Annotation() IAnnotationContext

	// IsEnumConstantModifierContext differentiates from other interfaces.
	IsEnumConstantModifierContext()
}

type EnumConstantModifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumConstantModifierContext() *EnumConstantModifierContext {
	var p = new(EnumConstantModifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_enumConstantModifier
	return p
}

func InitEmptyEnumConstantModifierContext(p *EnumConstantModifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_enumConstantModifier
}

func (*EnumConstantModifierContext) IsEnumConstantModifierContext() {}

func NewEnumConstantModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumConstantModifierContext {
	var p = new(EnumConstantModifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_enumConstantModifier

	return p
}

func (s *EnumConstantModifierContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumConstantModifierContext) Annotation() IAnnotationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *EnumConstantModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumConstantModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumConstantModifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterEnumConstantModifier(s)
	}
}

func (s *EnumConstantModifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitEnumConstantModifier(s)
	}
}

func (p *Java8Parser) EnumConstantModifier() (localctx IEnumConstantModifierContext) {
	localctx = NewEnumConstantModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, Java8ParserRULE_enumConstantModifier)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1260)
		p.Annotation()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEnumBodyDeclarationsContext is an interface to support dynamic dispatch.
type IEnumBodyDeclarationsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SEMI() antlr.TerminalNode
	AllClassBodyDeclaration() []IClassBodyDeclarationContext
	ClassBodyDeclaration(i int) IClassBodyDeclarationContext

	// IsEnumBodyDeclarationsContext differentiates from other interfaces.
	IsEnumBodyDeclarationsContext()
}

type EnumBodyDeclarationsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumBodyDeclarationsContext() *EnumBodyDeclarationsContext {
	var p = new(EnumBodyDeclarationsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_enumBodyDeclarations
	return p
}

func InitEmptyEnumBodyDeclarationsContext(p *EnumBodyDeclarationsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_enumBodyDeclarations
}

func (*EnumBodyDeclarationsContext) IsEnumBodyDeclarationsContext() {}

func NewEnumBodyDeclarationsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumBodyDeclarationsContext {
	var p = new(EnumBodyDeclarationsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_enumBodyDeclarations

	return p
}

func (s *EnumBodyDeclarationsContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumBodyDeclarationsContext) SEMI() antlr.TerminalNode {
	return s.GetToken(Java8ParserSEMI, 0)
}

func (s *EnumBodyDeclarationsContext) AllClassBodyDeclaration() []IClassBodyDeclarationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IClassBodyDeclarationContext); ok {
			len++
		}
	}

	tst := make([]IClassBodyDeclarationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IClassBodyDeclarationContext); ok {
			tst[i] = t.(IClassBodyDeclarationContext)
			i++
		}
	}

	return tst
}

func (s *EnumBodyDeclarationsContext) ClassBodyDeclaration(i int) IClassBodyDeclarationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassBodyDeclarationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassBodyDeclarationContext)
}

func (s *EnumBodyDeclarationsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumBodyDeclarationsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumBodyDeclarationsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterEnumBodyDeclarations(s)
	}
}

func (s *EnumBodyDeclarationsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitEnumBodyDeclarations(s)
	}
}

func (p *Java8Parser) EnumBodyDeclarations() (localctx IEnumBodyDeclarationsContext) {
	localctx = NewEnumBodyDeclarationsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, Java8ParserRULE_enumBodyDeclarations)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1262)
		p.Match(Java8ParserSEMI)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1266)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8645991068613655766) != 0) || ((int64((_la-68)) & ^0x3f) == 0 && ((int64(1)<<(_la-68))&51539607553) != 0) {
		{
			p.SetState(1263)
			p.ClassBodyDeclaration()
		}

		p.SetState(1268)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInterfaceDeclarationContext is an interface to support dynamic dispatch.
type IInterfaceDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NormalInterfaceDeclaration() INormalInterfaceDeclarationContext
	AnnotationTypeDeclaration() IAnnotationTypeDeclarationContext

	// IsInterfaceDeclarationContext differentiates from other interfaces.
	IsInterfaceDeclarationContext()
}

type InterfaceDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceDeclarationContext() *InterfaceDeclarationContext {
	var p = new(InterfaceDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_interfaceDeclaration
	return p
}

func InitEmptyInterfaceDeclarationContext(p *InterfaceDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_interfaceDeclaration
}

func (*InterfaceDeclarationContext) IsInterfaceDeclarationContext() {}

func NewInterfaceDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceDeclarationContext {
	var p = new(InterfaceDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_interfaceDeclaration

	return p
}

func (s *InterfaceDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceDeclarationContext) NormalInterfaceDeclaration() INormalInterfaceDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INormalInterfaceDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INormalInterfaceDeclarationContext)
}

func (s *InterfaceDeclarationContext) AnnotationTypeDeclaration() IAnnotationTypeDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationTypeDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationTypeDeclarationContext)
}

func (s *InterfaceDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterInterfaceDeclaration(s)
	}
}

func (s *InterfaceDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitInterfaceDeclaration(s)
	}
}

func (p *Java8Parser) InterfaceDeclaration() (localctx IInterfaceDeclarationContext) {
	localctx = NewInterfaceDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, Java8ParserRULE_interfaceDeclaration)
	p.SetState(1271)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 123, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1269)
			p.NormalInterfaceDeclaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1270)
			p.AnnotationTypeDeclaration()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INormalInterfaceDeclarationContext is an interface to support dynamic dispatch.
type INormalInterfaceDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	INTERFACE() antlr.TerminalNode
	Identifier() antlr.TerminalNode
	InterfaceBody() IInterfaceBodyContext
	AllInterfaceModifier() []IInterfaceModifierContext
	InterfaceModifier(i int) IInterfaceModifierContext
	TypeParameters() ITypeParametersContext
	ExtendsInterfaces() IExtendsInterfacesContext

	// IsNormalInterfaceDeclarationContext differentiates from other interfaces.
	IsNormalInterfaceDeclarationContext()
}

type NormalInterfaceDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNormalInterfaceDeclarationContext() *NormalInterfaceDeclarationContext {
	var p = new(NormalInterfaceDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_normalInterfaceDeclaration
	return p
}

func InitEmptyNormalInterfaceDeclarationContext(p *NormalInterfaceDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_normalInterfaceDeclaration
}

func (*NormalInterfaceDeclarationContext) IsNormalInterfaceDeclarationContext() {}

func NewNormalInterfaceDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NormalInterfaceDeclarationContext {
	var p = new(NormalInterfaceDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_normalInterfaceDeclaration

	return p
}

func (s *NormalInterfaceDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *NormalInterfaceDeclarationContext) INTERFACE() antlr.TerminalNode {
	return s.GetToken(Java8ParserINTERFACE, 0)
}

func (s *NormalInterfaceDeclarationContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *NormalInterfaceDeclarationContext) InterfaceBody() IInterfaceBodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterfaceBodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterfaceBodyContext)
}

func (s *NormalInterfaceDeclarationContext) AllInterfaceModifier() []IInterfaceModifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IInterfaceModifierContext); ok {
			len++
		}
	}

	tst := make([]IInterfaceModifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IInterfaceModifierContext); ok {
			tst[i] = t.(IInterfaceModifierContext)
			i++
		}
	}

	return tst
}

func (s *NormalInterfaceDeclarationContext) InterfaceModifier(i int) IInterfaceModifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterfaceModifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterfaceModifierContext)
}

func (s *NormalInterfaceDeclarationContext) TypeParameters() ITypeParametersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeParametersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeParametersContext)
}

func (s *NormalInterfaceDeclarationContext) ExtendsInterfaces() IExtendsInterfacesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExtendsInterfacesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExtendsInterfacesContext)
}

func (s *NormalInterfaceDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NormalInterfaceDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NormalInterfaceDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterNormalInterfaceDeclaration(s)
	}
}

func (s *NormalInterfaceDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitNormalInterfaceDeclaration(s)
	}
}

func (p *Java8Parser) NormalInterfaceDeclaration() (localctx INormalInterfaceDeclarationContext) {
	localctx = NewNormalInterfaceDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, Java8ParserRULE_normalInterfaceDeclaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1276)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&884763262978) != 0) || _la == Java8ParserAT {
		{
			p.SetState(1273)
			p.InterfaceModifier()
		}

		p.SetState(1278)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1279)
		p.Match(Java8ParserINTERFACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1280)
		p.Match(Java8ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1282)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserLT {
		{
			p.SetState(1281)
			p.TypeParameters()
		}

	}
	p.SetState(1285)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserEXTENDS {
		{
			p.SetState(1284)
			p.ExtendsInterfaces()
		}

	}
	{
		p.SetState(1287)
		p.InterfaceBody()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInterfaceModifierContext is an interface to support dynamic dispatch.
type IInterfaceModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Annotation() IAnnotationContext
	PUBLIC() antlr.TerminalNode
	PROTECTED() antlr.TerminalNode
	PRIVATE() antlr.TerminalNode
	ABSTRACT() antlr.TerminalNode
	STATIC() antlr.TerminalNode
	STRICTFP() antlr.TerminalNode

	// IsInterfaceModifierContext differentiates from other interfaces.
	IsInterfaceModifierContext()
}

type InterfaceModifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceModifierContext() *InterfaceModifierContext {
	var p = new(InterfaceModifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_interfaceModifier
	return p
}

func InitEmptyInterfaceModifierContext(p *InterfaceModifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_interfaceModifier
}

func (*InterfaceModifierContext) IsInterfaceModifierContext() {}

func NewInterfaceModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceModifierContext {
	var p = new(InterfaceModifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_interfaceModifier

	return p
}

func (s *InterfaceModifierContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceModifierContext) Annotation() IAnnotationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *InterfaceModifierContext) PUBLIC() antlr.TerminalNode {
	return s.GetToken(Java8ParserPUBLIC, 0)
}

func (s *InterfaceModifierContext) PROTECTED() antlr.TerminalNode {
	return s.GetToken(Java8ParserPROTECTED, 0)
}

func (s *InterfaceModifierContext) PRIVATE() antlr.TerminalNode {
	return s.GetToken(Java8ParserPRIVATE, 0)
}

func (s *InterfaceModifierContext) ABSTRACT() antlr.TerminalNode {
	return s.GetToken(Java8ParserABSTRACT, 0)
}

func (s *InterfaceModifierContext) STATIC() antlr.TerminalNode {
	return s.GetToken(Java8ParserSTATIC, 0)
}

func (s *InterfaceModifierContext) STRICTFP() antlr.TerminalNode {
	return s.GetToken(Java8ParserSTRICTFP, 0)
}

func (s *InterfaceModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceModifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterInterfaceModifier(s)
	}
}

func (s *InterfaceModifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitInterfaceModifier(s)
	}
}

func (p *Java8Parser) InterfaceModifier() (localctx IInterfaceModifierContext) {
	localctx = NewInterfaceModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, Java8ParserRULE_interfaceModifier)
	p.SetState(1296)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case Java8ParserAT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1289)
			p.Annotation()
		}

	case Java8ParserPUBLIC:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1290)
			p.Match(Java8ParserPUBLIC)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserPROTECTED:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1291)
			p.Match(Java8ParserPROTECTED)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserPRIVATE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1292)
			p.Match(Java8ParserPRIVATE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserABSTRACT:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1293)
			p.Match(Java8ParserABSTRACT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserSTATIC:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1294)
			p.Match(Java8ParserSTATIC)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserSTRICTFP:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1295)
			p.Match(Java8ParserSTRICTFP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExtendsInterfacesContext is an interface to support dynamic dispatch.
type IExtendsInterfacesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EXTENDS() antlr.TerminalNode
	InterfaceTypeList() IInterfaceTypeListContext

	// IsExtendsInterfacesContext differentiates from other interfaces.
	IsExtendsInterfacesContext()
}

type ExtendsInterfacesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExtendsInterfacesContext() *ExtendsInterfacesContext {
	var p = new(ExtendsInterfacesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_extendsInterfaces
	return p
}

func InitEmptyExtendsInterfacesContext(p *ExtendsInterfacesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_extendsInterfaces
}

func (*ExtendsInterfacesContext) IsExtendsInterfacesContext() {}

func NewExtendsInterfacesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExtendsInterfacesContext {
	var p = new(ExtendsInterfacesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_extendsInterfaces

	return p
}

func (s *ExtendsInterfacesContext) GetParser() antlr.Parser { return s.parser }

func (s *ExtendsInterfacesContext) EXTENDS() antlr.TerminalNode {
	return s.GetToken(Java8ParserEXTENDS, 0)
}

func (s *ExtendsInterfacesContext) InterfaceTypeList() IInterfaceTypeListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterfaceTypeListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterfaceTypeListContext)
}

func (s *ExtendsInterfacesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExtendsInterfacesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExtendsInterfacesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterExtendsInterfaces(s)
	}
}

func (s *ExtendsInterfacesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitExtendsInterfaces(s)
	}
}

func (p *Java8Parser) ExtendsInterfaces() (localctx IExtendsInterfacesContext) {
	localctx = NewExtendsInterfacesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, Java8ParserRULE_extendsInterfaces)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1298)
		p.Match(Java8ParserEXTENDS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1299)
		p.InterfaceTypeList()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInterfaceBodyContext is an interface to support dynamic dispatch.
type IInterfaceBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	AllInterfaceMemberDeclaration() []IInterfaceMemberDeclarationContext
	InterfaceMemberDeclaration(i int) IInterfaceMemberDeclarationContext

	// IsInterfaceBodyContext differentiates from other interfaces.
	IsInterfaceBodyContext()
}

type InterfaceBodyContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceBodyContext() *InterfaceBodyContext {
	var p = new(InterfaceBodyContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_interfaceBody
	return p
}

func InitEmptyInterfaceBodyContext(p *InterfaceBodyContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_interfaceBody
}

func (*InterfaceBodyContext) IsInterfaceBodyContext() {}

func NewInterfaceBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceBodyContext {
	var p = new(InterfaceBodyContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_interfaceBody

	return p
}

func (s *InterfaceBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceBodyContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(Java8ParserLBRACE, 0)
}

func (s *InterfaceBodyContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(Java8ParserRBRACE, 0)
}

func (s *InterfaceBodyContext) AllInterfaceMemberDeclaration() []IInterfaceMemberDeclarationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IInterfaceMemberDeclarationContext); ok {
			len++
		}
	}

	tst := make([]IInterfaceMemberDeclarationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IInterfaceMemberDeclarationContext); ok {
			tst[i] = t.(IInterfaceMemberDeclarationContext)
			i++
		}
	}

	return tst
}

func (s *InterfaceBodyContext) InterfaceMemberDeclaration(i int) IInterfaceMemberDeclarationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterfaceMemberDeclarationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterfaceMemberDeclarationContext)
}

func (s *InterfaceBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceBodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterInterfaceBody(s)
	}
}

func (s *InterfaceBodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitInterfaceBody(s)
	}
}

func (p *Java8Parser) InterfaceBody() (localctx IInterfaceBodyContext) {
	localctx = NewInterfaceBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, Java8ParserRULE_interfaceBody)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1301)
		p.Match(Java8ParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1305)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-9223089538734927062) != 0) || ((int64((_la-68)) & ^0x3f) == 0 && ((int64(1)<<(_la-68))&51539607553) != 0) {
		{
			p.SetState(1302)
			p.InterfaceMemberDeclaration()
		}

		p.SetState(1307)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1308)
		p.Match(Java8ParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInterfaceMemberDeclarationContext is an interface to support dynamic dispatch.
type IInterfaceMemberDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ConstantDeclaration() IConstantDeclarationContext
	InterfaceMethodDeclaration() IInterfaceMethodDeclarationContext
	ClassDeclaration() IClassDeclarationContext
	InterfaceDeclaration() IInterfaceDeclarationContext
	SEMI() antlr.TerminalNode

	// IsInterfaceMemberDeclarationContext differentiates from other interfaces.
	IsInterfaceMemberDeclarationContext()
}

type InterfaceMemberDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceMemberDeclarationContext() *InterfaceMemberDeclarationContext {
	var p = new(InterfaceMemberDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_interfaceMemberDeclaration
	return p
}

func InitEmptyInterfaceMemberDeclarationContext(p *InterfaceMemberDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_interfaceMemberDeclaration
}

func (*InterfaceMemberDeclarationContext) IsInterfaceMemberDeclarationContext() {}

func NewInterfaceMemberDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceMemberDeclarationContext {
	var p = new(InterfaceMemberDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_interfaceMemberDeclaration

	return p
}

func (s *InterfaceMemberDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceMemberDeclarationContext) ConstantDeclaration() IConstantDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstantDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstantDeclarationContext)
}

func (s *InterfaceMemberDeclarationContext) InterfaceMethodDeclaration() IInterfaceMethodDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterfaceMethodDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterfaceMethodDeclarationContext)
}

func (s *InterfaceMemberDeclarationContext) ClassDeclaration() IClassDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassDeclarationContext)
}

func (s *InterfaceMemberDeclarationContext) InterfaceDeclaration() IInterfaceDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterfaceDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterfaceDeclarationContext)
}

func (s *InterfaceMemberDeclarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(Java8ParserSEMI, 0)
}

func (s *InterfaceMemberDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceMemberDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceMemberDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterInterfaceMemberDeclaration(s)
	}
}

func (s *InterfaceMemberDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitInterfaceMemberDeclaration(s)
	}
}

func (p *Java8Parser) InterfaceMemberDeclaration() (localctx IInterfaceMemberDeclarationContext) {
	localctx = NewInterfaceMemberDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, Java8ParserRULE_interfaceMemberDeclaration)
	p.SetState(1315)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 129, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1310)
			p.ConstantDeclaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1311)
			p.InterfaceMethodDeclaration()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1312)
			p.ClassDeclaration()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1313)
			p.InterfaceDeclaration()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1314)
			p.Match(Java8ParserSEMI)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConstantDeclarationContext is an interface to support dynamic dispatch.
type IConstantDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UnannType() IUnannTypeContext
	VariableDeclaratorList() IVariableDeclaratorListContext
	SEMI() antlr.TerminalNode
	AllConstantModifier() []IConstantModifierContext
	ConstantModifier(i int) IConstantModifierContext

	// IsConstantDeclarationContext differentiates from other interfaces.
	IsConstantDeclarationContext()
}

type ConstantDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstantDeclarationContext() *ConstantDeclarationContext {
	var p = new(ConstantDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_constantDeclaration
	return p
}

func InitEmptyConstantDeclarationContext(p *ConstantDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_constantDeclaration
}

func (*ConstantDeclarationContext) IsConstantDeclarationContext() {}

func NewConstantDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstantDeclarationContext {
	var p = new(ConstantDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_constantDeclaration

	return p
}

func (s *ConstantDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstantDeclarationContext) UnannType() IUnannTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnannTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnannTypeContext)
}

func (s *ConstantDeclarationContext) VariableDeclaratorList() IVariableDeclaratorListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableDeclaratorListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableDeclaratorListContext)
}

func (s *ConstantDeclarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(Java8ParserSEMI, 0)
}

func (s *ConstantDeclarationContext) AllConstantModifier() []IConstantModifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IConstantModifierContext); ok {
			len++
		}
	}

	tst := make([]IConstantModifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IConstantModifierContext); ok {
			tst[i] = t.(IConstantModifierContext)
			i++
		}
	}

	return tst
}

func (s *ConstantDeclarationContext) ConstantModifier(i int) IConstantModifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstantModifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstantModifierContext)
}

func (s *ConstantDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstantDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterConstantDeclaration(s)
	}
}

func (s *ConstantDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitConstantDeclaration(s)
	}
}

func (p *Java8Parser) ConstantDeclaration() (localctx IConstantDeclarationContext) {
	localctx = NewConstantDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, Java8ParserRULE_constantDeclaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1320)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&309237907456) != 0) || _la == Java8ParserAT {
		{
			p.SetState(1317)
			p.ConstantModifier()
		}

		p.SetState(1322)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1323)
		p.UnannType()
	}
	{
		p.SetState(1324)
		p.VariableDeclaratorList()
	}
	{
		p.SetState(1325)
		p.Match(Java8ParserSEMI)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConstantModifierContext is an interface to support dynamic dispatch.
type IConstantModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Annotation() IAnnotationContext
	PUBLIC() antlr.TerminalNode
	STATIC() antlr.TerminalNode
	FINAL() antlr.TerminalNode

	// IsConstantModifierContext differentiates from other interfaces.
	IsConstantModifierContext()
}

type ConstantModifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstantModifierContext() *ConstantModifierContext {
	var p = new(ConstantModifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_constantModifier
	return p
}

func InitEmptyConstantModifierContext(p *ConstantModifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_constantModifier
}

func (*ConstantModifierContext) IsConstantModifierContext() {}

func NewConstantModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstantModifierContext {
	var p = new(ConstantModifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_constantModifier

	return p
}

func (s *ConstantModifierContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstantModifierContext) Annotation() IAnnotationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *ConstantModifierContext) PUBLIC() antlr.TerminalNode {
	return s.GetToken(Java8ParserPUBLIC, 0)
}

func (s *ConstantModifierContext) STATIC() antlr.TerminalNode {
	return s.GetToken(Java8ParserSTATIC, 0)
}

func (s *ConstantModifierContext) FINAL() antlr.TerminalNode {
	return s.GetToken(Java8ParserFINAL, 0)
}

func (s *ConstantModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstantModifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterConstantModifier(s)
	}
}

func (s *ConstantModifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitConstantModifier(s)
	}
}

func (p *Java8Parser) ConstantModifier() (localctx IConstantModifierContext) {
	localctx = NewConstantModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, Java8ParserRULE_constantModifier)
	p.SetState(1331)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case Java8ParserAT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1327)
			p.Annotation()
		}

	case Java8ParserPUBLIC:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1328)
			p.Match(Java8ParserPUBLIC)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserSTATIC:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1329)
			p.Match(Java8ParserSTATIC)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserFINAL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1330)
			p.Match(Java8ParserFINAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInterfaceMethodDeclarationContext is an interface to support dynamic dispatch.
type IInterfaceMethodDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MethodHeader() IMethodHeaderContext
	MethodBody() IMethodBodyContext
	AllInterfaceMethodModifier() []IInterfaceMethodModifierContext
	InterfaceMethodModifier(i int) IInterfaceMethodModifierContext

	// IsInterfaceMethodDeclarationContext differentiates from other interfaces.
	IsInterfaceMethodDeclarationContext()
}

type InterfaceMethodDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceMethodDeclarationContext() *InterfaceMethodDeclarationContext {
	var p = new(InterfaceMethodDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_interfaceMethodDeclaration
	return p
}

func InitEmptyInterfaceMethodDeclarationContext(p *InterfaceMethodDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_interfaceMethodDeclaration
}

func (*InterfaceMethodDeclarationContext) IsInterfaceMethodDeclarationContext() {}

func NewInterfaceMethodDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceMethodDeclarationContext {
	var p = new(InterfaceMethodDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_interfaceMethodDeclaration

	return p
}

func (s *InterfaceMethodDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceMethodDeclarationContext) MethodHeader() IMethodHeaderContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMethodHeaderContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMethodHeaderContext)
}

func (s *InterfaceMethodDeclarationContext) MethodBody() IMethodBodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMethodBodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMethodBodyContext)
}

func (s *InterfaceMethodDeclarationContext) AllInterfaceMethodModifier() []IInterfaceMethodModifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IInterfaceMethodModifierContext); ok {
			len++
		}
	}

	tst := make([]IInterfaceMethodModifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IInterfaceMethodModifierContext); ok {
			tst[i] = t.(IInterfaceMethodModifierContext)
			i++
		}
	}

	return tst
}

func (s *InterfaceMethodDeclarationContext) InterfaceMethodModifier(i int) IInterfaceMethodModifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterfaceMethodModifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterfaceMethodModifierContext)
}

func (s *InterfaceMethodDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceMethodDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceMethodDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterInterfaceMethodDeclaration(s)
	}
}

func (s *InterfaceMethodDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitInterfaceMethodDeclaration(s)
	}
}

func (p *Java8Parser) InterfaceMethodDeclaration() (localctx IInterfaceMethodDeclarationContext) {
	localctx = NewInterfaceMethodDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, Java8ParserRULE_interfaceMethodDeclaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1336)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&858993463298) != 0) || _la == Java8ParserAT {
		{
			p.SetState(1333)
			p.InterfaceMethodModifier()
		}

		p.SetState(1338)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1339)
		p.MethodHeader()
	}
	{
		p.SetState(1340)
		p.MethodBody()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInterfaceMethodModifierContext is an interface to support dynamic dispatch.
type IInterfaceMethodModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Annotation() IAnnotationContext
	PUBLIC() antlr.TerminalNode
	ABSTRACT() antlr.TerminalNode
	DEFAULT() antlr.TerminalNode
	STATIC() antlr.TerminalNode
	STRICTFP() antlr.TerminalNode

	// IsInterfaceMethodModifierContext differentiates from other interfaces.
	IsInterfaceMethodModifierContext()
}

type InterfaceMethodModifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceMethodModifierContext() *InterfaceMethodModifierContext {
	var p = new(InterfaceMethodModifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_interfaceMethodModifier
	return p
}

func InitEmptyInterfaceMethodModifierContext(p *InterfaceMethodModifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_interfaceMethodModifier
}

func (*InterfaceMethodModifierContext) IsInterfaceMethodModifierContext() {}

func NewInterfaceMethodModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceMethodModifierContext {
	var p = new(InterfaceMethodModifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_interfaceMethodModifier

	return p
}

func (s *InterfaceMethodModifierContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceMethodModifierContext) Annotation() IAnnotationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *InterfaceMethodModifierContext) PUBLIC() antlr.TerminalNode {
	return s.GetToken(Java8ParserPUBLIC, 0)
}

func (s *InterfaceMethodModifierContext) ABSTRACT() antlr.TerminalNode {
	return s.GetToken(Java8ParserABSTRACT, 0)
}

func (s *InterfaceMethodModifierContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(Java8ParserDEFAULT, 0)
}

func (s *InterfaceMethodModifierContext) STATIC() antlr.TerminalNode {
	return s.GetToken(Java8ParserSTATIC, 0)
}

func (s *InterfaceMethodModifierContext) STRICTFP() antlr.TerminalNode {
	return s.GetToken(Java8ParserSTRICTFP, 0)
}

func (s *InterfaceMethodModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceMethodModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceMethodModifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterInterfaceMethodModifier(s)
	}
}

func (s *InterfaceMethodModifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitInterfaceMethodModifier(s)
	}
}

func (p *Java8Parser) InterfaceMethodModifier() (localctx IInterfaceMethodModifierContext) {
	localctx = NewInterfaceMethodModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, Java8ParserRULE_interfaceMethodModifier)
	p.SetState(1348)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case Java8ParserAT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1342)
			p.Annotation()
		}

	case Java8ParserPUBLIC:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1343)
			p.Match(Java8ParserPUBLIC)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserABSTRACT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1344)
			p.Match(Java8ParserABSTRACT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserDEFAULT:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1345)
			p.Match(Java8ParserDEFAULT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserSTATIC:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1346)
			p.Match(Java8ParserSTATIC)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserSTRICTFP:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1347)
			p.Match(Java8ParserSTRICTFP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAnnotationTypeDeclarationContext is an interface to support dynamic dispatch.
type IAnnotationTypeDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AT() antlr.TerminalNode
	INTERFACE() antlr.TerminalNode
	Identifier() antlr.TerminalNode
	AnnotationTypeBody() IAnnotationTypeBodyContext
	AllInterfaceModifier() []IInterfaceModifierContext
	InterfaceModifier(i int) IInterfaceModifierContext

	// IsAnnotationTypeDeclarationContext differentiates from other interfaces.
	IsAnnotationTypeDeclarationContext()
}

type AnnotationTypeDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnnotationTypeDeclarationContext() *AnnotationTypeDeclarationContext {
	var p = new(AnnotationTypeDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_annotationTypeDeclaration
	return p
}

func InitEmptyAnnotationTypeDeclarationContext(p *AnnotationTypeDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_annotationTypeDeclaration
}

func (*AnnotationTypeDeclarationContext) IsAnnotationTypeDeclarationContext() {}

func NewAnnotationTypeDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationTypeDeclarationContext {
	var p = new(AnnotationTypeDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_annotationTypeDeclaration

	return p
}

func (s *AnnotationTypeDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotationTypeDeclarationContext) AT() antlr.TerminalNode {
	return s.GetToken(Java8ParserAT, 0)
}

func (s *AnnotationTypeDeclarationContext) INTERFACE() antlr.TerminalNode {
	return s.GetToken(Java8ParserINTERFACE, 0)
}

func (s *AnnotationTypeDeclarationContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *AnnotationTypeDeclarationContext) AnnotationTypeBody() IAnnotationTypeBodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationTypeBodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationTypeBodyContext)
}

func (s *AnnotationTypeDeclarationContext) AllInterfaceModifier() []IInterfaceModifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IInterfaceModifierContext); ok {
			len++
		}
	}

	tst := make([]IInterfaceModifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IInterfaceModifierContext); ok {
			tst[i] = t.(IInterfaceModifierContext)
			i++
		}
	}

	return tst
}

func (s *AnnotationTypeDeclarationContext) InterfaceModifier(i int) IInterfaceModifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterfaceModifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterfaceModifierContext)
}

func (s *AnnotationTypeDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationTypeDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotationTypeDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterAnnotationTypeDeclaration(s)
	}
}

func (s *AnnotationTypeDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitAnnotationTypeDeclaration(s)
	}
}

func (p *Java8Parser) AnnotationTypeDeclaration() (localctx IAnnotationTypeDeclarationContext) {
	localctx = NewAnnotationTypeDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, Java8ParserRULE_annotationTypeDeclaration)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1353)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 134, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1350)
				p.InterfaceModifier()
			}

		}
		p.SetState(1355)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 134, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(1356)
		p.Match(Java8ParserAT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1357)
		p.Match(Java8ParserINTERFACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1358)
		p.Match(Java8ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1359)
		p.AnnotationTypeBody()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAnnotationTypeBodyContext is an interface to support dynamic dispatch.
type IAnnotationTypeBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	AllAnnotationTypeMemberDeclaration() []IAnnotationTypeMemberDeclarationContext
	AnnotationTypeMemberDeclaration(i int) IAnnotationTypeMemberDeclarationContext

	// IsAnnotationTypeBodyContext differentiates from other interfaces.
	IsAnnotationTypeBodyContext()
}

type AnnotationTypeBodyContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnnotationTypeBodyContext() *AnnotationTypeBodyContext {
	var p = new(AnnotationTypeBodyContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_annotationTypeBody
	return p
}

func InitEmptyAnnotationTypeBodyContext(p *AnnotationTypeBodyContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_annotationTypeBody
}

func (*AnnotationTypeBodyContext) IsAnnotationTypeBodyContext() {}

func NewAnnotationTypeBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationTypeBodyContext {
	var p = new(AnnotationTypeBodyContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_annotationTypeBody

	return p
}

func (s *AnnotationTypeBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotationTypeBodyContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(Java8ParserLBRACE, 0)
}

func (s *AnnotationTypeBodyContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(Java8ParserRBRACE, 0)
}

func (s *AnnotationTypeBodyContext) AllAnnotationTypeMemberDeclaration() []IAnnotationTypeMemberDeclarationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAnnotationTypeMemberDeclarationContext); ok {
			len++
		}
	}

	tst := make([]IAnnotationTypeMemberDeclarationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAnnotationTypeMemberDeclarationContext); ok {
			tst[i] = t.(IAnnotationTypeMemberDeclarationContext)
			i++
		}
	}

	return tst
}

func (s *AnnotationTypeBodyContext) AnnotationTypeMemberDeclaration(i int) IAnnotationTypeMemberDeclarationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationTypeMemberDeclarationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationTypeMemberDeclarationContext)
}

func (s *AnnotationTypeBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationTypeBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotationTypeBodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterAnnotationTypeBody(s)
	}
}

func (s *AnnotationTypeBodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitAnnotationTypeBody(s)
	}
}

func (p *Java8Parser) AnnotationTypeBody() (localctx IAnnotationTypeBodyContext) {
	localctx = NewAnnotationTypeBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, Java8ParserRULE_annotationTypeBody)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1361)
		p.Match(Java8ParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1365)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-9223371013711641814) != 0) || _la == Java8ParserIdentifier || _la == Java8ParserAT {
		{
			p.SetState(1362)
			p.AnnotationTypeMemberDeclaration()
		}

		p.SetState(1367)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1368)
		p.Match(Java8ParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAnnotationTypeMemberDeclarationContext is an interface to support dynamic dispatch.
type IAnnotationTypeMemberDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AnnotationTypeElementDeclaration() IAnnotationTypeElementDeclarationContext
	ConstantDeclaration() IConstantDeclarationContext
	ClassDeclaration() IClassDeclarationContext
	InterfaceDeclaration() IInterfaceDeclarationContext
	SEMI() antlr.TerminalNode

	// IsAnnotationTypeMemberDeclarationContext differentiates from other interfaces.
	IsAnnotationTypeMemberDeclarationContext()
}

type AnnotationTypeMemberDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnnotationTypeMemberDeclarationContext() *AnnotationTypeMemberDeclarationContext {
	var p = new(AnnotationTypeMemberDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_annotationTypeMemberDeclaration
	return p
}

func InitEmptyAnnotationTypeMemberDeclarationContext(p *AnnotationTypeMemberDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_annotationTypeMemberDeclaration
}

func (*AnnotationTypeMemberDeclarationContext) IsAnnotationTypeMemberDeclarationContext() {}

func NewAnnotationTypeMemberDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationTypeMemberDeclarationContext {
	var p = new(AnnotationTypeMemberDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_annotationTypeMemberDeclaration

	return p
}

func (s *AnnotationTypeMemberDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotationTypeMemberDeclarationContext) AnnotationTypeElementDeclaration() IAnnotationTypeElementDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationTypeElementDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationTypeElementDeclarationContext)
}

func (s *AnnotationTypeMemberDeclarationContext) ConstantDeclaration() IConstantDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstantDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstantDeclarationContext)
}

func (s *AnnotationTypeMemberDeclarationContext) ClassDeclaration() IClassDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassDeclarationContext)
}

func (s *AnnotationTypeMemberDeclarationContext) InterfaceDeclaration() IInterfaceDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterfaceDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterfaceDeclarationContext)
}

func (s *AnnotationTypeMemberDeclarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(Java8ParserSEMI, 0)
}

func (s *AnnotationTypeMemberDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationTypeMemberDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotationTypeMemberDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterAnnotationTypeMemberDeclaration(s)
	}
}

func (s *AnnotationTypeMemberDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitAnnotationTypeMemberDeclaration(s)
	}
}

func (p *Java8Parser) AnnotationTypeMemberDeclaration() (localctx IAnnotationTypeMemberDeclarationContext) {
	localctx = NewAnnotationTypeMemberDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, Java8ParserRULE_annotationTypeMemberDeclaration)
	p.SetState(1375)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 136, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1370)
			p.AnnotationTypeElementDeclaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1371)
			p.ConstantDeclaration()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1372)
			p.ClassDeclaration()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1373)
			p.InterfaceDeclaration()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1374)
			p.Match(Java8ParserSEMI)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAnnotationTypeElementDeclarationContext is an interface to support dynamic dispatch.
type IAnnotationTypeElementDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UnannType() IUnannTypeContext
	Identifier() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	SEMI() antlr.TerminalNode
	AllAnnotationTypeElementModifier() []IAnnotationTypeElementModifierContext
	AnnotationTypeElementModifier(i int) IAnnotationTypeElementModifierContext
	Dims() IDimsContext
	DefaultValue() IDefaultValueContext

	// IsAnnotationTypeElementDeclarationContext differentiates from other interfaces.
	IsAnnotationTypeElementDeclarationContext()
}

type AnnotationTypeElementDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnnotationTypeElementDeclarationContext() *AnnotationTypeElementDeclarationContext {
	var p = new(AnnotationTypeElementDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_annotationTypeElementDeclaration
	return p
}

func InitEmptyAnnotationTypeElementDeclarationContext(p *AnnotationTypeElementDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_annotationTypeElementDeclaration
}

func (*AnnotationTypeElementDeclarationContext) IsAnnotationTypeElementDeclarationContext() {}

func NewAnnotationTypeElementDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationTypeElementDeclarationContext {
	var p = new(AnnotationTypeElementDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_annotationTypeElementDeclaration

	return p
}

func (s *AnnotationTypeElementDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotationTypeElementDeclarationContext) UnannType() IUnannTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnannTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnannTypeContext)
}

func (s *AnnotationTypeElementDeclarationContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *AnnotationTypeElementDeclarationContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserLPAREN, 0)
}

func (s *AnnotationTypeElementDeclarationContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRPAREN, 0)
}

func (s *AnnotationTypeElementDeclarationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(Java8ParserSEMI, 0)
}

func (s *AnnotationTypeElementDeclarationContext) AllAnnotationTypeElementModifier() []IAnnotationTypeElementModifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAnnotationTypeElementModifierContext); ok {
			len++
		}
	}

	tst := make([]IAnnotationTypeElementModifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAnnotationTypeElementModifierContext); ok {
			tst[i] = t.(IAnnotationTypeElementModifierContext)
			i++
		}
	}

	return tst
}

func (s *AnnotationTypeElementDeclarationContext) AnnotationTypeElementModifier(i int) IAnnotationTypeElementModifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationTypeElementModifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationTypeElementModifierContext)
}

func (s *AnnotationTypeElementDeclarationContext) Dims() IDimsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDimsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDimsContext)
}

func (s *AnnotationTypeElementDeclarationContext) DefaultValue() IDefaultValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefaultValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefaultValueContext)
}

func (s *AnnotationTypeElementDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationTypeElementDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotationTypeElementDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterAnnotationTypeElementDeclaration(s)
	}
}

func (s *AnnotationTypeElementDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitAnnotationTypeElementDeclaration(s)
	}
}

func (p *Java8Parser) AnnotationTypeElementDeclaration() (localctx IAnnotationTypeElementDeclarationContext) {
	localctx = NewAnnotationTypeElementDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, Java8ParserRULE_annotationTypeElementDeclaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1380)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Java8ParserABSTRACT || _la == Java8ParserPUBLIC || _la == Java8ParserAT {
		{
			p.SetState(1377)
			p.AnnotationTypeElementModifier()
		}

		p.SetState(1382)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1383)
		p.UnannType()
	}
	{
		p.SetState(1384)
		p.Match(Java8ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1385)
		p.Match(Java8ParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1386)
		p.Match(Java8ParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1388)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserLBRACK || _la == Java8ParserAT {
		{
			p.SetState(1387)
			p.Dims()
		}

	}
	p.SetState(1391)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserDEFAULT {
		{
			p.SetState(1390)
			p.DefaultValue()
		}

	}
	{
		p.SetState(1393)
		p.Match(Java8ParserSEMI)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAnnotationTypeElementModifierContext is an interface to support dynamic dispatch.
type IAnnotationTypeElementModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Annotation() IAnnotationContext
	PUBLIC() antlr.TerminalNode
	ABSTRACT() antlr.TerminalNode

	// IsAnnotationTypeElementModifierContext differentiates from other interfaces.
	IsAnnotationTypeElementModifierContext()
}

type AnnotationTypeElementModifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnnotationTypeElementModifierContext() *AnnotationTypeElementModifierContext {
	var p = new(AnnotationTypeElementModifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_annotationTypeElementModifier
	return p
}

func InitEmptyAnnotationTypeElementModifierContext(p *AnnotationTypeElementModifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_annotationTypeElementModifier
}

func (*AnnotationTypeElementModifierContext) IsAnnotationTypeElementModifierContext() {}

func NewAnnotationTypeElementModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationTypeElementModifierContext {
	var p = new(AnnotationTypeElementModifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_annotationTypeElementModifier

	return p
}

func (s *AnnotationTypeElementModifierContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotationTypeElementModifierContext) Annotation() IAnnotationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *AnnotationTypeElementModifierContext) PUBLIC() antlr.TerminalNode {
	return s.GetToken(Java8ParserPUBLIC, 0)
}

func (s *AnnotationTypeElementModifierContext) ABSTRACT() antlr.TerminalNode {
	return s.GetToken(Java8ParserABSTRACT, 0)
}

func (s *AnnotationTypeElementModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationTypeElementModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotationTypeElementModifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterAnnotationTypeElementModifier(s)
	}
}

func (s *AnnotationTypeElementModifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitAnnotationTypeElementModifier(s)
	}
}

func (p *Java8Parser) AnnotationTypeElementModifier() (localctx IAnnotationTypeElementModifierContext) {
	localctx = NewAnnotationTypeElementModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, Java8ParserRULE_annotationTypeElementModifier)
	p.SetState(1398)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case Java8ParserAT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1395)
			p.Annotation()
		}

	case Java8ParserPUBLIC:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1396)
			p.Match(Java8ParserPUBLIC)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserABSTRACT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1397)
			p.Match(Java8ParserABSTRACT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDefaultValueContext is an interface to support dynamic dispatch.
type IDefaultValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DEFAULT() antlr.TerminalNode
	ElementValue() IElementValueContext

	// IsDefaultValueContext differentiates from other interfaces.
	IsDefaultValueContext()
}

type DefaultValueContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefaultValueContext() *DefaultValueContext {
	var p = new(DefaultValueContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_defaultValue
	return p
}

func InitEmptyDefaultValueContext(p *DefaultValueContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_defaultValue
}

func (*DefaultValueContext) IsDefaultValueContext() {}

func NewDefaultValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefaultValueContext {
	var p = new(DefaultValueContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_defaultValue

	return p
}

func (s *DefaultValueContext) GetParser() antlr.Parser { return s.parser }

func (s *DefaultValueContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(Java8ParserDEFAULT, 0)
}

func (s *DefaultValueContext) ElementValue() IElementValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElementValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElementValueContext)
}

func (s *DefaultValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefaultValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefaultValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterDefaultValue(s)
	}
}

func (s *DefaultValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitDefaultValue(s)
	}
}

func (p *Java8Parser) DefaultValue() (localctx IDefaultValueContext) {
	localctx = NewDefaultValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, Java8ParserRULE_defaultValue)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1400)
		p.Match(Java8ParserDEFAULT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1401)
		p.ElementValue()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAnnotationContext is an interface to support dynamic dispatch.
type IAnnotationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NormalAnnotation() INormalAnnotationContext
	MarkerAnnotation() IMarkerAnnotationContext
	SingleElementAnnotation() ISingleElementAnnotationContext

	// IsAnnotationContext differentiates from other interfaces.
	IsAnnotationContext()
}

type AnnotationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnnotationContext() *AnnotationContext {
	var p = new(AnnotationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_annotation
	return p
}

func InitEmptyAnnotationContext(p *AnnotationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_annotation
}

func (*AnnotationContext) IsAnnotationContext() {}

func NewAnnotationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationContext {
	var p = new(AnnotationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_annotation

	return p
}

func (s *AnnotationContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotationContext) NormalAnnotation() INormalAnnotationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INormalAnnotationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INormalAnnotationContext)
}

func (s *AnnotationContext) MarkerAnnotation() IMarkerAnnotationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMarkerAnnotationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMarkerAnnotationContext)
}

func (s *AnnotationContext) SingleElementAnnotation() ISingleElementAnnotationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISingleElementAnnotationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISingleElementAnnotationContext)
}

func (s *AnnotationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterAnnotation(s)
	}
}

func (s *AnnotationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitAnnotation(s)
	}
}

func (p *Java8Parser) Annotation() (localctx IAnnotationContext) {
	localctx = NewAnnotationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, Java8ParserRULE_annotation)
	p.SetState(1406)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 141, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1403)
			p.NormalAnnotation()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1404)
			p.MarkerAnnotation()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1405)
			p.SingleElementAnnotation()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INormalAnnotationContext is an interface to support dynamic dispatch.
type INormalAnnotationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AT() antlr.TerminalNode
	TypeName() ITypeNameContext
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	ElementValuePairList() IElementValuePairListContext

	// IsNormalAnnotationContext differentiates from other interfaces.
	IsNormalAnnotationContext()
}

type NormalAnnotationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNormalAnnotationContext() *NormalAnnotationContext {
	var p = new(NormalAnnotationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_normalAnnotation
	return p
}

func InitEmptyNormalAnnotationContext(p *NormalAnnotationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_normalAnnotation
}

func (*NormalAnnotationContext) IsNormalAnnotationContext() {}

func NewNormalAnnotationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NormalAnnotationContext {
	var p = new(NormalAnnotationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_normalAnnotation

	return p
}

func (s *NormalAnnotationContext) GetParser() antlr.Parser { return s.parser }

func (s *NormalAnnotationContext) AT() antlr.TerminalNode {
	return s.GetToken(Java8ParserAT, 0)
}

func (s *NormalAnnotationContext) TypeName() ITypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *NormalAnnotationContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserLPAREN, 0)
}

func (s *NormalAnnotationContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRPAREN, 0)
}

func (s *NormalAnnotationContext) ElementValuePairList() IElementValuePairListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElementValuePairListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElementValuePairListContext)
}

func (s *NormalAnnotationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NormalAnnotationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NormalAnnotationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterNormalAnnotation(s)
	}
}

func (s *NormalAnnotationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitNormalAnnotation(s)
	}
}

func (p *Java8Parser) NormalAnnotation() (localctx INormalAnnotationContext) {
	localctx = NewNormalAnnotationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, Java8ParserRULE_normalAnnotation)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1408)
		p.Match(Java8ParserAT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1409)
		p.TypeName()
	}
	{
		p.SetState(1410)
		p.Match(Java8ParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1412)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserIdentifier {
		{
			p.SetState(1411)
			p.ElementValuePairList()
		}

	}
	{
		p.SetState(1414)
		p.Match(Java8ParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IElementValuePairListContext is an interface to support dynamic dispatch.
type IElementValuePairListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllElementValuePair() []IElementValuePairContext
	ElementValuePair(i int) IElementValuePairContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsElementValuePairListContext differentiates from other interfaces.
	IsElementValuePairListContext()
}

type ElementValuePairListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElementValuePairListContext() *ElementValuePairListContext {
	var p = new(ElementValuePairListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_elementValuePairList
	return p
}

func InitEmptyElementValuePairListContext(p *ElementValuePairListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_elementValuePairList
}

func (*ElementValuePairListContext) IsElementValuePairListContext() {}

func NewElementValuePairListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElementValuePairListContext {
	var p = new(ElementValuePairListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_elementValuePairList

	return p
}

func (s *ElementValuePairListContext) GetParser() antlr.Parser { return s.parser }

func (s *ElementValuePairListContext) AllElementValuePair() []IElementValuePairContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IElementValuePairContext); ok {
			len++
		}
	}

	tst := make([]IElementValuePairContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IElementValuePairContext); ok {
			tst[i] = t.(IElementValuePairContext)
			i++
		}
	}

	return tst
}

func (s *ElementValuePairListContext) ElementValuePair(i int) IElementValuePairContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElementValuePairContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElementValuePairContext)
}

func (s *ElementValuePairListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserCOMMA)
}

func (s *ElementValuePairListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserCOMMA, i)
}

func (s *ElementValuePairListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElementValuePairListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElementValuePairListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterElementValuePairList(s)
	}
}

func (s *ElementValuePairListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitElementValuePairList(s)
	}
}

func (p *Java8Parser) ElementValuePairList() (localctx IElementValuePairListContext) {
	localctx = NewElementValuePairListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, Java8ParserRULE_elementValuePairList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1416)
		p.ElementValuePair()
	}
	p.SetState(1421)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Java8ParserCOMMA {
		{
			p.SetState(1417)
			p.Match(Java8ParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1418)
			p.ElementValuePair()
		}

		p.SetState(1423)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IElementValuePairContext is an interface to support dynamic dispatch.
type IElementValuePairContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode
	ASSIGN() antlr.TerminalNode
	ElementValue() IElementValueContext

	// IsElementValuePairContext differentiates from other interfaces.
	IsElementValuePairContext()
}

type ElementValuePairContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElementValuePairContext() *ElementValuePairContext {
	var p = new(ElementValuePairContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_elementValuePair
	return p
}

func InitEmptyElementValuePairContext(p *ElementValuePairContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_elementValuePair
}

func (*ElementValuePairContext) IsElementValuePairContext() {}

func NewElementValuePairContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElementValuePairContext {
	var p = new(ElementValuePairContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_elementValuePair

	return p
}

func (s *ElementValuePairContext) GetParser() antlr.Parser { return s.parser }

func (s *ElementValuePairContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *ElementValuePairContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(Java8ParserASSIGN, 0)
}

func (s *ElementValuePairContext) ElementValue() IElementValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElementValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElementValueContext)
}

func (s *ElementValuePairContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElementValuePairContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElementValuePairContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterElementValuePair(s)
	}
}

func (s *ElementValuePairContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitElementValuePair(s)
	}
}

func (p *Java8Parser) ElementValuePair() (localctx IElementValuePairContext) {
	localctx = NewElementValuePairContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, Java8ParserRULE_elementValuePair)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1424)
		p.Match(Java8ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1425)
		p.Match(Java8ParserASSIGN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1426)
		p.ElementValue()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IElementValueContext is an interface to support dynamic dispatch.
type IElementValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ConditionalExpression() IConditionalExpressionContext
	ElementValueArrayInitializer() IElementValueArrayInitializerContext
	Annotation() IAnnotationContext

	// IsElementValueContext differentiates from other interfaces.
	IsElementValueContext()
}

type ElementValueContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElementValueContext() *ElementValueContext {
	var p = new(ElementValueContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_elementValue
	return p
}

func InitEmptyElementValueContext(p *ElementValueContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_elementValue
}

func (*ElementValueContext) IsElementValueContext() {}

func NewElementValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElementValueContext {
	var p = new(ElementValueContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_elementValue

	return p
}

func (s *ElementValueContext) GetParser() antlr.Parser { return s.parser }

func (s *ElementValueContext) ConditionalExpression() IConditionalExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConditionalExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConditionalExpressionContext)
}

func (s *ElementValueContext) ElementValueArrayInitializer() IElementValueArrayInitializerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElementValueArrayInitializerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElementValueArrayInitializerContext)
}

func (s *ElementValueContext) Annotation() IAnnotationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *ElementValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElementValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElementValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterElementValue(s)
	}
}

func (s *ElementValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitElementValue(s)
	}
}

func (p *Java8Parser) ElementValue() (localctx IElementValueContext) {
	localctx = NewElementValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, Java8ParserRULE_elementValue)
	p.SetState(1431)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 144, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1428)
			p.ConditionalExpression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1429)
			p.ElementValueArrayInitializer()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1430)
			p.Annotation()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IElementValueArrayInitializerContext is an interface to support dynamic dispatch.
type IElementValueArrayInitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	ElementValueList() IElementValueListContext
	COMMA() antlr.TerminalNode

	// IsElementValueArrayInitializerContext differentiates from other interfaces.
	IsElementValueArrayInitializerContext()
}

type ElementValueArrayInitializerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElementValueArrayInitializerContext() *ElementValueArrayInitializerContext {
	var p = new(ElementValueArrayInitializerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_elementValueArrayInitializer
	return p
}

func InitEmptyElementValueArrayInitializerContext(p *ElementValueArrayInitializerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_elementValueArrayInitializer
}

func (*ElementValueArrayInitializerContext) IsElementValueArrayInitializerContext() {}

func NewElementValueArrayInitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElementValueArrayInitializerContext {
	var p = new(ElementValueArrayInitializerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_elementValueArrayInitializer

	return p
}

func (s *ElementValueArrayInitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *ElementValueArrayInitializerContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(Java8ParserLBRACE, 0)
}

func (s *ElementValueArrayInitializerContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(Java8ParserRBRACE, 0)
}

func (s *ElementValueArrayInitializerContext) ElementValueList() IElementValueListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElementValueListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElementValueListContext)
}

func (s *ElementValueArrayInitializerContext) COMMA() antlr.TerminalNode {
	return s.GetToken(Java8ParserCOMMA, 0)
}

func (s *ElementValueArrayInitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElementValueArrayInitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElementValueArrayInitializerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterElementValueArrayInitializer(s)
	}
}

func (s *ElementValueArrayInitializerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitElementValueArrayInitializer(s)
	}
}

func (p *Java8Parser) ElementValueArrayInitializer() (localctx IElementValueArrayInitializerContext) {
	localctx = NewElementValueArrayInitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, Java8ParserRULE_elementValueArrayInitializer)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1433)
		p.Match(Java8ParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1435)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&862730839481401640) != 0) || ((int64((_la-69)) & ^0x3f) == 0 && ((int64(1)<<(_la-69))&25769819139) != 0) {
		{
			p.SetState(1434)
			p.ElementValueList()
		}

	}
	p.SetState(1438)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserCOMMA {
		{
			p.SetState(1437)
			p.Match(Java8ParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1440)
		p.Match(Java8ParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IElementValueListContext is an interface to support dynamic dispatch.
type IElementValueListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllElementValue() []IElementValueContext
	ElementValue(i int) IElementValueContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsElementValueListContext differentiates from other interfaces.
	IsElementValueListContext()
}

type ElementValueListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElementValueListContext() *ElementValueListContext {
	var p = new(ElementValueListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_elementValueList
	return p
}

func InitEmptyElementValueListContext(p *ElementValueListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_elementValueList
}

func (*ElementValueListContext) IsElementValueListContext() {}

func NewElementValueListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElementValueListContext {
	var p = new(ElementValueListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_elementValueList

	return p
}

func (s *ElementValueListContext) GetParser() antlr.Parser { return s.parser }

func (s *ElementValueListContext) AllElementValue() []IElementValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IElementValueContext); ok {
			len++
		}
	}

	tst := make([]IElementValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IElementValueContext); ok {
			tst[i] = t.(IElementValueContext)
			i++
		}
	}

	return tst
}

func (s *ElementValueListContext) ElementValue(i int) IElementValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElementValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElementValueContext)
}

func (s *ElementValueListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserCOMMA)
}

func (s *ElementValueListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserCOMMA, i)
}

func (s *ElementValueListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElementValueListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElementValueListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterElementValueList(s)
	}
}

func (s *ElementValueListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitElementValueList(s)
	}
}

func (p *Java8Parser) ElementValueList() (localctx IElementValueListContext) {
	localctx = NewElementValueListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 240, Java8ParserRULE_elementValueList)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1442)
		p.ElementValue()
	}
	p.SetState(1447)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 147, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1443)
				p.Match(Java8ParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1444)
				p.ElementValue()
			}

		}
		p.SetState(1449)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 147, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMarkerAnnotationContext is an interface to support dynamic dispatch.
type IMarkerAnnotationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AT() antlr.TerminalNode
	TypeName() ITypeNameContext

	// IsMarkerAnnotationContext differentiates from other interfaces.
	IsMarkerAnnotationContext()
}

type MarkerAnnotationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMarkerAnnotationContext() *MarkerAnnotationContext {
	var p = new(MarkerAnnotationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_markerAnnotation
	return p
}

func InitEmptyMarkerAnnotationContext(p *MarkerAnnotationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_markerAnnotation
}

func (*MarkerAnnotationContext) IsMarkerAnnotationContext() {}

func NewMarkerAnnotationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MarkerAnnotationContext {
	var p = new(MarkerAnnotationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_markerAnnotation

	return p
}

func (s *MarkerAnnotationContext) GetParser() antlr.Parser { return s.parser }

func (s *MarkerAnnotationContext) AT() antlr.TerminalNode {
	return s.GetToken(Java8ParserAT, 0)
}

func (s *MarkerAnnotationContext) TypeName() ITypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *MarkerAnnotationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MarkerAnnotationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MarkerAnnotationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterMarkerAnnotation(s)
	}
}

func (s *MarkerAnnotationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitMarkerAnnotation(s)
	}
}

func (p *Java8Parser) MarkerAnnotation() (localctx IMarkerAnnotationContext) {
	localctx = NewMarkerAnnotationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 242, Java8ParserRULE_markerAnnotation)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1450)
		p.Match(Java8ParserAT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1451)
		p.TypeName()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISingleElementAnnotationContext is an interface to support dynamic dispatch.
type ISingleElementAnnotationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AT() antlr.TerminalNode
	TypeName() ITypeNameContext
	LPAREN() antlr.TerminalNode
	ElementValue() IElementValueContext
	RPAREN() antlr.TerminalNode

	// IsSingleElementAnnotationContext differentiates from other interfaces.
	IsSingleElementAnnotationContext()
}

type SingleElementAnnotationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySingleElementAnnotationContext() *SingleElementAnnotationContext {
	var p = new(SingleElementAnnotationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_singleElementAnnotation
	return p
}

func InitEmptySingleElementAnnotationContext(p *SingleElementAnnotationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_singleElementAnnotation
}

func (*SingleElementAnnotationContext) IsSingleElementAnnotationContext() {}

func NewSingleElementAnnotationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SingleElementAnnotationContext {
	var p = new(SingleElementAnnotationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_singleElementAnnotation

	return p
}

func (s *SingleElementAnnotationContext) GetParser() antlr.Parser { return s.parser }

func (s *SingleElementAnnotationContext) AT() antlr.TerminalNode {
	return s.GetToken(Java8ParserAT, 0)
}

func (s *SingleElementAnnotationContext) TypeName() ITypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *SingleElementAnnotationContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserLPAREN, 0)
}

func (s *SingleElementAnnotationContext) ElementValue() IElementValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElementValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElementValueContext)
}

func (s *SingleElementAnnotationContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRPAREN, 0)
}

func (s *SingleElementAnnotationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SingleElementAnnotationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SingleElementAnnotationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterSingleElementAnnotation(s)
	}
}

func (s *SingleElementAnnotationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitSingleElementAnnotation(s)
	}
}

func (p *Java8Parser) SingleElementAnnotation() (localctx ISingleElementAnnotationContext) {
	localctx = NewSingleElementAnnotationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 244, Java8ParserRULE_singleElementAnnotation)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1453)
		p.Match(Java8ParserAT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1454)
		p.TypeName()
	}
	{
		p.SetState(1455)
		p.Match(Java8ParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1456)
		p.ElementValue()
	}
	{
		p.SetState(1457)
		p.Match(Java8ParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArrayInitializerContext is an interface to support dynamic dispatch.
type IArrayInitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	VariableInitializerList() IVariableInitializerListContext
	COMMA() antlr.TerminalNode

	// IsArrayInitializerContext differentiates from other interfaces.
	IsArrayInitializerContext()
}

type ArrayInitializerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayInitializerContext() *ArrayInitializerContext {
	var p = new(ArrayInitializerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_arrayInitializer
	return p
}

func InitEmptyArrayInitializerContext(p *ArrayInitializerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_arrayInitializer
}

func (*ArrayInitializerContext) IsArrayInitializerContext() {}

func NewArrayInitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayInitializerContext {
	var p = new(ArrayInitializerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_arrayInitializer

	return p
}

func (s *ArrayInitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayInitializerContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(Java8ParserLBRACE, 0)
}

func (s *ArrayInitializerContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(Java8ParserRBRACE, 0)
}

func (s *ArrayInitializerContext) VariableInitializerList() IVariableInitializerListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableInitializerListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableInitializerListContext)
}

func (s *ArrayInitializerContext) COMMA() antlr.TerminalNode {
	return s.GetToken(Java8ParserCOMMA, 0)
}

func (s *ArrayInitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayInitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayInitializerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterArrayInitializer(s)
	}
}

func (s *ArrayInitializerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitArrayInitializer(s)
	}
}

func (p *Java8Parser) ArrayInitializer() (localctx IArrayInitializerContext) {
	localctx = NewArrayInitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 246, Java8ParserRULE_arrayInitializer)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1459)
		p.Match(Java8ParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1461)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&862730839481401640) != 0) || ((int64((_la-69)) & ^0x3f) == 0 && ((int64(1)<<(_la-69))&25769819139) != 0) {
		{
			p.SetState(1460)
			p.VariableInitializerList()
		}

	}
	p.SetState(1464)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserCOMMA {
		{
			p.SetState(1463)
			p.Match(Java8ParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1466)
		p.Match(Java8ParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVariableInitializerListContext is an interface to support dynamic dispatch.
type IVariableInitializerListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllVariableInitializer() []IVariableInitializerContext
	VariableInitializer(i int) IVariableInitializerContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsVariableInitializerListContext differentiates from other interfaces.
	IsVariableInitializerListContext()
}

type VariableInitializerListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableInitializerListContext() *VariableInitializerListContext {
	var p = new(VariableInitializerListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_variableInitializerList
	return p
}

func InitEmptyVariableInitializerListContext(p *VariableInitializerListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_variableInitializerList
}

func (*VariableInitializerListContext) IsVariableInitializerListContext() {}

func NewVariableInitializerListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableInitializerListContext {
	var p = new(VariableInitializerListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_variableInitializerList

	return p
}

func (s *VariableInitializerListContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableInitializerListContext) AllVariableInitializer() []IVariableInitializerContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVariableInitializerContext); ok {
			len++
		}
	}

	tst := make([]IVariableInitializerContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVariableInitializerContext); ok {
			tst[i] = t.(IVariableInitializerContext)
			i++
		}
	}

	return tst
}

func (s *VariableInitializerListContext) VariableInitializer(i int) IVariableInitializerContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableInitializerContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableInitializerContext)
}

func (s *VariableInitializerListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserCOMMA)
}

func (s *VariableInitializerListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserCOMMA, i)
}

func (s *VariableInitializerListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableInitializerListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableInitializerListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterVariableInitializerList(s)
	}
}

func (s *VariableInitializerListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitVariableInitializerList(s)
	}
}

func (p *Java8Parser) VariableInitializerList() (localctx IVariableInitializerListContext) {
	localctx = NewVariableInitializerListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 248, Java8ParserRULE_variableInitializerList)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1468)
		p.VariableInitializer()
	}
	p.SetState(1473)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 150, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1469)
				p.Match(Java8ParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1470)
				p.VariableInitializer()
			}

		}
		p.SetState(1475)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 150, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBlockContext is an interface to support dynamic dispatch.
type IBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	BlockStatements() IBlockStatementsContext

	// IsBlockContext differentiates from other interfaces.
	IsBlockContext()
}

type BlockContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockContext() *BlockContext {
	var p = new(BlockContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_block
	return p
}

func InitEmptyBlockContext(p *BlockContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_block
}

func (*BlockContext) IsBlockContext() {}

func NewBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockContext {
	var p = new(BlockContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_block

	return p
}

func (s *BlockContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(Java8ParserLBRACE, 0)
}

func (s *BlockContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(Java8ParserRBRACE, 0)
}

func (s *BlockContext) BlockStatements() IBlockStatementsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockStatementsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockStatementsContext)
}

func (s *BlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterBlock(s)
	}
}

func (s *BlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitBlock(s)
	}
}

func (p *Java8Parser) Block() (localctx IBlockContext) {
	localctx = NewBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 250, Java8ParserRULE_block)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1476)
		p.Match(Java8ParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1478)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8359349417232995522) != 0) || ((int64((_la-79)) & ^0x3f) == 0 && ((int64(1)<<(_la-79))&25165827) != 0) {
		{
			p.SetState(1477)
			p.BlockStatements()
		}

	}
	{
		p.SetState(1480)
		p.Match(Java8ParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBlockStatementsContext is an interface to support dynamic dispatch.
type IBlockStatementsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllBlockStatement() []IBlockStatementContext
	BlockStatement(i int) IBlockStatementContext

	// IsBlockStatementsContext differentiates from other interfaces.
	IsBlockStatementsContext()
}

type BlockStatementsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockStatementsContext() *BlockStatementsContext {
	var p = new(BlockStatementsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_blockStatements
	return p
}

func InitEmptyBlockStatementsContext(p *BlockStatementsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_blockStatements
}

func (*BlockStatementsContext) IsBlockStatementsContext() {}

func NewBlockStatementsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockStatementsContext {
	var p = new(BlockStatementsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_blockStatements

	return p
}

func (s *BlockStatementsContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockStatementsContext) AllBlockStatement() []IBlockStatementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IBlockStatementContext); ok {
			len++
		}
	}

	tst := make([]IBlockStatementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IBlockStatementContext); ok {
			tst[i] = t.(IBlockStatementContext)
			i++
		}
	}

	return tst
}

func (s *BlockStatementsContext) BlockStatement(i int) IBlockStatementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockStatementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockStatementContext)
}

func (s *BlockStatementsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockStatementsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockStatementsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterBlockStatements(s)
	}
}

func (s *BlockStatementsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitBlockStatements(s)
	}
}

func (p *Java8Parser) BlockStatements() (localctx IBlockStatementsContext) {
	localctx = NewBlockStatementsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 252, Java8ParserRULE_blockStatements)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1483)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8359349417232995522) != 0) || ((int64((_la-79)) & ^0x3f) == 0 && ((int64(1)<<(_la-79))&25165827) != 0) {
		{
			p.SetState(1482)
			p.BlockStatement()
		}

		p.SetState(1485)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBlockStatementContext is an interface to support dynamic dispatch.
type IBlockStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LocalVariableDeclarationStatement() ILocalVariableDeclarationStatementContext
	ClassDeclaration() IClassDeclarationContext
	Statement() IStatementContext

	// IsBlockStatementContext differentiates from other interfaces.
	IsBlockStatementContext()
}

type BlockStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockStatementContext() *BlockStatementContext {
	var p = new(BlockStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_blockStatement
	return p
}

func InitEmptyBlockStatementContext(p *BlockStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_blockStatement
}

func (*BlockStatementContext) IsBlockStatementContext() {}

func NewBlockStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockStatementContext {
	var p = new(BlockStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_blockStatement

	return p
}

func (s *BlockStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockStatementContext) LocalVariableDeclarationStatement() ILocalVariableDeclarationStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILocalVariableDeclarationStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILocalVariableDeclarationStatementContext)
}

func (s *BlockStatementContext) ClassDeclaration() IClassDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassDeclarationContext)
}

func (s *BlockStatementContext) Statement() IStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *BlockStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterBlockStatement(s)
	}
}

func (s *BlockStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitBlockStatement(s)
	}
}

func (p *Java8Parser) BlockStatement() (localctx IBlockStatementContext) {
	localctx = NewBlockStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 254, Java8ParserRULE_blockStatement)
	p.SetState(1490)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 153, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1487)
			p.LocalVariableDeclarationStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1488)
			p.ClassDeclaration()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1489)
			p.Statement()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILocalVariableDeclarationStatementContext is an interface to support dynamic dispatch.
type ILocalVariableDeclarationStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LocalVariableDeclaration() ILocalVariableDeclarationContext
	SEMI() antlr.TerminalNode

	// IsLocalVariableDeclarationStatementContext differentiates from other interfaces.
	IsLocalVariableDeclarationStatementContext()
}

type LocalVariableDeclarationStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLocalVariableDeclarationStatementContext() *LocalVariableDeclarationStatementContext {
	var p = new(LocalVariableDeclarationStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_localVariableDeclarationStatement
	return p
}

func InitEmptyLocalVariableDeclarationStatementContext(p *LocalVariableDeclarationStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_localVariableDeclarationStatement
}

func (*LocalVariableDeclarationStatementContext) IsLocalVariableDeclarationStatementContext() {}

func NewLocalVariableDeclarationStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LocalVariableDeclarationStatementContext {
	var p = new(LocalVariableDeclarationStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_localVariableDeclarationStatement

	return p
}

func (s *LocalVariableDeclarationStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LocalVariableDeclarationStatementContext) LocalVariableDeclaration() ILocalVariableDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILocalVariableDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILocalVariableDeclarationContext)
}

func (s *LocalVariableDeclarationStatementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(Java8ParserSEMI, 0)
}

func (s *LocalVariableDeclarationStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LocalVariableDeclarationStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LocalVariableDeclarationStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterLocalVariableDeclarationStatement(s)
	}
}

func (s *LocalVariableDeclarationStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitLocalVariableDeclarationStatement(s)
	}
}

func (p *Java8Parser) LocalVariableDeclarationStatement() (localctx ILocalVariableDeclarationStatementContext) {
	localctx = NewLocalVariableDeclarationStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 256, Java8ParserRULE_localVariableDeclarationStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1492)
		p.LocalVariableDeclaration()
	}
	{
		p.SetState(1493)
		p.Match(Java8ParserSEMI)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILocalVariableDeclarationContext is an interface to support dynamic dispatch.
type ILocalVariableDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UnannType() IUnannTypeContext
	VariableDeclaratorList() IVariableDeclaratorListContext
	AllVariableModifier() []IVariableModifierContext
	VariableModifier(i int) IVariableModifierContext

	// IsLocalVariableDeclarationContext differentiates from other interfaces.
	IsLocalVariableDeclarationContext()
}

type LocalVariableDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLocalVariableDeclarationContext() *LocalVariableDeclarationContext {
	var p = new(LocalVariableDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_localVariableDeclaration
	return p
}

func InitEmptyLocalVariableDeclarationContext(p *LocalVariableDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_localVariableDeclaration
}

func (*LocalVariableDeclarationContext) IsLocalVariableDeclarationContext() {}

func NewLocalVariableDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LocalVariableDeclarationContext {
	var p = new(LocalVariableDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_localVariableDeclaration

	return p
}

func (s *LocalVariableDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *LocalVariableDeclarationContext) UnannType() IUnannTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnannTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnannTypeContext)
}

func (s *LocalVariableDeclarationContext) VariableDeclaratorList() IVariableDeclaratorListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableDeclaratorListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableDeclaratorListContext)
}

func (s *LocalVariableDeclarationContext) AllVariableModifier() []IVariableModifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVariableModifierContext); ok {
			len++
		}
	}

	tst := make([]IVariableModifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVariableModifierContext); ok {
			tst[i] = t.(IVariableModifierContext)
			i++
		}
	}

	return tst
}

func (s *LocalVariableDeclarationContext) VariableModifier(i int) IVariableModifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableModifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableModifierContext)
}

func (s *LocalVariableDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LocalVariableDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LocalVariableDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterLocalVariableDeclaration(s)
	}
}

func (s *LocalVariableDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitLocalVariableDeclaration(s)
	}
}

func (p *Java8Parser) LocalVariableDeclaration() (localctx ILocalVariableDeclarationContext) {
	localctx = NewLocalVariableDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 258, Java8ParserRULE_localVariableDeclaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1498)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Java8ParserFINAL || _la == Java8ParserAT {
		{
			p.SetState(1495)
			p.VariableModifier()
		}

		p.SetState(1500)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1501)
		p.UnannType()
	}
	{
		p.SetState(1502)
		p.VariableDeclaratorList()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	StatementWithoutTrailingSubstatement() IStatementWithoutTrailingSubstatementContext
	LabeledStatement() ILabeledStatementContext
	IfThenStatement() IIfThenStatementContext
	IfThenElseStatement() IIfThenElseStatementContext
	WhileStatement() IWhileStatementContext
	ForStatement() IForStatementContext

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_statement
	return p
}

func InitEmptyStatementContext(p *StatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_statement
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) StatementWithoutTrailingSubstatement() IStatementWithoutTrailingSubstatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementWithoutTrailingSubstatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementWithoutTrailingSubstatementContext)
}

func (s *StatementContext) LabeledStatement() ILabeledStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILabeledStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILabeledStatementContext)
}

func (s *StatementContext) IfThenStatement() IIfThenStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIfThenStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIfThenStatementContext)
}

func (s *StatementContext) IfThenElseStatement() IIfThenElseStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIfThenElseStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIfThenElseStatementContext)
}

func (s *StatementContext) WhileStatement() IWhileStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhileStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhileStatementContext)
}

func (s *StatementContext) ForStatement() IForStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForStatementContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterStatement(s)
	}
}

func (s *StatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitStatement(s)
	}
}

func (p *Java8Parser) Statement() (localctx IStatementContext) {
	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 260, Java8ParserRULE_statement)
	p.SetState(1510)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 155, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1504)
			p.StatementWithoutTrailingSubstatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1505)
			p.LabeledStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1506)
			p.IfThenStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1507)
			p.IfThenElseStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1508)
			p.WhileStatement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1509)
			p.ForStatement()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStatementNoShortIfContext is an interface to support dynamic dispatch.
type IStatementNoShortIfContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	StatementWithoutTrailingSubstatement() IStatementWithoutTrailingSubstatementContext
	LabeledStatementNoShortIf() ILabeledStatementNoShortIfContext
	IfThenElseStatementNoShortIf() IIfThenElseStatementNoShortIfContext
	WhileStatementNoShortIf() IWhileStatementNoShortIfContext
	ForStatementNoShortIf() IForStatementNoShortIfContext

	// IsStatementNoShortIfContext differentiates from other interfaces.
	IsStatementNoShortIfContext()
}

type StatementNoShortIfContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementNoShortIfContext() *StatementNoShortIfContext {
	var p = new(StatementNoShortIfContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_statementNoShortIf
	return p
}

func InitEmptyStatementNoShortIfContext(p *StatementNoShortIfContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_statementNoShortIf
}

func (*StatementNoShortIfContext) IsStatementNoShortIfContext() {}

func NewStatementNoShortIfContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementNoShortIfContext {
	var p = new(StatementNoShortIfContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_statementNoShortIf

	return p
}

func (s *StatementNoShortIfContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementNoShortIfContext) StatementWithoutTrailingSubstatement() IStatementWithoutTrailingSubstatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementWithoutTrailingSubstatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementWithoutTrailingSubstatementContext)
}

func (s *StatementNoShortIfContext) LabeledStatementNoShortIf() ILabeledStatementNoShortIfContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILabeledStatementNoShortIfContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILabeledStatementNoShortIfContext)
}

func (s *StatementNoShortIfContext) IfThenElseStatementNoShortIf() IIfThenElseStatementNoShortIfContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIfThenElseStatementNoShortIfContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIfThenElseStatementNoShortIfContext)
}

func (s *StatementNoShortIfContext) WhileStatementNoShortIf() IWhileStatementNoShortIfContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhileStatementNoShortIfContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhileStatementNoShortIfContext)
}

func (s *StatementNoShortIfContext) ForStatementNoShortIf() IForStatementNoShortIfContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForStatementNoShortIfContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForStatementNoShortIfContext)
}

func (s *StatementNoShortIfContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementNoShortIfContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementNoShortIfContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterStatementNoShortIf(s)
	}
}

func (s *StatementNoShortIfContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitStatementNoShortIf(s)
	}
}

func (p *Java8Parser) StatementNoShortIf() (localctx IStatementNoShortIfContext) {
	localctx = NewStatementNoShortIfContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 262, Java8ParserRULE_statementNoShortIf)
	p.SetState(1517)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 156, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1512)
			p.StatementWithoutTrailingSubstatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1513)
			p.LabeledStatementNoShortIf()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1514)
			p.IfThenElseStatementNoShortIf()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1515)
			p.WhileStatementNoShortIf()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1516)
			p.ForStatementNoShortIf()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStatementWithoutTrailingSubstatementContext is an interface to support dynamic dispatch.
type IStatementWithoutTrailingSubstatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Block() IBlockContext
	EmptyStatement_() IEmptyStatement_Context
	ExpressionStatement() IExpressionStatementContext
	AssertStatement() IAssertStatementContext
	SwitchStatement() ISwitchStatementContext
	DoStatement() IDoStatementContext
	BreakStatement() IBreakStatementContext
	ContinueStatement() IContinueStatementContext
	ReturnStatement() IReturnStatementContext
	SynchronizedStatement() ISynchronizedStatementContext
	ThrowStatement() IThrowStatementContext
	TryStatement() ITryStatementContext

	// IsStatementWithoutTrailingSubstatementContext differentiates from other interfaces.
	IsStatementWithoutTrailingSubstatementContext()
}

type StatementWithoutTrailingSubstatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementWithoutTrailingSubstatementContext() *StatementWithoutTrailingSubstatementContext {
	var p = new(StatementWithoutTrailingSubstatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_statementWithoutTrailingSubstatement
	return p
}

func InitEmptyStatementWithoutTrailingSubstatementContext(p *StatementWithoutTrailingSubstatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_statementWithoutTrailingSubstatement
}

func (*StatementWithoutTrailingSubstatementContext) IsStatementWithoutTrailingSubstatementContext() {}

func NewStatementWithoutTrailingSubstatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementWithoutTrailingSubstatementContext {
	var p = new(StatementWithoutTrailingSubstatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_statementWithoutTrailingSubstatement

	return p
}

func (s *StatementWithoutTrailingSubstatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementWithoutTrailingSubstatementContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *StatementWithoutTrailingSubstatementContext) EmptyStatement_() IEmptyStatement_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEmptyStatement_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEmptyStatement_Context)
}

func (s *StatementWithoutTrailingSubstatementContext) ExpressionStatement() IExpressionStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionStatementContext)
}

func (s *StatementWithoutTrailingSubstatementContext) AssertStatement() IAssertStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssertStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssertStatementContext)
}

func (s *StatementWithoutTrailingSubstatementContext) SwitchStatement() ISwitchStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISwitchStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISwitchStatementContext)
}

func (s *StatementWithoutTrailingSubstatementContext) DoStatement() IDoStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDoStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDoStatementContext)
}

func (s *StatementWithoutTrailingSubstatementContext) BreakStatement() IBreakStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBreakStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBreakStatementContext)
}

func (s *StatementWithoutTrailingSubstatementContext) ContinueStatement() IContinueStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IContinueStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IContinueStatementContext)
}

func (s *StatementWithoutTrailingSubstatementContext) ReturnStatement() IReturnStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReturnStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReturnStatementContext)
}

func (s *StatementWithoutTrailingSubstatementContext) SynchronizedStatement() ISynchronizedStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISynchronizedStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISynchronizedStatementContext)
}

func (s *StatementWithoutTrailingSubstatementContext) ThrowStatement() IThrowStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IThrowStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IThrowStatementContext)
}

func (s *StatementWithoutTrailingSubstatementContext) TryStatement() ITryStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITryStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITryStatementContext)
}

func (s *StatementWithoutTrailingSubstatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementWithoutTrailingSubstatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementWithoutTrailingSubstatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterStatementWithoutTrailingSubstatement(s)
	}
}

func (s *StatementWithoutTrailingSubstatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitStatementWithoutTrailingSubstatement(s)
	}
}

func (p *Java8Parser) StatementWithoutTrailingSubstatement() (localctx IStatementWithoutTrailingSubstatementContext) {
	localctx = NewStatementWithoutTrailingSubstatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 264, Java8ParserRULE_statementWithoutTrailingSubstatement)
	p.SetState(1531)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case Java8ParserLBRACE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1519)
			p.Block()
		}

	case Java8ParserSEMI:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1520)
			p.EmptyStatement_()
		}

	case Java8ParserBOOLEAN, Java8ParserBYTE, Java8ParserCHAR, Java8ParserDOUBLE, Java8ParserFLOAT, Java8ParserINT, Java8ParserLONG, Java8ParserNEW, Java8ParserSHORT, Java8ParserSUPER, Java8ParserTHIS, Java8ParserVOID, Java8ParserIntegerLiteral, Java8ParserFloatingPointLiteral, Java8ParserBooleanLiteral, Java8ParserCharacterLiteral, Java8ParserStringLiteral, Java8ParserNullLiteral, Java8ParserLPAREN, Java8ParserINC, Java8ParserDEC, Java8ParserIdentifier, Java8ParserAT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1521)
			p.ExpressionStatement()
		}

	case Java8ParserASSERT:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1522)
			p.AssertStatement()
		}

	case Java8ParserSWITCH:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1523)
			p.SwitchStatement()
		}

	case Java8ParserDO:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1524)
			p.DoStatement()
		}

	case Java8ParserBREAK:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1525)
			p.BreakStatement()
		}

	case Java8ParserCONTINUE:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1526)
			p.ContinueStatement()
		}

	case Java8ParserRETURN:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1527)
			p.ReturnStatement()
		}

	case Java8ParserSYNCHRONIZED:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1528)
			p.SynchronizedStatement()
		}

	case Java8ParserTHROW:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1529)
			p.ThrowStatement()
		}

	case Java8ParserTRY:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1530)
			p.TryStatement()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEmptyStatement_Context is an interface to support dynamic dispatch.
type IEmptyStatement_Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SEMI() antlr.TerminalNode

	// IsEmptyStatement_Context differentiates from other interfaces.
	IsEmptyStatement_Context()
}

type EmptyStatement_Context struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEmptyStatement_Context() *EmptyStatement_Context {
	var p = new(EmptyStatement_Context)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_emptyStatement_
	return p
}

func InitEmptyEmptyStatement_Context(p *EmptyStatement_Context) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_emptyStatement_
}

func (*EmptyStatement_Context) IsEmptyStatement_Context() {}

func NewEmptyStatement_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EmptyStatement_Context {
	var p = new(EmptyStatement_Context)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_emptyStatement_

	return p
}

func (s *EmptyStatement_Context) GetParser() antlr.Parser { return s.parser }

func (s *EmptyStatement_Context) SEMI() antlr.TerminalNode {
	return s.GetToken(Java8ParserSEMI, 0)
}

func (s *EmptyStatement_Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EmptyStatement_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EmptyStatement_Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterEmptyStatement_(s)
	}
}

func (s *EmptyStatement_Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitEmptyStatement_(s)
	}
}

func (p *Java8Parser) EmptyStatement_() (localctx IEmptyStatement_Context) {
	localctx = NewEmptyStatement_Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 266, Java8ParserRULE_emptyStatement_)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1533)
		p.Match(Java8ParserSEMI)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILabeledStatementContext is an interface to support dynamic dispatch.
type ILabeledStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode
	COLON() antlr.TerminalNode
	Statement() IStatementContext

	// IsLabeledStatementContext differentiates from other interfaces.
	IsLabeledStatementContext()
}

type LabeledStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabeledStatementContext() *LabeledStatementContext {
	var p = new(LabeledStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_labeledStatement
	return p
}

func InitEmptyLabeledStatementContext(p *LabeledStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_labeledStatement
}

func (*LabeledStatementContext) IsLabeledStatementContext() {}

func NewLabeledStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabeledStatementContext {
	var p = new(LabeledStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_labeledStatement

	return p
}

func (s *LabeledStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LabeledStatementContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *LabeledStatementContext) COLON() antlr.TerminalNode {
	return s.GetToken(Java8ParserCOLON, 0)
}

func (s *LabeledStatementContext) Statement() IStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *LabeledStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabeledStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabeledStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterLabeledStatement(s)
	}
}

func (s *LabeledStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitLabeledStatement(s)
	}
}

func (p *Java8Parser) LabeledStatement() (localctx ILabeledStatementContext) {
	localctx = NewLabeledStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 268, Java8ParserRULE_labeledStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1535)
		p.Match(Java8ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1536)
		p.Match(Java8ParserCOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1537)
		p.Statement()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILabeledStatementNoShortIfContext is an interface to support dynamic dispatch.
type ILabeledStatementNoShortIfContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode
	COLON() antlr.TerminalNode
	StatementNoShortIf() IStatementNoShortIfContext

	// IsLabeledStatementNoShortIfContext differentiates from other interfaces.
	IsLabeledStatementNoShortIfContext()
}

type LabeledStatementNoShortIfContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabeledStatementNoShortIfContext() *LabeledStatementNoShortIfContext {
	var p = new(LabeledStatementNoShortIfContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_labeledStatementNoShortIf
	return p
}

func InitEmptyLabeledStatementNoShortIfContext(p *LabeledStatementNoShortIfContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_labeledStatementNoShortIf
}

func (*LabeledStatementNoShortIfContext) IsLabeledStatementNoShortIfContext() {}

func NewLabeledStatementNoShortIfContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabeledStatementNoShortIfContext {
	var p = new(LabeledStatementNoShortIfContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_labeledStatementNoShortIf

	return p
}

func (s *LabeledStatementNoShortIfContext) GetParser() antlr.Parser { return s.parser }

func (s *LabeledStatementNoShortIfContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *LabeledStatementNoShortIfContext) COLON() antlr.TerminalNode {
	return s.GetToken(Java8ParserCOLON, 0)
}

func (s *LabeledStatementNoShortIfContext) StatementNoShortIf() IStatementNoShortIfContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementNoShortIfContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementNoShortIfContext)
}

func (s *LabeledStatementNoShortIfContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabeledStatementNoShortIfContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabeledStatementNoShortIfContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterLabeledStatementNoShortIf(s)
	}
}

func (s *LabeledStatementNoShortIfContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitLabeledStatementNoShortIf(s)
	}
}

func (p *Java8Parser) LabeledStatementNoShortIf() (localctx ILabeledStatementNoShortIfContext) {
	localctx = NewLabeledStatementNoShortIfContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 270, Java8ParserRULE_labeledStatementNoShortIf)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1539)
		p.Match(Java8ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1540)
		p.Match(Java8ParserCOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1541)
		p.StatementNoShortIf()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpressionStatementContext is an interface to support dynamic dispatch.
type IExpressionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	StatementExpression() IStatementExpressionContext
	SEMI() antlr.TerminalNode

	// IsExpressionStatementContext differentiates from other interfaces.
	IsExpressionStatementContext()
}

type ExpressionStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionStatementContext() *ExpressionStatementContext {
	var p = new(ExpressionStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_expressionStatement
	return p
}

func InitEmptyExpressionStatementContext(p *ExpressionStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_expressionStatement
}

func (*ExpressionStatementContext) IsExpressionStatementContext() {}

func NewExpressionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionStatementContext {
	var p = new(ExpressionStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_expressionStatement

	return p
}

func (s *ExpressionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionStatementContext) StatementExpression() IStatementExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementExpressionContext)
}

func (s *ExpressionStatementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(Java8ParserSEMI, 0)
}

func (s *ExpressionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterExpressionStatement(s)
	}
}

func (s *ExpressionStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitExpressionStatement(s)
	}
}

func (p *Java8Parser) ExpressionStatement() (localctx IExpressionStatementContext) {
	localctx = NewExpressionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 272, Java8ParserRULE_expressionStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1543)
		p.StatementExpression()
	}
	{
		p.SetState(1544)
		p.Match(Java8ParserSEMI)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStatementExpressionContext is an interface to support dynamic dispatch.
type IStatementExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Assignment() IAssignmentContext
	PreIncrementExpression() IPreIncrementExpressionContext
	PreDecrementExpression() IPreDecrementExpressionContext
	PostIncrementExpression() IPostIncrementExpressionContext
	PostDecrementExpression() IPostDecrementExpressionContext
	MethodInvocation() IMethodInvocationContext
	ClassInstanceCreationExpression() IClassInstanceCreationExpressionContext

	// IsStatementExpressionContext differentiates from other interfaces.
	IsStatementExpressionContext()
}

type StatementExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementExpressionContext() *StatementExpressionContext {
	var p = new(StatementExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_statementExpression
	return p
}

func InitEmptyStatementExpressionContext(p *StatementExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_statementExpression
}

func (*StatementExpressionContext) IsStatementExpressionContext() {}

func NewStatementExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementExpressionContext {
	var p = new(StatementExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_statementExpression

	return p
}

func (s *StatementExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementExpressionContext) Assignment() IAssignmentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignmentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignmentContext)
}

func (s *StatementExpressionContext) PreIncrementExpression() IPreIncrementExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPreIncrementExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPreIncrementExpressionContext)
}

func (s *StatementExpressionContext) PreDecrementExpression() IPreDecrementExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPreDecrementExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPreDecrementExpressionContext)
}

func (s *StatementExpressionContext) PostIncrementExpression() IPostIncrementExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPostIncrementExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPostIncrementExpressionContext)
}

func (s *StatementExpressionContext) PostDecrementExpression() IPostDecrementExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPostDecrementExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPostDecrementExpressionContext)
}

func (s *StatementExpressionContext) MethodInvocation() IMethodInvocationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMethodInvocationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMethodInvocationContext)
}

func (s *StatementExpressionContext) ClassInstanceCreationExpression() IClassInstanceCreationExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassInstanceCreationExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassInstanceCreationExpressionContext)
}

func (s *StatementExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterStatementExpression(s)
	}
}

func (s *StatementExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitStatementExpression(s)
	}
}

func (p *Java8Parser) StatementExpression() (localctx IStatementExpressionContext) {
	localctx = NewStatementExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 274, Java8ParserRULE_statementExpression)
	p.SetState(1553)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 158, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1546)
			p.Assignment()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1547)
			p.PreIncrementExpression()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1548)
			p.PreDecrementExpression()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1549)
			p.PostIncrementExpression()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1550)
			p.PostDecrementExpression()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1551)
			p.MethodInvocation()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1552)
			p.ClassInstanceCreationExpression()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIfThenStatementContext is an interface to support dynamic dispatch.
type IIfThenStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IF() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	Expression() IExpressionContext
	RPAREN() antlr.TerminalNode
	Statement() IStatementContext

	// IsIfThenStatementContext differentiates from other interfaces.
	IsIfThenStatementContext()
}

type IfThenStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfThenStatementContext() *IfThenStatementContext {
	var p = new(IfThenStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_ifThenStatement
	return p
}

func InitEmptyIfThenStatementContext(p *IfThenStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_ifThenStatement
}

func (*IfThenStatementContext) IsIfThenStatementContext() {}

func NewIfThenStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfThenStatementContext {
	var p = new(IfThenStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_ifThenStatement

	return p
}

func (s *IfThenStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IfThenStatementContext) IF() antlr.TerminalNode {
	return s.GetToken(Java8ParserIF, 0)
}

func (s *IfThenStatementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserLPAREN, 0)
}

func (s *IfThenStatementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IfThenStatementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRPAREN, 0)
}

func (s *IfThenStatementContext) Statement() IStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *IfThenStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfThenStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfThenStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterIfThenStatement(s)
	}
}

func (s *IfThenStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitIfThenStatement(s)
	}
}

func (p *Java8Parser) IfThenStatement() (localctx IIfThenStatementContext) {
	localctx = NewIfThenStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 276, Java8ParserRULE_ifThenStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1555)
		p.Match(Java8ParserIF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1556)
		p.Match(Java8ParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1557)
		p.Expression()
	}
	{
		p.SetState(1558)
		p.Match(Java8ParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1559)
		p.Statement()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIfThenElseStatementContext is an interface to support dynamic dispatch.
type IIfThenElseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IF() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	Expression() IExpressionContext
	RPAREN() antlr.TerminalNode
	StatementNoShortIf() IStatementNoShortIfContext
	ELSE() antlr.TerminalNode
	Statement() IStatementContext

	// IsIfThenElseStatementContext differentiates from other interfaces.
	IsIfThenElseStatementContext()
}

type IfThenElseStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfThenElseStatementContext() *IfThenElseStatementContext {
	var p = new(IfThenElseStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_ifThenElseStatement
	return p
}

func InitEmptyIfThenElseStatementContext(p *IfThenElseStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_ifThenElseStatement
}

func (*IfThenElseStatementContext) IsIfThenElseStatementContext() {}

func NewIfThenElseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfThenElseStatementContext {
	var p = new(IfThenElseStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_ifThenElseStatement

	return p
}

func (s *IfThenElseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IfThenElseStatementContext) IF() antlr.TerminalNode {
	return s.GetToken(Java8ParserIF, 0)
}

func (s *IfThenElseStatementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserLPAREN, 0)
}

func (s *IfThenElseStatementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IfThenElseStatementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRPAREN, 0)
}

func (s *IfThenElseStatementContext) StatementNoShortIf() IStatementNoShortIfContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementNoShortIfContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementNoShortIfContext)
}

func (s *IfThenElseStatementContext) ELSE() antlr.TerminalNode {
	return s.GetToken(Java8ParserELSE, 0)
}

func (s *IfThenElseStatementContext) Statement() IStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *IfThenElseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfThenElseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfThenElseStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterIfThenElseStatement(s)
	}
}

func (s *IfThenElseStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitIfThenElseStatement(s)
	}
}

func (p *Java8Parser) IfThenElseStatement() (localctx IIfThenElseStatementContext) {
	localctx = NewIfThenElseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 278, Java8ParserRULE_ifThenElseStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1561)
		p.Match(Java8ParserIF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1562)
		p.Match(Java8ParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1563)
		p.Expression()
	}
	{
		p.SetState(1564)
		p.Match(Java8ParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1565)
		p.StatementNoShortIf()
	}
	{
		p.SetState(1566)
		p.Match(Java8ParserELSE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1567)
		p.Statement()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIfThenElseStatementNoShortIfContext is an interface to support dynamic dispatch.
type IIfThenElseStatementNoShortIfContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IF() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	Expression() IExpressionContext
	RPAREN() antlr.TerminalNode
	AllStatementNoShortIf() []IStatementNoShortIfContext
	StatementNoShortIf(i int) IStatementNoShortIfContext
	ELSE() antlr.TerminalNode

	// IsIfThenElseStatementNoShortIfContext differentiates from other interfaces.
	IsIfThenElseStatementNoShortIfContext()
}

type IfThenElseStatementNoShortIfContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfThenElseStatementNoShortIfContext() *IfThenElseStatementNoShortIfContext {
	var p = new(IfThenElseStatementNoShortIfContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_ifThenElseStatementNoShortIf
	return p
}

func InitEmptyIfThenElseStatementNoShortIfContext(p *IfThenElseStatementNoShortIfContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_ifThenElseStatementNoShortIf
}

func (*IfThenElseStatementNoShortIfContext) IsIfThenElseStatementNoShortIfContext() {}

func NewIfThenElseStatementNoShortIfContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfThenElseStatementNoShortIfContext {
	var p = new(IfThenElseStatementNoShortIfContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_ifThenElseStatementNoShortIf

	return p
}

func (s *IfThenElseStatementNoShortIfContext) GetParser() antlr.Parser { return s.parser }

func (s *IfThenElseStatementNoShortIfContext) IF() antlr.TerminalNode {
	return s.GetToken(Java8ParserIF, 0)
}

func (s *IfThenElseStatementNoShortIfContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserLPAREN, 0)
}

func (s *IfThenElseStatementNoShortIfContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IfThenElseStatementNoShortIfContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRPAREN, 0)
}

func (s *IfThenElseStatementNoShortIfContext) AllStatementNoShortIf() []IStatementNoShortIfContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStatementNoShortIfContext); ok {
			len++
		}
	}

	tst := make([]IStatementNoShortIfContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStatementNoShortIfContext); ok {
			tst[i] = t.(IStatementNoShortIfContext)
			i++
		}
	}

	return tst
}

func (s *IfThenElseStatementNoShortIfContext) StatementNoShortIf(i int) IStatementNoShortIfContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementNoShortIfContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementNoShortIfContext)
}

func (s *IfThenElseStatementNoShortIfContext) ELSE() antlr.TerminalNode {
	return s.GetToken(Java8ParserELSE, 0)
}

func (s *IfThenElseStatementNoShortIfContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfThenElseStatementNoShortIfContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfThenElseStatementNoShortIfContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterIfThenElseStatementNoShortIf(s)
	}
}

func (s *IfThenElseStatementNoShortIfContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitIfThenElseStatementNoShortIf(s)
	}
}

func (p *Java8Parser) IfThenElseStatementNoShortIf() (localctx IIfThenElseStatementNoShortIfContext) {
	localctx = NewIfThenElseStatementNoShortIfContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 280, Java8ParserRULE_ifThenElseStatementNoShortIf)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1569)
		p.Match(Java8ParserIF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1570)
		p.Match(Java8ParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1571)
		p.Expression()
	}
	{
		p.SetState(1572)
		p.Match(Java8ParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1573)
		p.StatementNoShortIf()
	}
	{
		p.SetState(1574)
		p.Match(Java8ParserELSE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1575)
		p.StatementNoShortIf()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAssertStatementContext is an interface to support dynamic dispatch.
type IAssertStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ASSERT() antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	SEMI() antlr.TerminalNode
	COLON() antlr.TerminalNode

	// IsAssertStatementContext differentiates from other interfaces.
	IsAssertStatementContext()
}

type AssertStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssertStatementContext() *AssertStatementContext {
	var p = new(AssertStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_assertStatement
	return p
}

func InitEmptyAssertStatementContext(p *AssertStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_assertStatement
}

func (*AssertStatementContext) IsAssertStatementContext() {}

func NewAssertStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssertStatementContext {
	var p = new(AssertStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_assertStatement

	return p
}

func (s *AssertStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *AssertStatementContext) ASSERT() antlr.TerminalNode {
	return s.GetToken(Java8ParserASSERT, 0)
}

func (s *AssertStatementContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *AssertStatementContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *AssertStatementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(Java8ParserSEMI, 0)
}

func (s *AssertStatementContext) COLON() antlr.TerminalNode {
	return s.GetToken(Java8ParserCOLON, 0)
}

func (s *AssertStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssertStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssertStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterAssertStatement(s)
	}
}

func (s *AssertStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitAssertStatement(s)
	}
}

func (p *Java8Parser) AssertStatement() (localctx IAssertStatementContext) {
	localctx = NewAssertStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 282, Java8ParserRULE_assertStatement)
	p.SetState(1587)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 159, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1577)
			p.Match(Java8ParserASSERT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1578)
			p.Expression()
		}
		{
			p.SetState(1579)
			p.Match(Java8ParserSEMI)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1581)
			p.Match(Java8ParserASSERT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1582)
			p.Expression()
		}
		{
			p.SetState(1583)
			p.Match(Java8ParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1584)
			p.Expression()
		}
		{
			p.SetState(1585)
			p.Match(Java8ParserSEMI)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISwitchStatementContext is an interface to support dynamic dispatch.
type ISwitchStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SWITCH() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	Expression() IExpressionContext
	RPAREN() antlr.TerminalNode
	SwitchBlock() ISwitchBlockContext

	// IsSwitchStatementContext differentiates from other interfaces.
	IsSwitchStatementContext()
}

type SwitchStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwitchStatementContext() *SwitchStatementContext {
	var p = new(SwitchStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_switchStatement
	return p
}

func InitEmptySwitchStatementContext(p *SwitchStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_switchStatement
}

func (*SwitchStatementContext) IsSwitchStatementContext() {}

func NewSwitchStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SwitchStatementContext {
	var p = new(SwitchStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_switchStatement

	return p
}

func (s *SwitchStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SwitchStatementContext) SWITCH() antlr.TerminalNode {
	return s.GetToken(Java8ParserSWITCH, 0)
}

func (s *SwitchStatementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserLPAREN, 0)
}

func (s *SwitchStatementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SwitchStatementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRPAREN, 0)
}

func (s *SwitchStatementContext) SwitchBlock() ISwitchBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISwitchBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISwitchBlockContext)
}

func (s *SwitchStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SwitchStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SwitchStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterSwitchStatement(s)
	}
}

func (s *SwitchStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitSwitchStatement(s)
	}
}

func (p *Java8Parser) SwitchStatement() (localctx ISwitchStatementContext) {
	localctx = NewSwitchStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 284, Java8ParserRULE_switchStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1589)
		p.Match(Java8ParserSWITCH)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1590)
		p.Match(Java8ParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1591)
		p.Expression()
	}
	{
		p.SetState(1592)
		p.Match(Java8ParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1593)
		p.SwitchBlock()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISwitchBlockContext is an interface to support dynamic dispatch.
type ISwitchBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	AllSwitchBlockStatementGroup() []ISwitchBlockStatementGroupContext
	SwitchBlockStatementGroup(i int) ISwitchBlockStatementGroupContext
	AllSwitchLabel() []ISwitchLabelContext
	SwitchLabel(i int) ISwitchLabelContext

	// IsSwitchBlockContext differentiates from other interfaces.
	IsSwitchBlockContext()
}

type SwitchBlockContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwitchBlockContext() *SwitchBlockContext {
	var p = new(SwitchBlockContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_switchBlock
	return p
}

func InitEmptySwitchBlockContext(p *SwitchBlockContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_switchBlock
}

func (*SwitchBlockContext) IsSwitchBlockContext() {}

func NewSwitchBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SwitchBlockContext {
	var p = new(SwitchBlockContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_switchBlock

	return p
}

func (s *SwitchBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *SwitchBlockContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(Java8ParserLBRACE, 0)
}

func (s *SwitchBlockContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(Java8ParserRBRACE, 0)
}

func (s *SwitchBlockContext) AllSwitchBlockStatementGroup() []ISwitchBlockStatementGroupContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISwitchBlockStatementGroupContext); ok {
			len++
		}
	}

	tst := make([]ISwitchBlockStatementGroupContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISwitchBlockStatementGroupContext); ok {
			tst[i] = t.(ISwitchBlockStatementGroupContext)
			i++
		}
	}

	return tst
}

func (s *SwitchBlockContext) SwitchBlockStatementGroup(i int) ISwitchBlockStatementGroupContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISwitchBlockStatementGroupContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISwitchBlockStatementGroupContext)
}

func (s *SwitchBlockContext) AllSwitchLabel() []ISwitchLabelContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISwitchLabelContext); ok {
			len++
		}
	}

	tst := make([]ISwitchLabelContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISwitchLabelContext); ok {
			tst[i] = t.(ISwitchLabelContext)
			i++
		}
	}

	return tst
}

func (s *SwitchBlockContext) SwitchLabel(i int) ISwitchLabelContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISwitchLabelContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISwitchLabelContext)
}

func (s *SwitchBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SwitchBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SwitchBlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterSwitchBlock(s)
	}
}

func (s *SwitchBlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitSwitchBlock(s)
	}
}

func (p *Java8Parser) SwitchBlock() (localctx ISwitchBlockContext) {
	localctx = NewSwitchBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 286, Java8ParserRULE_switchBlock)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1595)
		p.Match(Java8ParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1599)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 160, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1596)
				p.SwitchBlockStatementGroup()
			}

		}
		p.SetState(1601)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 160, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1605)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Java8ParserCASE || _la == Java8ParserDEFAULT {
		{
			p.SetState(1602)
			p.SwitchLabel()
		}

		p.SetState(1607)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1608)
		p.Match(Java8ParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISwitchBlockStatementGroupContext is an interface to support dynamic dispatch.
type ISwitchBlockStatementGroupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SwitchLabels() ISwitchLabelsContext
	BlockStatements() IBlockStatementsContext

	// IsSwitchBlockStatementGroupContext differentiates from other interfaces.
	IsSwitchBlockStatementGroupContext()
}

type SwitchBlockStatementGroupContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwitchBlockStatementGroupContext() *SwitchBlockStatementGroupContext {
	var p = new(SwitchBlockStatementGroupContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_switchBlockStatementGroup
	return p
}

func InitEmptySwitchBlockStatementGroupContext(p *SwitchBlockStatementGroupContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_switchBlockStatementGroup
}

func (*SwitchBlockStatementGroupContext) IsSwitchBlockStatementGroupContext() {}

func NewSwitchBlockStatementGroupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SwitchBlockStatementGroupContext {
	var p = new(SwitchBlockStatementGroupContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_switchBlockStatementGroup

	return p
}

func (s *SwitchBlockStatementGroupContext) GetParser() antlr.Parser { return s.parser }

func (s *SwitchBlockStatementGroupContext) SwitchLabels() ISwitchLabelsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISwitchLabelsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISwitchLabelsContext)
}

func (s *SwitchBlockStatementGroupContext) BlockStatements() IBlockStatementsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockStatementsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockStatementsContext)
}

func (s *SwitchBlockStatementGroupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SwitchBlockStatementGroupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SwitchBlockStatementGroupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterSwitchBlockStatementGroup(s)
	}
}

func (s *SwitchBlockStatementGroupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitSwitchBlockStatementGroup(s)
	}
}

func (p *Java8Parser) SwitchBlockStatementGroup() (localctx ISwitchBlockStatementGroupContext) {
	localctx = NewSwitchBlockStatementGroupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 288, Java8ParserRULE_switchBlockStatementGroup)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1610)
		p.SwitchLabels()
	}
	{
		p.SetState(1611)
		p.BlockStatements()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISwitchLabelsContext is an interface to support dynamic dispatch.
type ISwitchLabelsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllSwitchLabel() []ISwitchLabelContext
	SwitchLabel(i int) ISwitchLabelContext

	// IsSwitchLabelsContext differentiates from other interfaces.
	IsSwitchLabelsContext()
}

type SwitchLabelsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwitchLabelsContext() *SwitchLabelsContext {
	var p = new(SwitchLabelsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_switchLabels
	return p
}

func InitEmptySwitchLabelsContext(p *SwitchLabelsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_switchLabels
}

func (*SwitchLabelsContext) IsSwitchLabelsContext() {}

func NewSwitchLabelsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SwitchLabelsContext {
	var p = new(SwitchLabelsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_switchLabels

	return p
}

func (s *SwitchLabelsContext) GetParser() antlr.Parser { return s.parser }

func (s *SwitchLabelsContext) AllSwitchLabel() []ISwitchLabelContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISwitchLabelContext); ok {
			len++
		}
	}

	tst := make([]ISwitchLabelContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISwitchLabelContext); ok {
			tst[i] = t.(ISwitchLabelContext)
			i++
		}
	}

	return tst
}

func (s *SwitchLabelsContext) SwitchLabel(i int) ISwitchLabelContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISwitchLabelContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISwitchLabelContext)
}

func (s *SwitchLabelsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SwitchLabelsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SwitchLabelsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterSwitchLabels(s)
	}
}

func (s *SwitchLabelsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitSwitchLabels(s)
	}
}

func (p *Java8Parser) SwitchLabels() (localctx ISwitchLabelsContext) {
	localctx = NewSwitchLabelsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 290, Java8ParserRULE_switchLabels)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1613)
		p.SwitchLabel()
	}
	p.SetState(1617)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Java8ParserCASE || _la == Java8ParserDEFAULT {
		{
			p.SetState(1614)
			p.SwitchLabel()
		}

		p.SetState(1619)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISwitchLabelContext is an interface to support dynamic dispatch.
type ISwitchLabelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CASE() antlr.TerminalNode
	ConstantExpression() IConstantExpressionContext
	COLON() antlr.TerminalNode
	EnumConstantName() IEnumConstantNameContext
	DEFAULT() antlr.TerminalNode

	// IsSwitchLabelContext differentiates from other interfaces.
	IsSwitchLabelContext()
}

type SwitchLabelContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwitchLabelContext() *SwitchLabelContext {
	var p = new(SwitchLabelContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_switchLabel
	return p
}

func InitEmptySwitchLabelContext(p *SwitchLabelContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_switchLabel
}

func (*SwitchLabelContext) IsSwitchLabelContext() {}

func NewSwitchLabelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SwitchLabelContext {
	var p = new(SwitchLabelContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_switchLabel

	return p
}

func (s *SwitchLabelContext) GetParser() antlr.Parser { return s.parser }

func (s *SwitchLabelContext) CASE() antlr.TerminalNode {
	return s.GetToken(Java8ParserCASE, 0)
}

func (s *SwitchLabelContext) ConstantExpression() IConstantExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstantExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstantExpressionContext)
}

func (s *SwitchLabelContext) COLON() antlr.TerminalNode {
	return s.GetToken(Java8ParserCOLON, 0)
}

func (s *SwitchLabelContext) EnumConstantName() IEnumConstantNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumConstantNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumConstantNameContext)
}

func (s *SwitchLabelContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(Java8ParserDEFAULT, 0)
}

func (s *SwitchLabelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SwitchLabelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SwitchLabelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterSwitchLabel(s)
	}
}

func (s *SwitchLabelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitSwitchLabel(s)
	}
}

func (p *Java8Parser) SwitchLabel() (localctx ISwitchLabelContext) {
	localctx = NewSwitchLabelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 292, Java8ParserRULE_switchLabel)
	p.SetState(1630)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 163, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1620)
			p.Match(Java8ParserCASE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1621)
			p.ConstantExpression()
		}
		{
			p.SetState(1622)
			p.Match(Java8ParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1624)
			p.Match(Java8ParserCASE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1625)
			p.EnumConstantName()
		}
		{
			p.SetState(1626)
			p.Match(Java8ParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1628)
			p.Match(Java8ParserDEFAULT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1629)
			p.Match(Java8ParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEnumConstantNameContext is an interface to support dynamic dispatch.
type IEnumConstantNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode

	// IsEnumConstantNameContext differentiates from other interfaces.
	IsEnumConstantNameContext()
}

type EnumConstantNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumConstantNameContext() *EnumConstantNameContext {
	var p = new(EnumConstantNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_enumConstantName
	return p
}

func InitEmptyEnumConstantNameContext(p *EnumConstantNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_enumConstantName
}

func (*EnumConstantNameContext) IsEnumConstantNameContext() {}

func NewEnumConstantNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumConstantNameContext {
	var p = new(EnumConstantNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_enumConstantName

	return p
}

func (s *EnumConstantNameContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumConstantNameContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *EnumConstantNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumConstantNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumConstantNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterEnumConstantName(s)
	}
}

func (s *EnumConstantNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitEnumConstantName(s)
	}
}

func (p *Java8Parser) EnumConstantName() (localctx IEnumConstantNameContext) {
	localctx = NewEnumConstantNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 294, Java8ParserRULE_enumConstantName)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1632)
		p.Match(Java8ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWhileStatementContext is an interface to support dynamic dispatch.
type IWhileStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WHILE() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	Expression() IExpressionContext
	RPAREN() antlr.TerminalNode
	Statement() IStatementContext

	// IsWhileStatementContext differentiates from other interfaces.
	IsWhileStatementContext()
}

type WhileStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhileStatementContext() *WhileStatementContext {
	var p = new(WhileStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_whileStatement
	return p
}

func InitEmptyWhileStatementContext(p *WhileStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_whileStatement
}

func (*WhileStatementContext) IsWhileStatementContext() {}

func NewWhileStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhileStatementContext {
	var p = new(WhileStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_whileStatement

	return p
}

func (s *WhileStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *WhileStatementContext) WHILE() antlr.TerminalNode {
	return s.GetToken(Java8ParserWHILE, 0)
}

func (s *WhileStatementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserLPAREN, 0)
}

func (s *WhileStatementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *WhileStatementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRPAREN, 0)
}

func (s *WhileStatementContext) Statement() IStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *WhileStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhileStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhileStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterWhileStatement(s)
	}
}

func (s *WhileStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitWhileStatement(s)
	}
}

func (p *Java8Parser) WhileStatement() (localctx IWhileStatementContext) {
	localctx = NewWhileStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 296, Java8ParserRULE_whileStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1634)
		p.Match(Java8ParserWHILE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1635)
		p.Match(Java8ParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1636)
		p.Expression()
	}
	{
		p.SetState(1637)
		p.Match(Java8ParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1638)
		p.Statement()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWhileStatementNoShortIfContext is an interface to support dynamic dispatch.
type IWhileStatementNoShortIfContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WHILE() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	Expression() IExpressionContext
	RPAREN() antlr.TerminalNode
	StatementNoShortIf() IStatementNoShortIfContext

	// IsWhileStatementNoShortIfContext differentiates from other interfaces.
	IsWhileStatementNoShortIfContext()
}

type WhileStatementNoShortIfContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhileStatementNoShortIfContext() *WhileStatementNoShortIfContext {
	var p = new(WhileStatementNoShortIfContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_whileStatementNoShortIf
	return p
}

func InitEmptyWhileStatementNoShortIfContext(p *WhileStatementNoShortIfContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_whileStatementNoShortIf
}

func (*WhileStatementNoShortIfContext) IsWhileStatementNoShortIfContext() {}

func NewWhileStatementNoShortIfContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhileStatementNoShortIfContext {
	var p = new(WhileStatementNoShortIfContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_whileStatementNoShortIf

	return p
}

func (s *WhileStatementNoShortIfContext) GetParser() antlr.Parser { return s.parser }

func (s *WhileStatementNoShortIfContext) WHILE() antlr.TerminalNode {
	return s.GetToken(Java8ParserWHILE, 0)
}

func (s *WhileStatementNoShortIfContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserLPAREN, 0)
}

func (s *WhileStatementNoShortIfContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *WhileStatementNoShortIfContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRPAREN, 0)
}

func (s *WhileStatementNoShortIfContext) StatementNoShortIf() IStatementNoShortIfContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementNoShortIfContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementNoShortIfContext)
}

func (s *WhileStatementNoShortIfContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhileStatementNoShortIfContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhileStatementNoShortIfContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterWhileStatementNoShortIf(s)
	}
}

func (s *WhileStatementNoShortIfContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitWhileStatementNoShortIf(s)
	}
}

func (p *Java8Parser) WhileStatementNoShortIf() (localctx IWhileStatementNoShortIfContext) {
	localctx = NewWhileStatementNoShortIfContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 298, Java8ParserRULE_whileStatementNoShortIf)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1640)
		p.Match(Java8ParserWHILE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1641)
		p.Match(Java8ParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1642)
		p.Expression()
	}
	{
		p.SetState(1643)
		p.Match(Java8ParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1644)
		p.StatementNoShortIf()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDoStatementContext is an interface to support dynamic dispatch.
type IDoStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DO() antlr.TerminalNode
	Statement() IStatementContext
	WHILE() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	Expression() IExpressionContext
	RPAREN() antlr.TerminalNode
	SEMI() antlr.TerminalNode

	// IsDoStatementContext differentiates from other interfaces.
	IsDoStatementContext()
}

type DoStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDoStatementContext() *DoStatementContext {
	var p = new(DoStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_doStatement
	return p
}

func InitEmptyDoStatementContext(p *DoStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_doStatement
}

func (*DoStatementContext) IsDoStatementContext() {}

func NewDoStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DoStatementContext {
	var p = new(DoStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_doStatement

	return p
}

func (s *DoStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DoStatementContext) DO() antlr.TerminalNode {
	return s.GetToken(Java8ParserDO, 0)
}

func (s *DoStatementContext) Statement() IStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *DoStatementContext) WHILE() antlr.TerminalNode {
	return s.GetToken(Java8ParserWHILE, 0)
}

func (s *DoStatementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserLPAREN, 0)
}

func (s *DoStatementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DoStatementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRPAREN, 0)
}

func (s *DoStatementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(Java8ParserSEMI, 0)
}

func (s *DoStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DoStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DoStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterDoStatement(s)
	}
}

func (s *DoStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitDoStatement(s)
	}
}

func (p *Java8Parser) DoStatement() (localctx IDoStatementContext) {
	localctx = NewDoStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 300, Java8ParserRULE_doStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1646)
		p.Match(Java8ParserDO)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1647)
		p.Statement()
	}
	{
		p.SetState(1648)
		p.Match(Java8ParserWHILE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1649)
		p.Match(Java8ParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1650)
		p.Expression()
	}
	{
		p.SetState(1651)
		p.Match(Java8ParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1652)
		p.Match(Java8ParserSEMI)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IForStatementContext is an interface to support dynamic dispatch.
type IForStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BasicForStatement() IBasicForStatementContext
	EnhancedForStatement() IEnhancedForStatementContext

	// IsForStatementContext differentiates from other interfaces.
	IsForStatementContext()
}

type ForStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForStatementContext() *ForStatementContext {
	var p = new(ForStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_forStatement
	return p
}

func InitEmptyForStatementContext(p *ForStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_forStatement
}

func (*ForStatementContext) IsForStatementContext() {}

func NewForStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForStatementContext {
	var p = new(ForStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_forStatement

	return p
}

func (s *ForStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ForStatementContext) BasicForStatement() IBasicForStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBasicForStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBasicForStatementContext)
}

func (s *ForStatementContext) EnhancedForStatement() IEnhancedForStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnhancedForStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnhancedForStatementContext)
}

func (s *ForStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterForStatement(s)
	}
}

func (s *ForStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitForStatement(s)
	}
}

func (p *Java8Parser) ForStatement() (localctx IForStatementContext) {
	localctx = NewForStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 302, Java8ParserRULE_forStatement)
	p.SetState(1656)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 164, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1654)
			p.BasicForStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1655)
			p.EnhancedForStatement()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IForStatementNoShortIfContext is an interface to support dynamic dispatch.
type IForStatementNoShortIfContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BasicForStatementNoShortIf() IBasicForStatementNoShortIfContext
	EnhancedForStatementNoShortIf() IEnhancedForStatementNoShortIfContext

	// IsForStatementNoShortIfContext differentiates from other interfaces.
	IsForStatementNoShortIfContext()
}

type ForStatementNoShortIfContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForStatementNoShortIfContext() *ForStatementNoShortIfContext {
	var p = new(ForStatementNoShortIfContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_forStatementNoShortIf
	return p
}

func InitEmptyForStatementNoShortIfContext(p *ForStatementNoShortIfContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_forStatementNoShortIf
}

func (*ForStatementNoShortIfContext) IsForStatementNoShortIfContext() {}

func NewForStatementNoShortIfContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForStatementNoShortIfContext {
	var p = new(ForStatementNoShortIfContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_forStatementNoShortIf

	return p
}

func (s *ForStatementNoShortIfContext) GetParser() antlr.Parser { return s.parser }

func (s *ForStatementNoShortIfContext) BasicForStatementNoShortIf() IBasicForStatementNoShortIfContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBasicForStatementNoShortIfContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBasicForStatementNoShortIfContext)
}

func (s *ForStatementNoShortIfContext) EnhancedForStatementNoShortIf() IEnhancedForStatementNoShortIfContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnhancedForStatementNoShortIfContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnhancedForStatementNoShortIfContext)
}

func (s *ForStatementNoShortIfContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForStatementNoShortIfContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForStatementNoShortIfContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterForStatementNoShortIf(s)
	}
}

func (s *ForStatementNoShortIfContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitForStatementNoShortIf(s)
	}
}

func (p *Java8Parser) ForStatementNoShortIf() (localctx IForStatementNoShortIfContext) {
	localctx = NewForStatementNoShortIfContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 304, Java8ParserRULE_forStatementNoShortIf)
	p.SetState(1660)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 165, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1658)
			p.BasicForStatementNoShortIf()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1659)
			p.EnhancedForStatementNoShortIf()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBasicForStatementContext is an interface to support dynamic dispatch.
type IBasicForStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FOR() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	AllSEMI() []antlr.TerminalNode
	SEMI(i int) antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	Statement() IStatementContext
	ForInit() IForInitContext
	Expression() IExpressionContext
	ForUpdate() IForUpdateContext

	// IsBasicForStatementContext differentiates from other interfaces.
	IsBasicForStatementContext()
}

type BasicForStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBasicForStatementContext() *BasicForStatementContext {
	var p = new(BasicForStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_basicForStatement
	return p
}

func InitEmptyBasicForStatementContext(p *BasicForStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_basicForStatement
}

func (*BasicForStatementContext) IsBasicForStatementContext() {}

func NewBasicForStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BasicForStatementContext {
	var p = new(BasicForStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_basicForStatement

	return p
}

func (s *BasicForStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BasicForStatementContext) FOR() antlr.TerminalNode {
	return s.GetToken(Java8ParserFOR, 0)
}

func (s *BasicForStatementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserLPAREN, 0)
}

func (s *BasicForStatementContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserSEMI)
}

func (s *BasicForStatementContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserSEMI, i)
}

func (s *BasicForStatementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRPAREN, 0)
}

func (s *BasicForStatementContext) Statement() IStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *BasicForStatementContext) ForInit() IForInitContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForInitContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForInitContext)
}

func (s *BasicForStatementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *BasicForStatementContext) ForUpdate() IForUpdateContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForUpdateContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForUpdateContext)
}

func (s *BasicForStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BasicForStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BasicForStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterBasicForStatement(s)
	}
}

func (s *BasicForStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitBasicForStatement(s)
	}
}

func (p *Java8Parser) BasicForStatement() (localctx IBasicForStatementContext) {
	localctx = NewBasicForStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 306, Java8ParserRULE_basicForStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1662)
		p.Match(Java8ParserFOR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1663)
		p.Match(Java8ParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1665)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&286270087178240296) != 0) || ((int64((_la-79)) & ^0x3f) == 0 && ((int64(1)<<(_la-79))&25165827) != 0) {
		{
			p.SetState(1664)
			p.ForInit()
		}

	}
	{
		p.SetState(1667)
		p.Match(Java8ParserSEMI)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1669)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&286270087177978152) != 0) || ((int64((_la-69)) & ^0x3f) == 0 && ((int64(1)<<(_la-69))&25769819139) != 0) {
		{
			p.SetState(1668)
			p.Expression()
		}

	}
	{
		p.SetState(1671)
		p.Match(Java8ParserSEMI)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1673)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&286270087177978152) != 0) || ((int64((_la-79)) & ^0x3f) == 0 && ((int64(1)<<(_la-79))&25165827) != 0) {
		{
			p.SetState(1672)
			p.ForUpdate()
		}

	}
	{
		p.SetState(1675)
		p.Match(Java8ParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1676)
		p.Statement()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBasicForStatementNoShortIfContext is an interface to support dynamic dispatch.
type IBasicForStatementNoShortIfContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FOR() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	AllSEMI() []antlr.TerminalNode
	SEMI(i int) antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	StatementNoShortIf() IStatementNoShortIfContext
	ForInit() IForInitContext
	Expression() IExpressionContext
	ForUpdate() IForUpdateContext

	// IsBasicForStatementNoShortIfContext differentiates from other interfaces.
	IsBasicForStatementNoShortIfContext()
}

type BasicForStatementNoShortIfContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBasicForStatementNoShortIfContext() *BasicForStatementNoShortIfContext {
	var p = new(BasicForStatementNoShortIfContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_basicForStatementNoShortIf
	return p
}

func InitEmptyBasicForStatementNoShortIfContext(p *BasicForStatementNoShortIfContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_basicForStatementNoShortIf
}

func (*BasicForStatementNoShortIfContext) IsBasicForStatementNoShortIfContext() {}

func NewBasicForStatementNoShortIfContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BasicForStatementNoShortIfContext {
	var p = new(BasicForStatementNoShortIfContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_basicForStatementNoShortIf

	return p
}

func (s *BasicForStatementNoShortIfContext) GetParser() antlr.Parser { return s.parser }

func (s *BasicForStatementNoShortIfContext) FOR() antlr.TerminalNode {
	return s.GetToken(Java8ParserFOR, 0)
}

func (s *BasicForStatementNoShortIfContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserLPAREN, 0)
}

func (s *BasicForStatementNoShortIfContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserSEMI)
}

func (s *BasicForStatementNoShortIfContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserSEMI, i)
}

func (s *BasicForStatementNoShortIfContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRPAREN, 0)
}

func (s *BasicForStatementNoShortIfContext) StatementNoShortIf() IStatementNoShortIfContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementNoShortIfContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementNoShortIfContext)
}

func (s *BasicForStatementNoShortIfContext) ForInit() IForInitContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForInitContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForInitContext)
}

func (s *BasicForStatementNoShortIfContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *BasicForStatementNoShortIfContext) ForUpdate() IForUpdateContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForUpdateContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForUpdateContext)
}

func (s *BasicForStatementNoShortIfContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BasicForStatementNoShortIfContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BasicForStatementNoShortIfContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterBasicForStatementNoShortIf(s)
	}
}

func (s *BasicForStatementNoShortIfContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitBasicForStatementNoShortIf(s)
	}
}

func (p *Java8Parser) BasicForStatementNoShortIf() (localctx IBasicForStatementNoShortIfContext) {
	localctx = NewBasicForStatementNoShortIfContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 308, Java8ParserRULE_basicForStatementNoShortIf)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1678)
		p.Match(Java8ParserFOR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1679)
		p.Match(Java8ParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1681)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&286270087178240296) != 0) || ((int64((_la-79)) & ^0x3f) == 0 && ((int64(1)<<(_la-79))&25165827) != 0) {
		{
			p.SetState(1680)
			p.ForInit()
		}

	}
	{
		p.SetState(1683)
		p.Match(Java8ParserSEMI)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1685)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&286270087177978152) != 0) || ((int64((_la-69)) & ^0x3f) == 0 && ((int64(1)<<(_la-69))&25769819139) != 0) {
		{
			p.SetState(1684)
			p.Expression()
		}

	}
	{
		p.SetState(1687)
		p.Match(Java8ParserSEMI)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1689)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&286270087177978152) != 0) || ((int64((_la-79)) & ^0x3f) == 0 && ((int64(1)<<(_la-79))&25165827) != 0) {
		{
			p.SetState(1688)
			p.ForUpdate()
		}

	}
	{
		p.SetState(1691)
		p.Match(Java8ParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1692)
		p.StatementNoShortIf()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IForInitContext is an interface to support dynamic dispatch.
type IForInitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	StatementExpressionList() IStatementExpressionListContext
	LocalVariableDeclaration() ILocalVariableDeclarationContext

	// IsForInitContext differentiates from other interfaces.
	IsForInitContext()
}

type ForInitContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForInitContext() *ForInitContext {
	var p = new(ForInitContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_forInit
	return p
}

func InitEmptyForInitContext(p *ForInitContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_forInit
}

func (*ForInitContext) IsForInitContext() {}

func NewForInitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForInitContext {
	var p = new(ForInitContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_forInit

	return p
}

func (s *ForInitContext) GetParser() antlr.Parser { return s.parser }

func (s *ForInitContext) StatementExpressionList() IStatementExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementExpressionListContext)
}

func (s *ForInitContext) LocalVariableDeclaration() ILocalVariableDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILocalVariableDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILocalVariableDeclarationContext)
}

func (s *ForInitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForInitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForInitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterForInit(s)
	}
}

func (s *ForInitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitForInit(s)
	}
}

func (p *Java8Parser) ForInit() (localctx IForInitContext) {
	localctx = NewForInitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 310, Java8ParserRULE_forInit)
	p.SetState(1696)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 172, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1694)
			p.StatementExpressionList()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1695)
			p.LocalVariableDeclaration()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IForUpdateContext is an interface to support dynamic dispatch.
type IForUpdateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	StatementExpressionList() IStatementExpressionListContext

	// IsForUpdateContext differentiates from other interfaces.
	IsForUpdateContext()
}

type ForUpdateContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForUpdateContext() *ForUpdateContext {
	var p = new(ForUpdateContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_forUpdate
	return p
}

func InitEmptyForUpdateContext(p *ForUpdateContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_forUpdate
}

func (*ForUpdateContext) IsForUpdateContext() {}

func NewForUpdateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForUpdateContext {
	var p = new(ForUpdateContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_forUpdate

	return p
}

func (s *ForUpdateContext) GetParser() antlr.Parser { return s.parser }

func (s *ForUpdateContext) StatementExpressionList() IStatementExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementExpressionListContext)
}

func (s *ForUpdateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForUpdateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForUpdateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterForUpdate(s)
	}
}

func (s *ForUpdateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitForUpdate(s)
	}
}

func (p *Java8Parser) ForUpdate() (localctx IForUpdateContext) {
	localctx = NewForUpdateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 312, Java8ParserRULE_forUpdate)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1698)
		p.StatementExpressionList()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStatementExpressionListContext is an interface to support dynamic dispatch.
type IStatementExpressionListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllStatementExpression() []IStatementExpressionContext
	StatementExpression(i int) IStatementExpressionContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsStatementExpressionListContext differentiates from other interfaces.
	IsStatementExpressionListContext()
}

type StatementExpressionListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementExpressionListContext() *StatementExpressionListContext {
	var p = new(StatementExpressionListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_statementExpressionList
	return p
}

func InitEmptyStatementExpressionListContext(p *StatementExpressionListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_statementExpressionList
}

func (*StatementExpressionListContext) IsStatementExpressionListContext() {}

func NewStatementExpressionListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementExpressionListContext {
	var p = new(StatementExpressionListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_statementExpressionList

	return p
}

func (s *StatementExpressionListContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementExpressionListContext) AllStatementExpression() []IStatementExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStatementExpressionContext); ok {
			len++
		}
	}

	tst := make([]IStatementExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStatementExpressionContext); ok {
			tst[i] = t.(IStatementExpressionContext)
			i++
		}
	}

	return tst
}

func (s *StatementExpressionListContext) StatementExpression(i int) IStatementExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementExpressionContext)
}

func (s *StatementExpressionListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserCOMMA)
}

func (s *StatementExpressionListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserCOMMA, i)
}

func (s *StatementExpressionListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementExpressionListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementExpressionListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterStatementExpressionList(s)
	}
}

func (s *StatementExpressionListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitStatementExpressionList(s)
	}
}

func (p *Java8Parser) StatementExpressionList() (localctx IStatementExpressionListContext) {
	localctx = NewStatementExpressionListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 314, Java8ParserRULE_statementExpressionList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1700)
		p.StatementExpression()
	}
	p.SetState(1705)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Java8ParserCOMMA {
		{
			p.SetState(1701)
			p.Match(Java8ParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1702)
			p.StatementExpression()
		}

		p.SetState(1707)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEnhancedForStatementContext is an interface to support dynamic dispatch.
type IEnhancedForStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FOR() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	UnannType() IUnannTypeContext
	VariableDeclaratorId() IVariableDeclaratorIdContext
	COLON() antlr.TerminalNode
	Expression() IExpressionContext
	RPAREN() antlr.TerminalNode
	Statement() IStatementContext
	AllVariableModifier() []IVariableModifierContext
	VariableModifier(i int) IVariableModifierContext

	// IsEnhancedForStatementContext differentiates from other interfaces.
	IsEnhancedForStatementContext()
}

type EnhancedForStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnhancedForStatementContext() *EnhancedForStatementContext {
	var p = new(EnhancedForStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_enhancedForStatement
	return p
}

func InitEmptyEnhancedForStatementContext(p *EnhancedForStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_enhancedForStatement
}

func (*EnhancedForStatementContext) IsEnhancedForStatementContext() {}

func NewEnhancedForStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnhancedForStatementContext {
	var p = new(EnhancedForStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_enhancedForStatement

	return p
}

func (s *EnhancedForStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *EnhancedForStatementContext) FOR() antlr.TerminalNode {
	return s.GetToken(Java8ParserFOR, 0)
}

func (s *EnhancedForStatementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserLPAREN, 0)
}

func (s *EnhancedForStatementContext) UnannType() IUnannTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnannTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnannTypeContext)
}

func (s *EnhancedForStatementContext) VariableDeclaratorId() IVariableDeclaratorIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableDeclaratorIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableDeclaratorIdContext)
}

func (s *EnhancedForStatementContext) COLON() antlr.TerminalNode {
	return s.GetToken(Java8ParserCOLON, 0)
}

func (s *EnhancedForStatementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *EnhancedForStatementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRPAREN, 0)
}

func (s *EnhancedForStatementContext) Statement() IStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *EnhancedForStatementContext) AllVariableModifier() []IVariableModifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVariableModifierContext); ok {
			len++
		}
	}

	tst := make([]IVariableModifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVariableModifierContext); ok {
			tst[i] = t.(IVariableModifierContext)
			i++
		}
	}

	return tst
}

func (s *EnhancedForStatementContext) VariableModifier(i int) IVariableModifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableModifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableModifierContext)
}

func (s *EnhancedForStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnhancedForStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnhancedForStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterEnhancedForStatement(s)
	}
}

func (s *EnhancedForStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitEnhancedForStatement(s)
	}
}

func (p *Java8Parser) EnhancedForStatement() (localctx IEnhancedForStatementContext) {
	localctx = NewEnhancedForStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 316, Java8ParserRULE_enhancedForStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1708)
		p.Match(Java8ParserFOR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1709)
		p.Match(Java8ParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1713)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Java8ParserFINAL || _la == Java8ParserAT {
		{
			p.SetState(1710)
			p.VariableModifier()
		}

		p.SetState(1715)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1716)
		p.UnannType()
	}
	{
		p.SetState(1717)
		p.VariableDeclaratorId()
	}
	{
		p.SetState(1718)
		p.Match(Java8ParserCOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1719)
		p.Expression()
	}
	{
		p.SetState(1720)
		p.Match(Java8ParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1721)
		p.Statement()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEnhancedForStatementNoShortIfContext is an interface to support dynamic dispatch.
type IEnhancedForStatementNoShortIfContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FOR() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	UnannType() IUnannTypeContext
	VariableDeclaratorId() IVariableDeclaratorIdContext
	COLON() antlr.TerminalNode
	Expression() IExpressionContext
	RPAREN() antlr.TerminalNode
	StatementNoShortIf() IStatementNoShortIfContext
	AllVariableModifier() []IVariableModifierContext
	VariableModifier(i int) IVariableModifierContext

	// IsEnhancedForStatementNoShortIfContext differentiates from other interfaces.
	IsEnhancedForStatementNoShortIfContext()
}

type EnhancedForStatementNoShortIfContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnhancedForStatementNoShortIfContext() *EnhancedForStatementNoShortIfContext {
	var p = new(EnhancedForStatementNoShortIfContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_enhancedForStatementNoShortIf
	return p
}

func InitEmptyEnhancedForStatementNoShortIfContext(p *EnhancedForStatementNoShortIfContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_enhancedForStatementNoShortIf
}

func (*EnhancedForStatementNoShortIfContext) IsEnhancedForStatementNoShortIfContext() {}

func NewEnhancedForStatementNoShortIfContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnhancedForStatementNoShortIfContext {
	var p = new(EnhancedForStatementNoShortIfContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_enhancedForStatementNoShortIf

	return p
}

func (s *EnhancedForStatementNoShortIfContext) GetParser() antlr.Parser { return s.parser }

func (s *EnhancedForStatementNoShortIfContext) FOR() antlr.TerminalNode {
	return s.GetToken(Java8ParserFOR, 0)
}

func (s *EnhancedForStatementNoShortIfContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserLPAREN, 0)
}

func (s *EnhancedForStatementNoShortIfContext) UnannType() IUnannTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnannTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnannTypeContext)
}

func (s *EnhancedForStatementNoShortIfContext) VariableDeclaratorId() IVariableDeclaratorIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableDeclaratorIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableDeclaratorIdContext)
}

func (s *EnhancedForStatementNoShortIfContext) COLON() antlr.TerminalNode {
	return s.GetToken(Java8ParserCOLON, 0)
}

func (s *EnhancedForStatementNoShortIfContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *EnhancedForStatementNoShortIfContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRPAREN, 0)
}

func (s *EnhancedForStatementNoShortIfContext) StatementNoShortIf() IStatementNoShortIfContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementNoShortIfContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementNoShortIfContext)
}

func (s *EnhancedForStatementNoShortIfContext) AllVariableModifier() []IVariableModifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVariableModifierContext); ok {
			len++
		}
	}

	tst := make([]IVariableModifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVariableModifierContext); ok {
			tst[i] = t.(IVariableModifierContext)
			i++
		}
	}

	return tst
}

func (s *EnhancedForStatementNoShortIfContext) VariableModifier(i int) IVariableModifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableModifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableModifierContext)
}

func (s *EnhancedForStatementNoShortIfContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnhancedForStatementNoShortIfContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnhancedForStatementNoShortIfContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterEnhancedForStatementNoShortIf(s)
	}
}

func (s *EnhancedForStatementNoShortIfContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitEnhancedForStatementNoShortIf(s)
	}
}

func (p *Java8Parser) EnhancedForStatementNoShortIf() (localctx IEnhancedForStatementNoShortIfContext) {
	localctx = NewEnhancedForStatementNoShortIfContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 318, Java8ParserRULE_enhancedForStatementNoShortIf)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1723)
		p.Match(Java8ParserFOR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1724)
		p.Match(Java8ParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1728)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Java8ParserFINAL || _la == Java8ParserAT {
		{
			p.SetState(1725)
			p.VariableModifier()
		}

		p.SetState(1730)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1731)
		p.UnannType()
	}
	{
		p.SetState(1732)
		p.VariableDeclaratorId()
	}
	{
		p.SetState(1733)
		p.Match(Java8ParserCOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1734)
		p.Expression()
	}
	{
		p.SetState(1735)
		p.Match(Java8ParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1736)
		p.StatementNoShortIf()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBreakStatementContext is an interface to support dynamic dispatch.
type IBreakStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BREAK() antlr.TerminalNode
	SEMI() antlr.TerminalNode
	Identifier() antlr.TerminalNode

	// IsBreakStatementContext differentiates from other interfaces.
	IsBreakStatementContext()
}

type BreakStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBreakStatementContext() *BreakStatementContext {
	var p = new(BreakStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_breakStatement
	return p
}

func InitEmptyBreakStatementContext(p *BreakStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_breakStatement
}

func (*BreakStatementContext) IsBreakStatementContext() {}

func NewBreakStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BreakStatementContext {
	var p = new(BreakStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_breakStatement

	return p
}

func (s *BreakStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BreakStatementContext) BREAK() antlr.TerminalNode {
	return s.GetToken(Java8ParserBREAK, 0)
}

func (s *BreakStatementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(Java8ParserSEMI, 0)
}

func (s *BreakStatementContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *BreakStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BreakStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BreakStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterBreakStatement(s)
	}
}

func (s *BreakStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitBreakStatement(s)
	}
}

func (p *Java8Parser) BreakStatement() (localctx IBreakStatementContext) {
	localctx = NewBreakStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 320, Java8ParserRULE_breakStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1738)
		p.Match(Java8ParserBREAK)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1740)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserIdentifier {
		{
			p.SetState(1739)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1742)
		p.Match(Java8ParserSEMI)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IContinueStatementContext is an interface to support dynamic dispatch.
type IContinueStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CONTINUE() antlr.TerminalNode
	SEMI() antlr.TerminalNode
	Identifier() antlr.TerminalNode

	// IsContinueStatementContext differentiates from other interfaces.
	IsContinueStatementContext()
}

type ContinueStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContinueStatementContext() *ContinueStatementContext {
	var p = new(ContinueStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_continueStatement
	return p
}

func InitEmptyContinueStatementContext(p *ContinueStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_continueStatement
}

func (*ContinueStatementContext) IsContinueStatementContext() {}

func NewContinueStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ContinueStatementContext {
	var p = new(ContinueStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_continueStatement

	return p
}

func (s *ContinueStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ContinueStatementContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(Java8ParserCONTINUE, 0)
}

func (s *ContinueStatementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(Java8ParserSEMI, 0)
}

func (s *ContinueStatementContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *ContinueStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContinueStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ContinueStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterContinueStatement(s)
	}
}

func (s *ContinueStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitContinueStatement(s)
	}
}

func (p *Java8Parser) ContinueStatement() (localctx IContinueStatementContext) {
	localctx = NewContinueStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 322, Java8ParserRULE_continueStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1744)
		p.Match(Java8ParserCONTINUE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1746)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserIdentifier {
		{
			p.SetState(1745)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1748)
		p.Match(Java8ParserSEMI)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IReturnStatementContext is an interface to support dynamic dispatch.
type IReturnStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RETURN() antlr.TerminalNode
	SEMI() antlr.TerminalNode
	Expression() IExpressionContext

	// IsReturnStatementContext differentiates from other interfaces.
	IsReturnStatementContext()
}

type ReturnStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnStatementContext() *ReturnStatementContext {
	var p = new(ReturnStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_returnStatement
	return p
}

func InitEmptyReturnStatementContext(p *ReturnStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_returnStatement
}

func (*ReturnStatementContext) IsReturnStatementContext() {}

func NewReturnStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnStatementContext {
	var p = new(ReturnStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_returnStatement

	return p
}

func (s *ReturnStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnStatementContext) RETURN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRETURN, 0)
}

func (s *ReturnStatementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(Java8ParserSEMI, 0)
}

func (s *ReturnStatementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ReturnStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterReturnStatement(s)
	}
}

func (s *ReturnStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitReturnStatement(s)
	}
}

func (p *Java8Parser) ReturnStatement() (localctx IReturnStatementContext) {
	localctx = NewReturnStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 324, Java8ParserRULE_returnStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1750)
		p.Match(Java8ParserRETURN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1752)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&286270087177978152) != 0) || ((int64((_la-69)) & ^0x3f) == 0 && ((int64(1)<<(_la-69))&25769819139) != 0) {
		{
			p.SetState(1751)
			p.Expression()
		}

	}
	{
		p.SetState(1754)
		p.Match(Java8ParserSEMI)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IThrowStatementContext is an interface to support dynamic dispatch.
type IThrowStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	THROW() antlr.TerminalNode
	Expression() IExpressionContext
	SEMI() antlr.TerminalNode

	// IsThrowStatementContext differentiates from other interfaces.
	IsThrowStatementContext()
}

type ThrowStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyThrowStatementContext() *ThrowStatementContext {
	var p = new(ThrowStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_throwStatement
	return p
}

func InitEmptyThrowStatementContext(p *ThrowStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_throwStatement
}

func (*ThrowStatementContext) IsThrowStatementContext() {}

func NewThrowStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ThrowStatementContext {
	var p = new(ThrowStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_throwStatement

	return p
}

func (s *ThrowStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ThrowStatementContext) THROW() antlr.TerminalNode {
	return s.GetToken(Java8ParserTHROW, 0)
}

func (s *ThrowStatementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ThrowStatementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(Java8ParserSEMI, 0)
}

func (s *ThrowStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ThrowStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ThrowStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterThrowStatement(s)
	}
}

func (s *ThrowStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitThrowStatement(s)
	}
}

func (p *Java8Parser) ThrowStatement() (localctx IThrowStatementContext) {
	localctx = NewThrowStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 326, Java8ParserRULE_throwStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1756)
		p.Match(Java8ParserTHROW)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1757)
		p.Expression()
	}
	{
		p.SetState(1758)
		p.Match(Java8ParserSEMI)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISynchronizedStatementContext is an interface to support dynamic dispatch.
type ISynchronizedStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SYNCHRONIZED() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	Expression() IExpressionContext
	RPAREN() antlr.TerminalNode
	Block() IBlockContext

	// IsSynchronizedStatementContext differentiates from other interfaces.
	IsSynchronizedStatementContext()
}

type SynchronizedStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySynchronizedStatementContext() *SynchronizedStatementContext {
	var p = new(SynchronizedStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_synchronizedStatement
	return p
}

func InitEmptySynchronizedStatementContext(p *SynchronizedStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_synchronizedStatement
}

func (*SynchronizedStatementContext) IsSynchronizedStatementContext() {}

func NewSynchronizedStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SynchronizedStatementContext {
	var p = new(SynchronizedStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_synchronizedStatement

	return p
}

func (s *SynchronizedStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SynchronizedStatementContext) SYNCHRONIZED() antlr.TerminalNode {
	return s.GetToken(Java8ParserSYNCHRONIZED, 0)
}

func (s *SynchronizedStatementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserLPAREN, 0)
}

func (s *SynchronizedStatementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SynchronizedStatementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRPAREN, 0)
}

func (s *SynchronizedStatementContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *SynchronizedStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SynchronizedStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SynchronizedStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterSynchronizedStatement(s)
	}
}

func (s *SynchronizedStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitSynchronizedStatement(s)
	}
}

func (p *Java8Parser) SynchronizedStatement() (localctx ISynchronizedStatementContext) {
	localctx = NewSynchronizedStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 328, Java8ParserRULE_synchronizedStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1760)
		p.Match(Java8ParserSYNCHRONIZED)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1761)
		p.Match(Java8ParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1762)
		p.Expression()
	}
	{
		p.SetState(1763)
		p.Match(Java8ParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1764)
		p.Block()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITryStatementContext is an interface to support dynamic dispatch.
type ITryStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TRY() antlr.TerminalNode
	Block() IBlockContext
	Catches() ICatchesContext
	Finally_() IFinally_Context
	TryWithResourcesStatement() ITryWithResourcesStatementContext

	// IsTryStatementContext differentiates from other interfaces.
	IsTryStatementContext()
}

type TryStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTryStatementContext() *TryStatementContext {
	var p = new(TryStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_tryStatement
	return p
}

func InitEmptyTryStatementContext(p *TryStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_tryStatement
}

func (*TryStatementContext) IsTryStatementContext() {}

func NewTryStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TryStatementContext {
	var p = new(TryStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_tryStatement

	return p
}

func (s *TryStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *TryStatementContext) TRY() antlr.TerminalNode {
	return s.GetToken(Java8ParserTRY, 0)
}

func (s *TryStatementContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *TryStatementContext) Catches() ICatchesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICatchesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICatchesContext)
}

func (s *TryStatementContext) Finally_() IFinally_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFinally_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFinally_Context)
}

func (s *TryStatementContext) TryWithResourcesStatement() ITryWithResourcesStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITryWithResourcesStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITryWithResourcesStatementContext)
}

func (s *TryStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TryStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TryStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterTryStatement(s)
	}
}

func (s *TryStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitTryStatement(s)
	}
}

func (p *Java8Parser) TryStatement() (localctx ITryStatementContext) {
	localctx = NewTryStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 330, Java8ParserRULE_tryStatement)
	var _la int

	p.SetState(1778)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 180, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1766)
			p.Match(Java8ParserTRY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1767)
			p.Block()
		}
		{
			p.SetState(1768)
			p.Catches()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1770)
			p.Match(Java8ParserTRY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1771)
			p.Block()
		}
		p.SetState(1773)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserCATCH {
			{
				p.SetState(1772)
				p.Catches()
			}

		}
		{
			p.SetState(1775)
			p.Finally_()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1777)
			p.TryWithResourcesStatement()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICatchesContext is an interface to support dynamic dispatch.
type ICatchesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllCatchClause() []ICatchClauseContext
	CatchClause(i int) ICatchClauseContext

	// IsCatchesContext differentiates from other interfaces.
	IsCatchesContext()
}

type CatchesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCatchesContext() *CatchesContext {
	var p = new(CatchesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_catches
	return p
}

func InitEmptyCatchesContext(p *CatchesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_catches
}

func (*CatchesContext) IsCatchesContext() {}

func NewCatchesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CatchesContext {
	var p = new(CatchesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_catches

	return p
}

func (s *CatchesContext) GetParser() antlr.Parser { return s.parser }

func (s *CatchesContext) AllCatchClause() []ICatchClauseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICatchClauseContext); ok {
			len++
		}
	}

	tst := make([]ICatchClauseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICatchClauseContext); ok {
			tst[i] = t.(ICatchClauseContext)
			i++
		}
	}

	return tst
}

func (s *CatchesContext) CatchClause(i int) ICatchClauseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICatchClauseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICatchClauseContext)
}

func (s *CatchesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CatchesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CatchesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterCatches(s)
	}
}

func (s *CatchesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitCatches(s)
	}
}

func (p *Java8Parser) Catches() (localctx ICatchesContext) {
	localctx = NewCatchesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 332, Java8ParserRULE_catches)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1780)
		p.CatchClause()
	}
	p.SetState(1784)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Java8ParserCATCH {
		{
			p.SetState(1781)
			p.CatchClause()
		}

		p.SetState(1786)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICatchClauseContext is an interface to support dynamic dispatch.
type ICatchClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CATCH() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	CatchFormalParameter() ICatchFormalParameterContext
	RPAREN() antlr.TerminalNode
	Block() IBlockContext

	// IsCatchClauseContext differentiates from other interfaces.
	IsCatchClauseContext()
}

type CatchClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCatchClauseContext() *CatchClauseContext {
	var p = new(CatchClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_catchClause
	return p
}

func InitEmptyCatchClauseContext(p *CatchClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_catchClause
}

func (*CatchClauseContext) IsCatchClauseContext() {}

func NewCatchClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CatchClauseContext {
	var p = new(CatchClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_catchClause

	return p
}

func (s *CatchClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *CatchClauseContext) CATCH() antlr.TerminalNode {
	return s.GetToken(Java8ParserCATCH, 0)
}

func (s *CatchClauseContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserLPAREN, 0)
}

func (s *CatchClauseContext) CatchFormalParameter() ICatchFormalParameterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICatchFormalParameterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICatchFormalParameterContext)
}

func (s *CatchClauseContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRPAREN, 0)
}

func (s *CatchClauseContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *CatchClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CatchClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CatchClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterCatchClause(s)
	}
}

func (s *CatchClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitCatchClause(s)
	}
}

func (p *Java8Parser) CatchClause() (localctx ICatchClauseContext) {
	localctx = NewCatchClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 334, Java8ParserRULE_catchClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1787)
		p.Match(Java8ParserCATCH)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1788)
		p.Match(Java8ParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1789)
		p.CatchFormalParameter()
	}
	{
		p.SetState(1790)
		p.Match(Java8ParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1791)
		p.Block()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICatchFormalParameterContext is an interface to support dynamic dispatch.
type ICatchFormalParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CatchType() ICatchTypeContext
	VariableDeclaratorId() IVariableDeclaratorIdContext
	AllVariableModifier() []IVariableModifierContext
	VariableModifier(i int) IVariableModifierContext

	// IsCatchFormalParameterContext differentiates from other interfaces.
	IsCatchFormalParameterContext()
}

type CatchFormalParameterContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCatchFormalParameterContext() *CatchFormalParameterContext {
	var p = new(CatchFormalParameterContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_catchFormalParameter
	return p
}

func InitEmptyCatchFormalParameterContext(p *CatchFormalParameterContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_catchFormalParameter
}

func (*CatchFormalParameterContext) IsCatchFormalParameterContext() {}

func NewCatchFormalParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CatchFormalParameterContext {
	var p = new(CatchFormalParameterContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_catchFormalParameter

	return p
}

func (s *CatchFormalParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *CatchFormalParameterContext) CatchType() ICatchTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICatchTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICatchTypeContext)
}

func (s *CatchFormalParameterContext) VariableDeclaratorId() IVariableDeclaratorIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableDeclaratorIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableDeclaratorIdContext)
}

func (s *CatchFormalParameterContext) AllVariableModifier() []IVariableModifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVariableModifierContext); ok {
			len++
		}
	}

	tst := make([]IVariableModifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVariableModifierContext); ok {
			tst[i] = t.(IVariableModifierContext)
			i++
		}
	}

	return tst
}

func (s *CatchFormalParameterContext) VariableModifier(i int) IVariableModifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableModifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableModifierContext)
}

func (s *CatchFormalParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CatchFormalParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CatchFormalParameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterCatchFormalParameter(s)
	}
}

func (s *CatchFormalParameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitCatchFormalParameter(s)
	}
}

func (p *Java8Parser) CatchFormalParameter() (localctx ICatchFormalParameterContext) {
	localctx = NewCatchFormalParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 336, Java8ParserRULE_catchFormalParameter)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1796)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Java8ParserFINAL || _la == Java8ParserAT {
		{
			p.SetState(1793)
			p.VariableModifier()
		}

		p.SetState(1798)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1799)
		p.CatchType()
	}
	{
		p.SetState(1800)
		p.VariableDeclaratorId()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICatchTypeContext is an interface to support dynamic dispatch.
type ICatchTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UnannClassType() IUnannClassTypeContext
	AllBITOR() []antlr.TerminalNode
	BITOR(i int) antlr.TerminalNode
	AllClassType() []IClassTypeContext
	ClassType(i int) IClassTypeContext

	// IsCatchTypeContext differentiates from other interfaces.
	IsCatchTypeContext()
}

type CatchTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCatchTypeContext() *CatchTypeContext {
	var p = new(CatchTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_catchType
	return p
}

func InitEmptyCatchTypeContext(p *CatchTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_catchType
}

func (*CatchTypeContext) IsCatchTypeContext() {}

func NewCatchTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CatchTypeContext {
	var p = new(CatchTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_catchType

	return p
}

func (s *CatchTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *CatchTypeContext) UnannClassType() IUnannClassTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnannClassTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnannClassTypeContext)
}

func (s *CatchTypeContext) AllBITOR() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserBITOR)
}

func (s *CatchTypeContext) BITOR(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserBITOR, i)
}

func (s *CatchTypeContext) AllClassType() []IClassTypeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IClassTypeContext); ok {
			len++
		}
	}

	tst := make([]IClassTypeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IClassTypeContext); ok {
			tst[i] = t.(IClassTypeContext)
			i++
		}
	}

	return tst
}

func (s *CatchTypeContext) ClassType(i int) IClassTypeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassTypeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassTypeContext)
}

func (s *CatchTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CatchTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CatchTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterCatchType(s)
	}
}

func (s *CatchTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitCatchType(s)
	}
}

func (p *Java8Parser) CatchType() (localctx ICatchTypeContext) {
	localctx = NewCatchTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 338, Java8ParserRULE_catchType)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1802)
		p.UnannClassType()
	}
	p.SetState(1807)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Java8ParserBITOR {
		{
			p.SetState(1803)
			p.Match(Java8ParserBITOR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1804)
			p.ClassType()
		}

		p.SetState(1809)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFinally_Context is an interface to support dynamic dispatch.
type IFinally_Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FINALLY() antlr.TerminalNode
	Block() IBlockContext

	// IsFinally_Context differentiates from other interfaces.
	IsFinally_Context()
}

type Finally_Context struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFinally_Context() *Finally_Context {
	var p = new(Finally_Context)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_finally_
	return p
}

func InitEmptyFinally_Context(p *Finally_Context) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_finally_
}

func (*Finally_Context) IsFinally_Context() {}

func NewFinally_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Finally_Context {
	var p = new(Finally_Context)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_finally_

	return p
}

func (s *Finally_Context) GetParser() antlr.Parser { return s.parser }

func (s *Finally_Context) FINALLY() antlr.TerminalNode {
	return s.GetToken(Java8ParserFINALLY, 0)
}

func (s *Finally_Context) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *Finally_Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Finally_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Finally_Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterFinally_(s)
	}
}

func (s *Finally_Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitFinally_(s)
	}
}

func (p *Java8Parser) Finally_() (localctx IFinally_Context) {
	localctx = NewFinally_Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 340, Java8ParserRULE_finally_)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1810)
		p.Match(Java8ParserFINALLY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1811)
		p.Block()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITryWithResourcesStatementContext is an interface to support dynamic dispatch.
type ITryWithResourcesStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TRY() antlr.TerminalNode
	ResourceSpecification() IResourceSpecificationContext
	Block() IBlockContext
	Catches() ICatchesContext
	Finally_() IFinally_Context

	// IsTryWithResourcesStatementContext differentiates from other interfaces.
	IsTryWithResourcesStatementContext()
}

type TryWithResourcesStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTryWithResourcesStatementContext() *TryWithResourcesStatementContext {
	var p = new(TryWithResourcesStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_tryWithResourcesStatement
	return p
}

func InitEmptyTryWithResourcesStatementContext(p *TryWithResourcesStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_tryWithResourcesStatement
}

func (*TryWithResourcesStatementContext) IsTryWithResourcesStatementContext() {}

func NewTryWithResourcesStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TryWithResourcesStatementContext {
	var p = new(TryWithResourcesStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_tryWithResourcesStatement

	return p
}

func (s *TryWithResourcesStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *TryWithResourcesStatementContext) TRY() antlr.TerminalNode {
	return s.GetToken(Java8ParserTRY, 0)
}

func (s *TryWithResourcesStatementContext) ResourceSpecification() IResourceSpecificationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResourceSpecificationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResourceSpecificationContext)
}

func (s *TryWithResourcesStatementContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *TryWithResourcesStatementContext) Catches() ICatchesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICatchesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICatchesContext)
}

func (s *TryWithResourcesStatementContext) Finally_() IFinally_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFinally_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFinally_Context)
}

func (s *TryWithResourcesStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TryWithResourcesStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TryWithResourcesStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterTryWithResourcesStatement(s)
	}
}

func (s *TryWithResourcesStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitTryWithResourcesStatement(s)
	}
}

func (p *Java8Parser) TryWithResourcesStatement() (localctx ITryWithResourcesStatementContext) {
	localctx = NewTryWithResourcesStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 342, Java8ParserRULE_tryWithResourcesStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1813)
		p.Match(Java8ParserTRY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1814)
		p.ResourceSpecification()
	}
	{
		p.SetState(1815)
		p.Block()
	}
	p.SetState(1817)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserCATCH {
		{
			p.SetState(1816)
			p.Catches()
		}

	}
	p.SetState(1820)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserFINALLY {
		{
			p.SetState(1819)
			p.Finally_()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IResourceSpecificationContext is an interface to support dynamic dispatch.
type IResourceSpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LPAREN() antlr.TerminalNode
	ResourceList() IResourceListContext
	RPAREN() antlr.TerminalNode
	SEMI() antlr.TerminalNode

	// IsResourceSpecificationContext differentiates from other interfaces.
	IsResourceSpecificationContext()
}

type ResourceSpecificationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyResourceSpecificationContext() *ResourceSpecificationContext {
	var p = new(ResourceSpecificationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_resourceSpecification
	return p
}

func InitEmptyResourceSpecificationContext(p *ResourceSpecificationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_resourceSpecification
}

func (*ResourceSpecificationContext) IsResourceSpecificationContext() {}

func NewResourceSpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ResourceSpecificationContext {
	var p = new(ResourceSpecificationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_resourceSpecification

	return p
}

func (s *ResourceSpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *ResourceSpecificationContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserLPAREN, 0)
}

func (s *ResourceSpecificationContext) ResourceList() IResourceListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResourceListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResourceListContext)
}

func (s *ResourceSpecificationContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRPAREN, 0)
}

func (s *ResourceSpecificationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(Java8ParserSEMI, 0)
}

func (s *ResourceSpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ResourceSpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ResourceSpecificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterResourceSpecification(s)
	}
}

func (s *ResourceSpecificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitResourceSpecification(s)
	}
}

func (p *Java8Parser) ResourceSpecification() (localctx IResourceSpecificationContext) {
	localctx = NewResourceSpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 344, Java8ParserRULE_resourceSpecification)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1822)
		p.Match(Java8ParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1823)
		p.ResourceList()
	}
	p.SetState(1825)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserSEMI {
		{
			p.SetState(1824)
			p.Match(Java8ParserSEMI)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1827)
		p.Match(Java8ParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IResourceListContext is an interface to support dynamic dispatch.
type IResourceListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllResource() []IResourceContext
	Resource(i int) IResourceContext
	AllSEMI() []antlr.TerminalNode
	SEMI(i int) antlr.TerminalNode

	// IsResourceListContext differentiates from other interfaces.
	IsResourceListContext()
}

type ResourceListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyResourceListContext() *ResourceListContext {
	var p = new(ResourceListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_resourceList
	return p
}

func InitEmptyResourceListContext(p *ResourceListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_resourceList
}

func (*ResourceListContext) IsResourceListContext() {}

func NewResourceListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ResourceListContext {
	var p = new(ResourceListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_resourceList

	return p
}

func (s *ResourceListContext) GetParser() antlr.Parser { return s.parser }

func (s *ResourceListContext) AllResource() []IResourceContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IResourceContext); ok {
			len++
		}
	}

	tst := make([]IResourceContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IResourceContext); ok {
			tst[i] = t.(IResourceContext)
			i++
		}
	}

	return tst
}

func (s *ResourceListContext) Resource(i int) IResourceContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResourceContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResourceContext)
}

func (s *ResourceListContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserSEMI)
}

func (s *ResourceListContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserSEMI, i)
}

func (s *ResourceListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ResourceListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ResourceListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterResourceList(s)
	}
}

func (s *ResourceListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitResourceList(s)
	}
}

func (p *Java8Parser) ResourceList() (localctx IResourceListContext) {
	localctx = NewResourceListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 346, Java8ParserRULE_resourceList)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1829)
		p.Resource()
	}
	p.SetState(1834)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 187, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1830)
				p.Match(Java8ParserSEMI)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1831)
				p.Resource()
			}

		}
		p.SetState(1836)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 187, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IResourceContext is an interface to support dynamic dispatch.
type IResourceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UnannType() IUnannTypeContext
	VariableDeclaratorId() IVariableDeclaratorIdContext
	ASSIGN() antlr.TerminalNode
	Expression() IExpressionContext
	AllVariableModifier() []IVariableModifierContext
	VariableModifier(i int) IVariableModifierContext

	// IsResourceContext differentiates from other interfaces.
	IsResourceContext()
}

type ResourceContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyResourceContext() *ResourceContext {
	var p = new(ResourceContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_resource
	return p
}

func InitEmptyResourceContext(p *ResourceContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_resource
}

func (*ResourceContext) IsResourceContext() {}

func NewResourceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ResourceContext {
	var p = new(ResourceContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_resource

	return p
}

func (s *ResourceContext) GetParser() antlr.Parser { return s.parser }

func (s *ResourceContext) UnannType() IUnannTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnannTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnannTypeContext)
}

func (s *ResourceContext) VariableDeclaratorId() IVariableDeclaratorIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableDeclaratorIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableDeclaratorIdContext)
}

func (s *ResourceContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(Java8ParserASSIGN, 0)
}

func (s *ResourceContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ResourceContext) AllVariableModifier() []IVariableModifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVariableModifierContext); ok {
			len++
		}
	}

	tst := make([]IVariableModifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVariableModifierContext); ok {
			tst[i] = t.(IVariableModifierContext)
			i++
		}
	}

	return tst
}

func (s *ResourceContext) VariableModifier(i int) IVariableModifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableModifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableModifierContext)
}

func (s *ResourceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ResourceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ResourceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterResource(s)
	}
}

func (s *ResourceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitResource(s)
	}
}

func (p *Java8Parser) Resource() (localctx IResourceContext) {
	localctx = NewResourceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 348, Java8ParserRULE_resource)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1840)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Java8ParserFINAL || _la == Java8ParserAT {
		{
			p.SetState(1837)
			p.VariableModifier()
		}

		p.SetState(1842)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1843)
		p.UnannType()
	}
	{
		p.SetState(1844)
		p.VariableDeclaratorId()
	}
	{
		p.SetState(1845)
		p.Match(Java8ParserASSIGN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1846)
		p.Expression()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrimaryContext is an interface to support dynamic dispatch.
type IPrimaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PrimaryNoNewArray_lfno_primary() IPrimaryNoNewArray_lfno_primaryContext
	ArrayCreationExpression() IArrayCreationExpressionContext
	AllPrimaryNoNewArray_lf_primary() []IPrimaryNoNewArray_lf_primaryContext
	PrimaryNoNewArray_lf_primary(i int) IPrimaryNoNewArray_lf_primaryContext

	// IsPrimaryContext differentiates from other interfaces.
	IsPrimaryContext()
}

type PrimaryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryContext() *PrimaryContext {
	var p = new(PrimaryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_primary
	return p
}

func InitEmptyPrimaryContext(p *PrimaryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_primary
}

func (*PrimaryContext) IsPrimaryContext() {}

func NewPrimaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryContext {
	var p = new(PrimaryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_primary

	return p
}

func (s *PrimaryContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryContext) PrimaryNoNewArray_lfno_primary() IPrimaryNoNewArray_lfno_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimaryNoNewArray_lfno_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimaryNoNewArray_lfno_primaryContext)
}

func (s *PrimaryContext) ArrayCreationExpression() IArrayCreationExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayCreationExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayCreationExpressionContext)
}

func (s *PrimaryContext) AllPrimaryNoNewArray_lf_primary() []IPrimaryNoNewArray_lf_primaryContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPrimaryNoNewArray_lf_primaryContext); ok {
			len++
		}
	}

	tst := make([]IPrimaryNoNewArray_lf_primaryContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPrimaryNoNewArray_lf_primaryContext); ok {
			tst[i] = t.(IPrimaryNoNewArray_lf_primaryContext)
			i++
		}
	}

	return tst
}

func (s *PrimaryContext) PrimaryNoNewArray_lf_primary(i int) IPrimaryNoNewArray_lf_primaryContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimaryNoNewArray_lf_primaryContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimaryNoNewArray_lf_primaryContext)
}

func (s *PrimaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterPrimary(s)
	}
}

func (s *PrimaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitPrimary(s)
	}
}

func (p *Java8Parser) Primary() (localctx IPrimaryContext) {
	localctx = NewPrimaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 350, Java8ParserRULE_primary)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1850)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 189, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1848)
			p.PrimaryNoNewArray_lfno_primary()
		}

	case 2:
		{
			p.SetState(1849)
			p.ArrayCreationExpression()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.SetState(1855)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 190, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1852)
				p.PrimaryNoNewArray_lf_primary()
			}

		}
		p.SetState(1857)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 190, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrimaryNoNewArrayContext is an interface to support dynamic dispatch.
type IPrimaryNoNewArrayContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Literal() ILiteralContext
	TypeName() ITypeNameContext
	DOT() antlr.TerminalNode
	CLASS() antlr.TerminalNode
	AllLBRACK() []antlr.TerminalNode
	LBRACK(i int) antlr.TerminalNode
	AllRBRACK() []antlr.TerminalNode
	RBRACK(i int) antlr.TerminalNode
	VOID() antlr.TerminalNode
	THIS() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	Expression() IExpressionContext
	RPAREN() antlr.TerminalNode
	ClassInstanceCreationExpression() IClassInstanceCreationExpressionContext
	FieldAccess() IFieldAccessContext
	ArrayAccess() IArrayAccessContext
	MethodInvocation() IMethodInvocationContext
	MethodReference() IMethodReferenceContext

	// IsPrimaryNoNewArrayContext differentiates from other interfaces.
	IsPrimaryNoNewArrayContext()
}

type PrimaryNoNewArrayContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryNoNewArrayContext() *PrimaryNoNewArrayContext {
	var p = new(PrimaryNoNewArrayContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_primaryNoNewArray
	return p
}

func InitEmptyPrimaryNoNewArrayContext(p *PrimaryNoNewArrayContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_primaryNoNewArray
}

func (*PrimaryNoNewArrayContext) IsPrimaryNoNewArrayContext() {}

func NewPrimaryNoNewArrayContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryNoNewArrayContext {
	var p = new(PrimaryNoNewArrayContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_primaryNoNewArray

	return p
}

func (s *PrimaryNoNewArrayContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryNoNewArrayContext) Literal() ILiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *PrimaryNoNewArrayContext) TypeName() ITypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *PrimaryNoNewArrayContext) DOT() antlr.TerminalNode {
	return s.GetToken(Java8ParserDOT, 0)
}

func (s *PrimaryNoNewArrayContext) CLASS() antlr.TerminalNode {
	return s.GetToken(Java8ParserCLASS, 0)
}

func (s *PrimaryNoNewArrayContext) AllLBRACK() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserLBRACK)
}

func (s *PrimaryNoNewArrayContext) LBRACK(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserLBRACK, i)
}

func (s *PrimaryNoNewArrayContext) AllRBRACK() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserRBRACK)
}

func (s *PrimaryNoNewArrayContext) RBRACK(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserRBRACK, i)
}

func (s *PrimaryNoNewArrayContext) VOID() antlr.TerminalNode {
	return s.GetToken(Java8ParserVOID, 0)
}

func (s *PrimaryNoNewArrayContext) THIS() antlr.TerminalNode {
	return s.GetToken(Java8ParserTHIS, 0)
}

func (s *PrimaryNoNewArrayContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserLPAREN, 0)
}

func (s *PrimaryNoNewArrayContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PrimaryNoNewArrayContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRPAREN, 0)
}

func (s *PrimaryNoNewArrayContext) ClassInstanceCreationExpression() IClassInstanceCreationExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassInstanceCreationExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassInstanceCreationExpressionContext)
}

func (s *PrimaryNoNewArrayContext) FieldAccess() IFieldAccessContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFieldAccessContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFieldAccessContext)
}

func (s *PrimaryNoNewArrayContext) ArrayAccess() IArrayAccessContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayAccessContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayAccessContext)
}

func (s *PrimaryNoNewArrayContext) MethodInvocation() IMethodInvocationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMethodInvocationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMethodInvocationContext)
}

func (s *PrimaryNoNewArrayContext) MethodReference() IMethodReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMethodReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMethodReferenceContext)
}

func (s *PrimaryNoNewArrayContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryNoNewArrayContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimaryNoNewArrayContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterPrimaryNoNewArray(s)
	}
}

func (s *PrimaryNoNewArrayContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitPrimaryNoNewArray(s)
	}
}

func (p *Java8Parser) PrimaryNoNewArray() (localctx IPrimaryNoNewArrayContext) {
	localctx = NewPrimaryNoNewArrayContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 352, Java8ParserRULE_primaryNoNewArray)
	var _la int

	p.SetState(1887)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 192, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1858)
			p.Literal()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1859)
			p.TypeName()
		}
		p.SetState(1864)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == Java8ParserLBRACK {
			{
				p.SetState(1860)
				p.Match(Java8ParserLBRACK)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1861)
				p.Match(Java8ParserRBRACK)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1866)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1867)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1868)
			p.Match(Java8ParserCLASS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1870)
			p.Match(Java8ParserVOID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1871)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1872)
			p.Match(Java8ParserCLASS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1873)
			p.Match(Java8ParserTHIS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1874)
			p.TypeName()
		}
		{
			p.SetState(1875)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1876)
			p.Match(Java8ParserTHIS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1878)
			p.Match(Java8ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1879)
			p.Expression()
		}
		{
			p.SetState(1880)
			p.Match(Java8ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1882)
			p.ClassInstanceCreationExpression()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1883)
			p.FieldAccess()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1884)
			p.ArrayAccess()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1885)
			p.MethodInvocation()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1886)
			p.MethodReference()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrimaryNoNewArray_lf_arrayAccessContext is an interface to support dynamic dispatch.
type IPrimaryNoNewArray_lf_arrayAccessContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsPrimaryNoNewArray_lf_arrayAccessContext differentiates from other interfaces.
	IsPrimaryNoNewArray_lf_arrayAccessContext()
}

type PrimaryNoNewArray_lf_arrayAccessContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryNoNewArray_lf_arrayAccessContext() *PrimaryNoNewArray_lf_arrayAccessContext {
	var p = new(PrimaryNoNewArray_lf_arrayAccessContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_primaryNoNewArray_lf_arrayAccess
	return p
}

func InitEmptyPrimaryNoNewArray_lf_arrayAccessContext(p *PrimaryNoNewArray_lf_arrayAccessContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_primaryNoNewArray_lf_arrayAccess
}

func (*PrimaryNoNewArray_lf_arrayAccessContext) IsPrimaryNoNewArray_lf_arrayAccessContext() {}

func NewPrimaryNoNewArray_lf_arrayAccessContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryNoNewArray_lf_arrayAccessContext {
	var p = new(PrimaryNoNewArray_lf_arrayAccessContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_primaryNoNewArray_lf_arrayAccess

	return p
}

func (s *PrimaryNoNewArray_lf_arrayAccessContext) GetParser() antlr.Parser { return s.parser }
func (s *PrimaryNoNewArray_lf_arrayAccessContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryNoNewArray_lf_arrayAccessContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimaryNoNewArray_lf_arrayAccessContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterPrimaryNoNewArray_lf_arrayAccess(s)
	}
}

func (s *PrimaryNoNewArray_lf_arrayAccessContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitPrimaryNoNewArray_lf_arrayAccess(s)
	}
}

func (p *Java8Parser) PrimaryNoNewArray_lf_arrayAccess() (localctx IPrimaryNoNewArray_lf_arrayAccessContext) {
	localctx = NewPrimaryNoNewArray_lf_arrayAccessContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 354, Java8ParserRULE_primaryNoNewArray_lf_arrayAccess)
	p.EnterOuterAlt(localctx, 1)

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrimaryNoNewArray_lfno_arrayAccessContext is an interface to support dynamic dispatch.
type IPrimaryNoNewArray_lfno_arrayAccessContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Literal() ILiteralContext
	TypeName() ITypeNameContext
	DOT() antlr.TerminalNode
	CLASS() antlr.TerminalNode
	AllLBRACK() []antlr.TerminalNode
	LBRACK(i int) antlr.TerminalNode
	AllRBRACK() []antlr.TerminalNode
	RBRACK(i int) antlr.TerminalNode
	VOID() antlr.TerminalNode
	THIS() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	Expression() IExpressionContext
	RPAREN() antlr.TerminalNode
	ClassInstanceCreationExpression() IClassInstanceCreationExpressionContext
	FieldAccess() IFieldAccessContext
	MethodInvocation() IMethodInvocationContext
	MethodReference() IMethodReferenceContext

	// IsPrimaryNoNewArray_lfno_arrayAccessContext differentiates from other interfaces.
	IsPrimaryNoNewArray_lfno_arrayAccessContext()
}

type PrimaryNoNewArray_lfno_arrayAccessContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryNoNewArray_lfno_arrayAccessContext() *PrimaryNoNewArray_lfno_arrayAccessContext {
	var p = new(PrimaryNoNewArray_lfno_arrayAccessContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_primaryNoNewArray_lfno_arrayAccess
	return p
}

func InitEmptyPrimaryNoNewArray_lfno_arrayAccessContext(p *PrimaryNoNewArray_lfno_arrayAccessContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_primaryNoNewArray_lfno_arrayAccess
}

func (*PrimaryNoNewArray_lfno_arrayAccessContext) IsPrimaryNoNewArray_lfno_arrayAccessContext() {}

func NewPrimaryNoNewArray_lfno_arrayAccessContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryNoNewArray_lfno_arrayAccessContext {
	var p = new(PrimaryNoNewArray_lfno_arrayAccessContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_primaryNoNewArray_lfno_arrayAccess

	return p
}

func (s *PrimaryNoNewArray_lfno_arrayAccessContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryNoNewArray_lfno_arrayAccessContext) Literal() ILiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *PrimaryNoNewArray_lfno_arrayAccessContext) TypeName() ITypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *PrimaryNoNewArray_lfno_arrayAccessContext) DOT() antlr.TerminalNode {
	return s.GetToken(Java8ParserDOT, 0)
}

func (s *PrimaryNoNewArray_lfno_arrayAccessContext) CLASS() antlr.TerminalNode {
	return s.GetToken(Java8ParserCLASS, 0)
}

func (s *PrimaryNoNewArray_lfno_arrayAccessContext) AllLBRACK() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserLBRACK)
}

func (s *PrimaryNoNewArray_lfno_arrayAccessContext) LBRACK(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserLBRACK, i)
}

func (s *PrimaryNoNewArray_lfno_arrayAccessContext) AllRBRACK() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserRBRACK)
}

func (s *PrimaryNoNewArray_lfno_arrayAccessContext) RBRACK(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserRBRACK, i)
}

func (s *PrimaryNoNewArray_lfno_arrayAccessContext) VOID() antlr.TerminalNode {
	return s.GetToken(Java8ParserVOID, 0)
}

func (s *PrimaryNoNewArray_lfno_arrayAccessContext) THIS() antlr.TerminalNode {
	return s.GetToken(Java8ParserTHIS, 0)
}

func (s *PrimaryNoNewArray_lfno_arrayAccessContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserLPAREN, 0)
}

func (s *PrimaryNoNewArray_lfno_arrayAccessContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PrimaryNoNewArray_lfno_arrayAccessContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRPAREN, 0)
}

func (s *PrimaryNoNewArray_lfno_arrayAccessContext) ClassInstanceCreationExpression() IClassInstanceCreationExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassInstanceCreationExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassInstanceCreationExpressionContext)
}

func (s *PrimaryNoNewArray_lfno_arrayAccessContext) FieldAccess() IFieldAccessContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFieldAccessContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFieldAccessContext)
}

func (s *PrimaryNoNewArray_lfno_arrayAccessContext) MethodInvocation() IMethodInvocationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMethodInvocationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMethodInvocationContext)
}

func (s *PrimaryNoNewArray_lfno_arrayAccessContext) MethodReference() IMethodReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMethodReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMethodReferenceContext)
}

func (s *PrimaryNoNewArray_lfno_arrayAccessContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryNoNewArray_lfno_arrayAccessContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimaryNoNewArray_lfno_arrayAccessContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterPrimaryNoNewArray_lfno_arrayAccess(s)
	}
}

func (s *PrimaryNoNewArray_lfno_arrayAccessContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitPrimaryNoNewArray_lfno_arrayAccess(s)
	}
}

func (p *Java8Parser) PrimaryNoNewArray_lfno_arrayAccess() (localctx IPrimaryNoNewArray_lfno_arrayAccessContext) {
	localctx = NewPrimaryNoNewArray_lfno_arrayAccessContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 356, Java8ParserRULE_primaryNoNewArray_lfno_arrayAccess)
	var _la int

	p.SetState(1919)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 194, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1891)
			p.Literal()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1892)
			p.TypeName()
		}
		p.SetState(1897)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == Java8ParserLBRACK {
			{
				p.SetState(1893)
				p.Match(Java8ParserLBRACK)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1894)
				p.Match(Java8ParserRBRACK)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1899)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1900)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1901)
			p.Match(Java8ParserCLASS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1903)
			p.Match(Java8ParserVOID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1904)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1905)
			p.Match(Java8ParserCLASS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1906)
			p.Match(Java8ParserTHIS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1907)
			p.TypeName()
		}
		{
			p.SetState(1908)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1909)
			p.Match(Java8ParserTHIS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1911)
			p.Match(Java8ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1912)
			p.Expression()
		}
		{
			p.SetState(1913)
			p.Match(Java8ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1915)
			p.ClassInstanceCreationExpression()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1916)
			p.FieldAccess()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1917)
			p.MethodInvocation()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1918)
			p.MethodReference()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrimaryNoNewArray_lf_primaryContext is an interface to support dynamic dispatch.
type IPrimaryNoNewArray_lf_primaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ClassInstanceCreationExpression_lf_primary() IClassInstanceCreationExpression_lf_primaryContext
	FieldAccess_lf_primary() IFieldAccess_lf_primaryContext
	ArrayAccess_lf_primary() IArrayAccess_lf_primaryContext
	MethodInvocation_lf_primary() IMethodInvocation_lf_primaryContext
	MethodReference_lf_primary() IMethodReference_lf_primaryContext

	// IsPrimaryNoNewArray_lf_primaryContext differentiates from other interfaces.
	IsPrimaryNoNewArray_lf_primaryContext()
}

type PrimaryNoNewArray_lf_primaryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryNoNewArray_lf_primaryContext() *PrimaryNoNewArray_lf_primaryContext {
	var p = new(PrimaryNoNewArray_lf_primaryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_primaryNoNewArray_lf_primary
	return p
}

func InitEmptyPrimaryNoNewArray_lf_primaryContext(p *PrimaryNoNewArray_lf_primaryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_primaryNoNewArray_lf_primary
}

func (*PrimaryNoNewArray_lf_primaryContext) IsPrimaryNoNewArray_lf_primaryContext() {}

func NewPrimaryNoNewArray_lf_primaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryNoNewArray_lf_primaryContext {
	var p = new(PrimaryNoNewArray_lf_primaryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_primaryNoNewArray_lf_primary

	return p
}

func (s *PrimaryNoNewArray_lf_primaryContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryNoNewArray_lf_primaryContext) ClassInstanceCreationExpression_lf_primary() IClassInstanceCreationExpression_lf_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassInstanceCreationExpression_lf_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassInstanceCreationExpression_lf_primaryContext)
}

func (s *PrimaryNoNewArray_lf_primaryContext) FieldAccess_lf_primary() IFieldAccess_lf_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFieldAccess_lf_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFieldAccess_lf_primaryContext)
}

func (s *PrimaryNoNewArray_lf_primaryContext) ArrayAccess_lf_primary() IArrayAccess_lf_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayAccess_lf_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayAccess_lf_primaryContext)
}

func (s *PrimaryNoNewArray_lf_primaryContext) MethodInvocation_lf_primary() IMethodInvocation_lf_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMethodInvocation_lf_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMethodInvocation_lf_primaryContext)
}

func (s *PrimaryNoNewArray_lf_primaryContext) MethodReference_lf_primary() IMethodReference_lf_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMethodReference_lf_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMethodReference_lf_primaryContext)
}

func (s *PrimaryNoNewArray_lf_primaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryNoNewArray_lf_primaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimaryNoNewArray_lf_primaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterPrimaryNoNewArray_lf_primary(s)
	}
}

func (s *PrimaryNoNewArray_lf_primaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitPrimaryNoNewArray_lf_primary(s)
	}
}

func (p *Java8Parser) PrimaryNoNewArray_lf_primary() (localctx IPrimaryNoNewArray_lf_primaryContext) {
	localctx = NewPrimaryNoNewArray_lf_primaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 358, Java8ParserRULE_primaryNoNewArray_lf_primary)
	p.SetState(1926)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 195, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1921)
			p.ClassInstanceCreationExpression_lf_primary()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1922)
			p.FieldAccess_lf_primary()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1923)
			p.ArrayAccess_lf_primary()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1924)
			p.MethodInvocation_lf_primary()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1925)
			p.MethodReference_lf_primary()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext is an interface to support dynamic dispatch.
type IPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext differentiates from other interfaces.
	IsPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext()
}

type PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext() *PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext {
	var p = new(PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary
	return p
}

func InitEmptyPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext(p *PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary
}

func (*PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext) IsPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext() {
}

func NewPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext {
	var p = new(PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary

	return p
}

func (s *PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext) GetParser() antlr.Parser {
	return s.parser
}
func (s *PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(s)
	}
}

func (s *PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(s)
	}
}

func (p *Java8Parser) PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary() (localctx IPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext) {
	localctx = NewPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 360, Java8ParserRULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary)
	p.EnterOuterAlt(localctx, 1)

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext is an interface to support dynamic dispatch.
type IPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ClassInstanceCreationExpression_lf_primary() IClassInstanceCreationExpression_lf_primaryContext
	FieldAccess_lf_primary() IFieldAccess_lf_primaryContext
	MethodInvocation_lf_primary() IMethodInvocation_lf_primaryContext
	MethodReference_lf_primary() IMethodReference_lf_primaryContext

	// IsPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext differentiates from other interfaces.
	IsPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext()
}

type PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext() *PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext {
	var p = new(PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary
	return p
}

func InitEmptyPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext(p *PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary
}

func (*PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext) IsPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext() {
}

func NewPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext {
	var p = new(PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary

	return p
}

func (s *PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext) GetParser() antlr.Parser {
	return s.parser
}

func (s *PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext) ClassInstanceCreationExpression_lf_primary() IClassInstanceCreationExpression_lf_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassInstanceCreationExpression_lf_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassInstanceCreationExpression_lf_primaryContext)
}

func (s *PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext) FieldAccess_lf_primary() IFieldAccess_lf_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFieldAccess_lf_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFieldAccess_lf_primaryContext)
}

func (s *PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext) MethodInvocation_lf_primary() IMethodInvocation_lf_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMethodInvocation_lf_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMethodInvocation_lf_primaryContext)
}

func (s *PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext) MethodReference_lf_primary() IMethodReference_lf_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMethodReference_lf_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMethodReference_lf_primaryContext)
}

func (s *PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(s)
	}
}

func (s *PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(s)
	}
}

func (p *Java8Parser) PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary() (localctx IPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext) {
	localctx = NewPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 362, Java8ParserRULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary)
	p.SetState(1934)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 196, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1930)
			p.ClassInstanceCreationExpression_lf_primary()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1931)
			p.FieldAccess_lf_primary()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1932)
			p.MethodInvocation_lf_primary()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1933)
			p.MethodReference_lf_primary()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrimaryNoNewArray_lfno_primaryContext is an interface to support dynamic dispatch.
type IPrimaryNoNewArray_lfno_primaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Literal() ILiteralContext
	TypeName() ITypeNameContext
	DOT() antlr.TerminalNode
	CLASS() antlr.TerminalNode
	AllLBRACK() []antlr.TerminalNode
	LBRACK(i int) antlr.TerminalNode
	AllRBRACK() []antlr.TerminalNode
	RBRACK(i int) antlr.TerminalNode
	UnannPrimitiveType() IUnannPrimitiveTypeContext
	VOID() antlr.TerminalNode
	THIS() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	Expression() IExpressionContext
	RPAREN() antlr.TerminalNode
	ClassInstanceCreationExpression_lfno_primary() IClassInstanceCreationExpression_lfno_primaryContext
	FieldAccess_lfno_primary() IFieldAccess_lfno_primaryContext
	ArrayAccess_lfno_primary() IArrayAccess_lfno_primaryContext
	MethodInvocation_lfno_primary() IMethodInvocation_lfno_primaryContext
	MethodReference_lfno_primary() IMethodReference_lfno_primaryContext

	// IsPrimaryNoNewArray_lfno_primaryContext differentiates from other interfaces.
	IsPrimaryNoNewArray_lfno_primaryContext()
}

type PrimaryNoNewArray_lfno_primaryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryNoNewArray_lfno_primaryContext() *PrimaryNoNewArray_lfno_primaryContext {
	var p = new(PrimaryNoNewArray_lfno_primaryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_primaryNoNewArray_lfno_primary
	return p
}

func InitEmptyPrimaryNoNewArray_lfno_primaryContext(p *PrimaryNoNewArray_lfno_primaryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_primaryNoNewArray_lfno_primary
}

func (*PrimaryNoNewArray_lfno_primaryContext) IsPrimaryNoNewArray_lfno_primaryContext() {}

func NewPrimaryNoNewArray_lfno_primaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryNoNewArray_lfno_primaryContext {
	var p = new(PrimaryNoNewArray_lfno_primaryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_primaryNoNewArray_lfno_primary

	return p
}

func (s *PrimaryNoNewArray_lfno_primaryContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryNoNewArray_lfno_primaryContext) Literal() ILiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *PrimaryNoNewArray_lfno_primaryContext) TypeName() ITypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *PrimaryNoNewArray_lfno_primaryContext) DOT() antlr.TerminalNode {
	return s.GetToken(Java8ParserDOT, 0)
}

func (s *PrimaryNoNewArray_lfno_primaryContext) CLASS() antlr.TerminalNode {
	return s.GetToken(Java8ParserCLASS, 0)
}

func (s *PrimaryNoNewArray_lfno_primaryContext) AllLBRACK() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserLBRACK)
}

func (s *PrimaryNoNewArray_lfno_primaryContext) LBRACK(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserLBRACK, i)
}

func (s *PrimaryNoNewArray_lfno_primaryContext) AllRBRACK() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserRBRACK)
}

func (s *PrimaryNoNewArray_lfno_primaryContext) RBRACK(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserRBRACK, i)
}

func (s *PrimaryNoNewArray_lfno_primaryContext) UnannPrimitiveType() IUnannPrimitiveTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnannPrimitiveTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnannPrimitiveTypeContext)
}

func (s *PrimaryNoNewArray_lfno_primaryContext) VOID() antlr.TerminalNode {
	return s.GetToken(Java8ParserVOID, 0)
}

func (s *PrimaryNoNewArray_lfno_primaryContext) THIS() antlr.TerminalNode {
	return s.GetToken(Java8ParserTHIS, 0)
}

func (s *PrimaryNoNewArray_lfno_primaryContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserLPAREN, 0)
}

func (s *PrimaryNoNewArray_lfno_primaryContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PrimaryNoNewArray_lfno_primaryContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRPAREN, 0)
}

func (s *PrimaryNoNewArray_lfno_primaryContext) ClassInstanceCreationExpression_lfno_primary() IClassInstanceCreationExpression_lfno_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassInstanceCreationExpression_lfno_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassInstanceCreationExpression_lfno_primaryContext)
}

func (s *PrimaryNoNewArray_lfno_primaryContext) FieldAccess_lfno_primary() IFieldAccess_lfno_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFieldAccess_lfno_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFieldAccess_lfno_primaryContext)
}

func (s *PrimaryNoNewArray_lfno_primaryContext) ArrayAccess_lfno_primary() IArrayAccess_lfno_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayAccess_lfno_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayAccess_lfno_primaryContext)
}

func (s *PrimaryNoNewArray_lfno_primaryContext) MethodInvocation_lfno_primary() IMethodInvocation_lfno_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMethodInvocation_lfno_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMethodInvocation_lfno_primaryContext)
}

func (s *PrimaryNoNewArray_lfno_primaryContext) MethodReference_lfno_primary() IMethodReference_lfno_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMethodReference_lfno_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMethodReference_lfno_primaryContext)
}

func (s *PrimaryNoNewArray_lfno_primaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryNoNewArray_lfno_primaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimaryNoNewArray_lfno_primaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterPrimaryNoNewArray_lfno_primary(s)
	}
}

func (s *PrimaryNoNewArray_lfno_primaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitPrimaryNoNewArray_lfno_primary(s)
	}
}

func (p *Java8Parser) PrimaryNoNewArray_lfno_primary() (localctx IPrimaryNoNewArray_lfno_primaryContext) {
	localctx = NewPrimaryNoNewArray_lfno_primaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 364, Java8ParserRULE_primaryNoNewArray_lfno_primary)
	var _la int

	p.SetState(1976)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 199, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1936)
			p.Literal()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1937)
			p.TypeName()
		}
		p.SetState(1942)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == Java8ParserLBRACK {
			{
				p.SetState(1938)
				p.Match(Java8ParserLBRACK)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1939)
				p.Match(Java8ParserRBRACK)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1944)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1945)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1946)
			p.Match(Java8ParserCLASS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1948)
			p.UnannPrimitiveType()
		}
		p.SetState(1953)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == Java8ParserLBRACK {
			{
				p.SetState(1949)
				p.Match(Java8ParserLBRACK)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1950)
				p.Match(Java8ParserRBRACK)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1955)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1956)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1957)
			p.Match(Java8ParserCLASS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1959)
			p.Match(Java8ParserVOID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1960)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1961)
			p.Match(Java8ParserCLASS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1962)
			p.Match(Java8ParserTHIS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1963)
			p.TypeName()
		}
		{
			p.SetState(1964)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1965)
			p.Match(Java8ParserTHIS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1967)
			p.Match(Java8ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1968)
			p.Expression()
		}
		{
			p.SetState(1969)
			p.Match(Java8ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1971)
			p.ClassInstanceCreationExpression_lfno_primary()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1972)
			p.FieldAccess_lfno_primary()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1973)
			p.ArrayAccess_lfno_primary()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1974)
			p.MethodInvocation_lfno_primary()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1975)
			p.MethodReference_lfno_primary()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext is an interface to support dynamic dispatch.
type IPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext differentiates from other interfaces.
	IsPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext()
}

type PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext() *PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext {
	var p = new(PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary
	return p
}

func InitEmptyPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext(p *PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary
}

func (*PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext) IsPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext() {
}

func NewPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext {
	var p = new(PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary

	return p
}

func (s *PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext) GetParser() antlr.Parser {
	return s.parser
}
func (s *PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(s)
	}
}

func (s *PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(s)
	}
}

func (p *Java8Parser) PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary() (localctx IPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext) {
	localctx = NewPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 366, Java8ParserRULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary)
	p.EnterOuterAlt(localctx, 1)

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext is an interface to support dynamic dispatch.
type IPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Literal() ILiteralContext
	TypeName() ITypeNameContext
	DOT() antlr.TerminalNode
	CLASS() antlr.TerminalNode
	AllLBRACK() []antlr.TerminalNode
	LBRACK(i int) antlr.TerminalNode
	AllRBRACK() []antlr.TerminalNode
	RBRACK(i int) antlr.TerminalNode
	UnannPrimitiveType() IUnannPrimitiveTypeContext
	VOID() antlr.TerminalNode
	THIS() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	Expression() IExpressionContext
	RPAREN() antlr.TerminalNode
	ClassInstanceCreationExpression_lfno_primary() IClassInstanceCreationExpression_lfno_primaryContext
	FieldAccess_lfno_primary() IFieldAccess_lfno_primaryContext
	MethodInvocation_lfno_primary() IMethodInvocation_lfno_primaryContext
	MethodReference_lfno_primary() IMethodReference_lfno_primaryContext

	// IsPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext differentiates from other interfaces.
	IsPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext()
}

type PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext() *PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext {
	var p = new(PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary
	return p
}

func InitEmptyPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext(p *PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary
}

func (*PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext) IsPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext() {
}

func NewPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext {
	var p = new(PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary

	return p
}

func (s *PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext) GetParser() antlr.Parser {
	return s.parser
}

func (s *PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext) Literal() ILiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext) TypeName() ITypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext) DOT() antlr.TerminalNode {
	return s.GetToken(Java8ParserDOT, 0)
}

func (s *PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext) CLASS() antlr.TerminalNode {
	return s.GetToken(Java8ParserCLASS, 0)
}

func (s *PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext) AllLBRACK() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserLBRACK)
}

func (s *PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext) LBRACK(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserLBRACK, i)
}

func (s *PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext) AllRBRACK() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserRBRACK)
}

func (s *PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext) RBRACK(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserRBRACK, i)
}

func (s *PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext) UnannPrimitiveType() IUnannPrimitiveTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnannPrimitiveTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnannPrimitiveTypeContext)
}

func (s *PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext) VOID() antlr.TerminalNode {
	return s.GetToken(Java8ParserVOID, 0)
}

func (s *PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext) THIS() antlr.TerminalNode {
	return s.GetToken(Java8ParserTHIS, 0)
}

func (s *PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserLPAREN, 0)
}

func (s *PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRPAREN, 0)
}

func (s *PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext) ClassInstanceCreationExpression_lfno_primary() IClassInstanceCreationExpression_lfno_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassInstanceCreationExpression_lfno_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassInstanceCreationExpression_lfno_primaryContext)
}

func (s *PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext) FieldAccess_lfno_primary() IFieldAccess_lfno_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFieldAccess_lfno_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFieldAccess_lfno_primaryContext)
}

func (s *PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext) MethodInvocation_lfno_primary() IMethodInvocation_lfno_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMethodInvocation_lfno_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMethodInvocation_lfno_primaryContext)
}

func (s *PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext) MethodReference_lfno_primary() IMethodReference_lfno_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMethodReference_lfno_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMethodReference_lfno_primaryContext)
}

func (s *PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(s)
	}
}

func (s *PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(s)
	}
}

func (p *Java8Parser) PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary() (localctx IPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext) {
	localctx = NewPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 368, Java8ParserRULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary)
	var _la int

	p.SetState(2019)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 202, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1980)
			p.Literal()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1981)
			p.TypeName()
		}
		p.SetState(1986)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == Java8ParserLBRACK {
			{
				p.SetState(1982)
				p.Match(Java8ParserLBRACK)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1983)
				p.Match(Java8ParserRBRACK)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1988)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1989)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1990)
			p.Match(Java8ParserCLASS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1992)
			p.UnannPrimitiveType()
		}
		p.SetState(1997)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == Java8ParserLBRACK {
			{
				p.SetState(1993)
				p.Match(Java8ParserLBRACK)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1994)
				p.Match(Java8ParserRBRACK)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1999)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2000)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2001)
			p.Match(Java8ParserCLASS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2003)
			p.Match(Java8ParserVOID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2004)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2005)
			p.Match(Java8ParserCLASS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2006)
			p.Match(Java8ParserTHIS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2007)
			p.TypeName()
		}
		{
			p.SetState(2008)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2009)
			p.Match(Java8ParserTHIS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2011)
			p.Match(Java8ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2012)
			p.Expression()
		}
		{
			p.SetState(2013)
			p.Match(Java8ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2015)
			p.ClassInstanceCreationExpression_lfno_primary()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2016)
			p.FieldAccess_lfno_primary()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(2017)
			p.MethodInvocation_lfno_primary()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(2018)
			p.MethodReference_lfno_primary()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IClassInstanceCreationExpressionContext is an interface to support dynamic dispatch.
type IClassInstanceCreationExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NEW() antlr.TerminalNode
	AllIdentifier() []antlr.TerminalNode
	Identifier(i int) antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	TypeArguments() ITypeArgumentsContext
	AllAnnotation() []IAnnotationContext
	Annotation(i int) IAnnotationContext
	AllDOT() []antlr.TerminalNode
	DOT(i int) antlr.TerminalNode
	TypeArgumentsOrDiamond() ITypeArgumentsOrDiamondContext
	ArgumentList() IArgumentListContext
	ClassBody() IClassBodyContext
	ExpressionName() IExpressionNameContext
	Primary() IPrimaryContext

	// IsClassInstanceCreationExpressionContext differentiates from other interfaces.
	IsClassInstanceCreationExpressionContext()
}

type ClassInstanceCreationExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassInstanceCreationExpressionContext() *ClassInstanceCreationExpressionContext {
	var p = new(ClassInstanceCreationExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_classInstanceCreationExpression
	return p
}

func InitEmptyClassInstanceCreationExpressionContext(p *ClassInstanceCreationExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_classInstanceCreationExpression
}

func (*ClassInstanceCreationExpressionContext) IsClassInstanceCreationExpressionContext() {}

func NewClassInstanceCreationExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassInstanceCreationExpressionContext {
	var p = new(ClassInstanceCreationExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_classInstanceCreationExpression

	return p
}

func (s *ClassInstanceCreationExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassInstanceCreationExpressionContext) NEW() antlr.TerminalNode {
	return s.GetToken(Java8ParserNEW, 0)
}

func (s *ClassInstanceCreationExpressionContext) AllIdentifier() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserIdentifier)
}

func (s *ClassInstanceCreationExpressionContext) Identifier(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, i)
}

func (s *ClassInstanceCreationExpressionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserLPAREN, 0)
}

func (s *ClassInstanceCreationExpressionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRPAREN, 0)
}

func (s *ClassInstanceCreationExpressionContext) TypeArguments() ITypeArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeArgumentsContext)
}

func (s *ClassInstanceCreationExpressionContext) AllAnnotation() []IAnnotationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAnnotationContext); ok {
			len++
		}
	}

	tst := make([]IAnnotationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAnnotationContext); ok {
			tst[i] = t.(IAnnotationContext)
			i++
		}
	}

	return tst
}

func (s *ClassInstanceCreationExpressionContext) Annotation(i int) IAnnotationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *ClassInstanceCreationExpressionContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserDOT)
}

func (s *ClassInstanceCreationExpressionContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserDOT, i)
}

func (s *ClassInstanceCreationExpressionContext) TypeArgumentsOrDiamond() ITypeArgumentsOrDiamondContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeArgumentsOrDiamondContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeArgumentsOrDiamondContext)
}

func (s *ClassInstanceCreationExpressionContext) ArgumentList() IArgumentListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArgumentListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArgumentListContext)
}

func (s *ClassInstanceCreationExpressionContext) ClassBody() IClassBodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassBodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassBodyContext)
}

func (s *ClassInstanceCreationExpressionContext) ExpressionName() IExpressionNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionNameContext)
}

func (s *ClassInstanceCreationExpressionContext) Primary() IPrimaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimaryContext)
}

func (s *ClassInstanceCreationExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassInstanceCreationExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassInstanceCreationExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterClassInstanceCreationExpression(s)
	}
}

func (s *ClassInstanceCreationExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitClassInstanceCreationExpression(s)
	}
}

func (p *Java8Parser) ClassInstanceCreationExpression() (localctx IClassInstanceCreationExpressionContext) {
	localctx = NewClassInstanceCreationExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 370, Java8ParserRULE_classInstanceCreationExpression)
	var _la int

	p.SetState(2104)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 220, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2021)
			p.Match(Java8ParserNEW)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2023)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(2022)
				p.TypeArguments()
			}

		}
		p.SetState(2028)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == Java8ParserAT {
			{
				p.SetState(2025)
				p.Annotation()
			}

			p.SetState(2030)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2031)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2042)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == Java8ParserDOT {
			{
				p.SetState(2032)
				p.Match(Java8ParserDOT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(2036)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == Java8ParserAT {
				{
					p.SetState(2033)
					p.Annotation()
				}

				p.SetState(2038)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(2039)
				p.Match(Java8ParserIdentifier)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(2044)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(2046)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(2045)
				p.TypeArgumentsOrDiamond()
			}

		}
		{
			p.SetState(2048)
			p.Match(Java8ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2050)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&286270087177978152) != 0) || ((int64((_la-69)) & ^0x3f) == 0 && ((int64(1)<<(_la-69))&25769819139) != 0) {
			{
				p.SetState(2049)
				p.ArgumentList()
			}

		}
		{
			p.SetState(2052)
			p.Match(Java8ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2054)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLBRACE {
			{
				p.SetState(2053)
				p.ClassBody()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2056)
			p.ExpressionName()
		}
		{
			p.SetState(2057)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2058)
			p.Match(Java8ParserNEW)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2060)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(2059)
				p.TypeArguments()
			}

		}
		p.SetState(2065)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == Java8ParserAT {
			{
				p.SetState(2062)
				p.Annotation()
			}

			p.SetState(2067)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2068)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2070)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(2069)
				p.TypeArgumentsOrDiamond()
			}

		}
		{
			p.SetState(2072)
			p.Match(Java8ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2074)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&286270087177978152) != 0) || ((int64((_la-69)) & ^0x3f) == 0 && ((int64(1)<<(_la-69))&25769819139) != 0) {
			{
				p.SetState(2073)
				p.ArgumentList()
			}

		}
		{
			p.SetState(2076)
			p.Match(Java8ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2078)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLBRACE {
			{
				p.SetState(2077)
				p.ClassBody()
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2080)
			p.Primary()
		}
		{
			p.SetState(2081)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2082)
			p.Match(Java8ParserNEW)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2084)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(2083)
				p.TypeArguments()
			}

		}
		p.SetState(2089)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == Java8ParserAT {
			{
				p.SetState(2086)
				p.Annotation()
			}

			p.SetState(2091)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2092)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2094)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(2093)
				p.TypeArgumentsOrDiamond()
			}

		}
		{
			p.SetState(2096)
			p.Match(Java8ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2098)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&286270087177978152) != 0) || ((int64((_la-69)) & ^0x3f) == 0 && ((int64(1)<<(_la-69))&25769819139) != 0) {
			{
				p.SetState(2097)
				p.ArgumentList()
			}

		}
		{
			p.SetState(2100)
			p.Match(Java8ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2102)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLBRACE {
			{
				p.SetState(2101)
				p.ClassBody()
			}

		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IClassInstanceCreationExpression_lf_primaryContext is an interface to support dynamic dispatch.
type IClassInstanceCreationExpression_lf_primaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DOT() antlr.TerminalNode
	NEW() antlr.TerminalNode
	Identifier() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	TypeArguments() ITypeArgumentsContext
	AllAnnotation() []IAnnotationContext
	Annotation(i int) IAnnotationContext
	TypeArgumentsOrDiamond() ITypeArgumentsOrDiamondContext
	ArgumentList() IArgumentListContext
	ClassBody() IClassBodyContext

	// IsClassInstanceCreationExpression_lf_primaryContext differentiates from other interfaces.
	IsClassInstanceCreationExpression_lf_primaryContext()
}

type ClassInstanceCreationExpression_lf_primaryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassInstanceCreationExpression_lf_primaryContext() *ClassInstanceCreationExpression_lf_primaryContext {
	var p = new(ClassInstanceCreationExpression_lf_primaryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_classInstanceCreationExpression_lf_primary
	return p
}

func InitEmptyClassInstanceCreationExpression_lf_primaryContext(p *ClassInstanceCreationExpression_lf_primaryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_classInstanceCreationExpression_lf_primary
}

func (*ClassInstanceCreationExpression_lf_primaryContext) IsClassInstanceCreationExpression_lf_primaryContext() {
}

func NewClassInstanceCreationExpression_lf_primaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassInstanceCreationExpression_lf_primaryContext {
	var p = new(ClassInstanceCreationExpression_lf_primaryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_classInstanceCreationExpression_lf_primary

	return p
}

func (s *ClassInstanceCreationExpression_lf_primaryContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassInstanceCreationExpression_lf_primaryContext) DOT() antlr.TerminalNode {
	return s.GetToken(Java8ParserDOT, 0)
}

func (s *ClassInstanceCreationExpression_lf_primaryContext) NEW() antlr.TerminalNode {
	return s.GetToken(Java8ParserNEW, 0)
}

func (s *ClassInstanceCreationExpression_lf_primaryContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *ClassInstanceCreationExpression_lf_primaryContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserLPAREN, 0)
}

func (s *ClassInstanceCreationExpression_lf_primaryContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRPAREN, 0)
}

func (s *ClassInstanceCreationExpression_lf_primaryContext) TypeArguments() ITypeArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeArgumentsContext)
}

func (s *ClassInstanceCreationExpression_lf_primaryContext) AllAnnotation() []IAnnotationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAnnotationContext); ok {
			len++
		}
	}

	tst := make([]IAnnotationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAnnotationContext); ok {
			tst[i] = t.(IAnnotationContext)
			i++
		}
	}

	return tst
}

func (s *ClassInstanceCreationExpression_lf_primaryContext) Annotation(i int) IAnnotationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *ClassInstanceCreationExpression_lf_primaryContext) TypeArgumentsOrDiamond() ITypeArgumentsOrDiamondContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeArgumentsOrDiamondContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeArgumentsOrDiamondContext)
}

func (s *ClassInstanceCreationExpression_lf_primaryContext) ArgumentList() IArgumentListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArgumentListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArgumentListContext)
}

func (s *ClassInstanceCreationExpression_lf_primaryContext) ClassBody() IClassBodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassBodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassBodyContext)
}

func (s *ClassInstanceCreationExpression_lf_primaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassInstanceCreationExpression_lf_primaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassInstanceCreationExpression_lf_primaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterClassInstanceCreationExpression_lf_primary(s)
	}
}

func (s *ClassInstanceCreationExpression_lf_primaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitClassInstanceCreationExpression_lf_primary(s)
	}
}

func (p *Java8Parser) ClassInstanceCreationExpression_lf_primary() (localctx IClassInstanceCreationExpression_lf_primaryContext) {
	localctx = NewClassInstanceCreationExpression_lf_primaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 372, Java8ParserRULE_classInstanceCreationExpression_lf_primary)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2106)
		p.Match(Java8ParserDOT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2107)
		p.Match(Java8ParserNEW)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2109)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserLT {
		{
			p.SetState(2108)
			p.TypeArguments()
		}

	}
	p.SetState(2114)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Java8ParserAT {
		{
			p.SetState(2111)
			p.Annotation()
		}

		p.SetState(2116)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2117)
		p.Match(Java8ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2119)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserLT {
		{
			p.SetState(2118)
			p.TypeArgumentsOrDiamond()
		}

	}
	{
		p.SetState(2121)
		p.Match(Java8ParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2123)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&286270087177978152) != 0) || ((int64((_la-69)) & ^0x3f) == 0 && ((int64(1)<<(_la-69))&25769819139) != 0) {
		{
			p.SetState(2122)
			p.ArgumentList()
		}

	}
	{
		p.SetState(2125)
		p.Match(Java8ParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2127)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 225, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2126)
			p.ClassBody()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IClassInstanceCreationExpression_lfno_primaryContext is an interface to support dynamic dispatch.
type IClassInstanceCreationExpression_lfno_primaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NEW() antlr.TerminalNode
	AllIdentifier() []antlr.TerminalNode
	Identifier(i int) antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	TypeArguments() ITypeArgumentsContext
	AllAnnotation() []IAnnotationContext
	Annotation(i int) IAnnotationContext
	AllDOT() []antlr.TerminalNode
	DOT(i int) antlr.TerminalNode
	TypeArgumentsOrDiamond() ITypeArgumentsOrDiamondContext
	ArgumentList() IArgumentListContext
	ClassBody() IClassBodyContext
	ExpressionName() IExpressionNameContext

	// IsClassInstanceCreationExpression_lfno_primaryContext differentiates from other interfaces.
	IsClassInstanceCreationExpression_lfno_primaryContext()
}

type ClassInstanceCreationExpression_lfno_primaryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassInstanceCreationExpression_lfno_primaryContext() *ClassInstanceCreationExpression_lfno_primaryContext {
	var p = new(ClassInstanceCreationExpression_lfno_primaryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_classInstanceCreationExpression_lfno_primary
	return p
}

func InitEmptyClassInstanceCreationExpression_lfno_primaryContext(p *ClassInstanceCreationExpression_lfno_primaryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_classInstanceCreationExpression_lfno_primary
}

func (*ClassInstanceCreationExpression_lfno_primaryContext) IsClassInstanceCreationExpression_lfno_primaryContext() {
}

func NewClassInstanceCreationExpression_lfno_primaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassInstanceCreationExpression_lfno_primaryContext {
	var p = new(ClassInstanceCreationExpression_lfno_primaryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_classInstanceCreationExpression_lfno_primary

	return p
}

func (s *ClassInstanceCreationExpression_lfno_primaryContext) GetParser() antlr.Parser {
	return s.parser
}

func (s *ClassInstanceCreationExpression_lfno_primaryContext) NEW() antlr.TerminalNode {
	return s.GetToken(Java8ParserNEW, 0)
}

func (s *ClassInstanceCreationExpression_lfno_primaryContext) AllIdentifier() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserIdentifier)
}

func (s *ClassInstanceCreationExpression_lfno_primaryContext) Identifier(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, i)
}

func (s *ClassInstanceCreationExpression_lfno_primaryContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserLPAREN, 0)
}

func (s *ClassInstanceCreationExpression_lfno_primaryContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRPAREN, 0)
}

func (s *ClassInstanceCreationExpression_lfno_primaryContext) TypeArguments() ITypeArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeArgumentsContext)
}

func (s *ClassInstanceCreationExpression_lfno_primaryContext) AllAnnotation() []IAnnotationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAnnotationContext); ok {
			len++
		}
	}

	tst := make([]IAnnotationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAnnotationContext); ok {
			tst[i] = t.(IAnnotationContext)
			i++
		}
	}

	return tst
}

func (s *ClassInstanceCreationExpression_lfno_primaryContext) Annotation(i int) IAnnotationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *ClassInstanceCreationExpression_lfno_primaryContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserDOT)
}

func (s *ClassInstanceCreationExpression_lfno_primaryContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserDOT, i)
}

func (s *ClassInstanceCreationExpression_lfno_primaryContext) TypeArgumentsOrDiamond() ITypeArgumentsOrDiamondContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeArgumentsOrDiamondContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeArgumentsOrDiamondContext)
}

func (s *ClassInstanceCreationExpression_lfno_primaryContext) ArgumentList() IArgumentListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArgumentListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArgumentListContext)
}

func (s *ClassInstanceCreationExpression_lfno_primaryContext) ClassBody() IClassBodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassBodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassBodyContext)
}

func (s *ClassInstanceCreationExpression_lfno_primaryContext) ExpressionName() IExpressionNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionNameContext)
}

func (s *ClassInstanceCreationExpression_lfno_primaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassInstanceCreationExpression_lfno_primaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassInstanceCreationExpression_lfno_primaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterClassInstanceCreationExpression_lfno_primary(s)
	}
}

func (s *ClassInstanceCreationExpression_lfno_primaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitClassInstanceCreationExpression_lfno_primary(s)
	}
}

func (p *Java8Parser) ClassInstanceCreationExpression_lfno_primary() (localctx IClassInstanceCreationExpression_lfno_primaryContext) {
	localctx = NewClassInstanceCreationExpression_lfno_primaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 374, Java8ParserRULE_classInstanceCreationExpression_lfno_primary)
	var _la int

	p.SetState(2188)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case Java8ParserNEW:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2129)
			p.Match(Java8ParserNEW)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2131)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(2130)
				p.TypeArguments()
			}

		}
		p.SetState(2136)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == Java8ParserAT {
			{
				p.SetState(2133)
				p.Annotation()
			}

			p.SetState(2138)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2139)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2150)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == Java8ParserDOT {
			{
				p.SetState(2140)
				p.Match(Java8ParserDOT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(2144)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == Java8ParserAT {
				{
					p.SetState(2141)
					p.Annotation()
				}

				p.SetState(2146)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(2147)
				p.Match(Java8ParserIdentifier)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(2152)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(2154)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(2153)
				p.TypeArgumentsOrDiamond()
			}

		}
		{
			p.SetState(2156)
			p.Match(Java8ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2158)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&286270087177978152) != 0) || ((int64((_la-69)) & ^0x3f) == 0 && ((int64(1)<<(_la-69))&25769819139) != 0) {
			{
				p.SetState(2157)
				p.ArgumentList()
			}

		}
		{
			p.SetState(2160)
			p.Match(Java8ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2162)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 232, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2161)
				p.ClassBody()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case Java8ParserIdentifier:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2164)
			p.ExpressionName()
		}
		{
			p.SetState(2165)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2166)
			p.Match(Java8ParserNEW)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2168)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(2167)
				p.TypeArguments()
			}

		}
		p.SetState(2173)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == Java8ParserAT {
			{
				p.SetState(2170)
				p.Annotation()
			}

			p.SetState(2175)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2176)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2178)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(2177)
				p.TypeArgumentsOrDiamond()
			}

		}
		{
			p.SetState(2180)
			p.Match(Java8ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2182)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&286270087177978152) != 0) || ((int64((_la-69)) & ^0x3f) == 0 && ((int64(1)<<(_la-69))&25769819139) != 0) {
			{
				p.SetState(2181)
				p.ArgumentList()
			}

		}
		{
			p.SetState(2184)
			p.Match(Java8ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2186)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 237, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2185)
				p.ClassBody()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeArgumentsOrDiamondContext is an interface to support dynamic dispatch.
type ITypeArgumentsOrDiamondContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TypeArguments() ITypeArgumentsContext
	LT() antlr.TerminalNode
	GT() antlr.TerminalNode

	// IsTypeArgumentsOrDiamondContext differentiates from other interfaces.
	IsTypeArgumentsOrDiamondContext()
}

type TypeArgumentsOrDiamondContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeArgumentsOrDiamondContext() *TypeArgumentsOrDiamondContext {
	var p = new(TypeArgumentsOrDiamondContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_typeArgumentsOrDiamond
	return p
}

func InitEmptyTypeArgumentsOrDiamondContext(p *TypeArgumentsOrDiamondContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_typeArgumentsOrDiamond
}

func (*TypeArgumentsOrDiamondContext) IsTypeArgumentsOrDiamondContext() {}

func NewTypeArgumentsOrDiamondContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeArgumentsOrDiamondContext {
	var p = new(TypeArgumentsOrDiamondContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_typeArgumentsOrDiamond

	return p
}

func (s *TypeArgumentsOrDiamondContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeArgumentsOrDiamondContext) TypeArguments() ITypeArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeArgumentsContext)
}

func (s *TypeArgumentsOrDiamondContext) LT() antlr.TerminalNode {
	return s.GetToken(Java8ParserLT, 0)
}

func (s *TypeArgumentsOrDiamondContext) GT() antlr.TerminalNode {
	return s.GetToken(Java8ParserGT, 0)
}

func (s *TypeArgumentsOrDiamondContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeArgumentsOrDiamondContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeArgumentsOrDiamondContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterTypeArgumentsOrDiamond(s)
	}
}

func (s *TypeArgumentsOrDiamondContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitTypeArgumentsOrDiamond(s)
	}
}

func (p *Java8Parser) TypeArgumentsOrDiamond() (localctx ITypeArgumentsOrDiamondContext) {
	localctx = NewTypeArgumentsOrDiamondContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 376, Java8ParserRULE_typeArgumentsOrDiamond)
	p.SetState(2193)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 239, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2190)
			p.TypeArguments()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2191)
			p.Match(Java8ParserLT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2192)
			p.Match(Java8ParserGT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFieldAccessContext is an interface to support dynamic dispatch.
type IFieldAccessContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Primary() IPrimaryContext
	AllDOT() []antlr.TerminalNode
	DOT(i int) antlr.TerminalNode
	Identifier() antlr.TerminalNode
	SUPER() antlr.TerminalNode
	TypeName() ITypeNameContext

	// IsFieldAccessContext differentiates from other interfaces.
	IsFieldAccessContext()
}

type FieldAccessContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldAccessContext() *FieldAccessContext {
	var p = new(FieldAccessContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_fieldAccess
	return p
}

func InitEmptyFieldAccessContext(p *FieldAccessContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_fieldAccess
}

func (*FieldAccessContext) IsFieldAccessContext() {}

func NewFieldAccessContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldAccessContext {
	var p = new(FieldAccessContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_fieldAccess

	return p
}

func (s *FieldAccessContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldAccessContext) Primary() IPrimaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimaryContext)
}

func (s *FieldAccessContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserDOT)
}

func (s *FieldAccessContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserDOT, i)
}

func (s *FieldAccessContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *FieldAccessContext) SUPER() antlr.TerminalNode {
	return s.GetToken(Java8ParserSUPER, 0)
}

func (s *FieldAccessContext) TypeName() ITypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *FieldAccessContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldAccessContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldAccessContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterFieldAccess(s)
	}
}

func (s *FieldAccessContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitFieldAccess(s)
	}
}

func (p *Java8Parser) FieldAccess() (localctx IFieldAccessContext) {
	localctx = NewFieldAccessContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 378, Java8ParserRULE_fieldAccess)
	p.SetState(2208)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 240, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2195)
			p.Primary()
		}
		{
			p.SetState(2196)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2197)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2199)
			p.Match(Java8ParserSUPER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2200)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2201)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2202)
			p.TypeName()
		}
		{
			p.SetState(2203)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2204)
			p.Match(Java8ParserSUPER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2205)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2206)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFieldAccess_lf_primaryContext is an interface to support dynamic dispatch.
type IFieldAccess_lf_primaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DOT() antlr.TerminalNode
	Identifier() antlr.TerminalNode

	// IsFieldAccess_lf_primaryContext differentiates from other interfaces.
	IsFieldAccess_lf_primaryContext()
}

type FieldAccess_lf_primaryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldAccess_lf_primaryContext() *FieldAccess_lf_primaryContext {
	var p = new(FieldAccess_lf_primaryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_fieldAccess_lf_primary
	return p
}

func InitEmptyFieldAccess_lf_primaryContext(p *FieldAccess_lf_primaryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_fieldAccess_lf_primary
}

func (*FieldAccess_lf_primaryContext) IsFieldAccess_lf_primaryContext() {}

func NewFieldAccess_lf_primaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldAccess_lf_primaryContext {
	var p = new(FieldAccess_lf_primaryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_fieldAccess_lf_primary

	return p
}

func (s *FieldAccess_lf_primaryContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldAccess_lf_primaryContext) DOT() antlr.TerminalNode {
	return s.GetToken(Java8ParserDOT, 0)
}

func (s *FieldAccess_lf_primaryContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *FieldAccess_lf_primaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldAccess_lf_primaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldAccess_lf_primaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterFieldAccess_lf_primary(s)
	}
}

func (s *FieldAccess_lf_primaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitFieldAccess_lf_primary(s)
	}
}

func (p *Java8Parser) FieldAccess_lf_primary() (localctx IFieldAccess_lf_primaryContext) {
	localctx = NewFieldAccess_lf_primaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 380, Java8ParserRULE_fieldAccess_lf_primary)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2210)
		p.Match(Java8ParserDOT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2211)
		p.Match(Java8ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFieldAccess_lfno_primaryContext is an interface to support dynamic dispatch.
type IFieldAccess_lfno_primaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SUPER() antlr.TerminalNode
	AllDOT() []antlr.TerminalNode
	DOT(i int) antlr.TerminalNode
	Identifier() antlr.TerminalNode
	TypeName() ITypeNameContext

	// IsFieldAccess_lfno_primaryContext differentiates from other interfaces.
	IsFieldAccess_lfno_primaryContext()
}

type FieldAccess_lfno_primaryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldAccess_lfno_primaryContext() *FieldAccess_lfno_primaryContext {
	var p = new(FieldAccess_lfno_primaryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_fieldAccess_lfno_primary
	return p
}

func InitEmptyFieldAccess_lfno_primaryContext(p *FieldAccess_lfno_primaryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_fieldAccess_lfno_primary
}

func (*FieldAccess_lfno_primaryContext) IsFieldAccess_lfno_primaryContext() {}

func NewFieldAccess_lfno_primaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldAccess_lfno_primaryContext {
	var p = new(FieldAccess_lfno_primaryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_fieldAccess_lfno_primary

	return p
}

func (s *FieldAccess_lfno_primaryContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldAccess_lfno_primaryContext) SUPER() antlr.TerminalNode {
	return s.GetToken(Java8ParserSUPER, 0)
}

func (s *FieldAccess_lfno_primaryContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserDOT)
}

func (s *FieldAccess_lfno_primaryContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserDOT, i)
}

func (s *FieldAccess_lfno_primaryContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *FieldAccess_lfno_primaryContext) TypeName() ITypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *FieldAccess_lfno_primaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldAccess_lfno_primaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldAccess_lfno_primaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterFieldAccess_lfno_primary(s)
	}
}

func (s *FieldAccess_lfno_primaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitFieldAccess_lfno_primary(s)
	}
}

func (p *Java8Parser) FieldAccess_lfno_primary() (localctx IFieldAccess_lfno_primaryContext) {
	localctx = NewFieldAccess_lfno_primaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 382, Java8ParserRULE_fieldAccess_lfno_primary)
	p.SetState(2222)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case Java8ParserSUPER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2213)
			p.Match(Java8ParserSUPER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2214)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2215)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Java8ParserIdentifier:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2216)
			p.TypeName()
		}
		{
			p.SetState(2217)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2218)
			p.Match(Java8ParserSUPER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2219)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2220)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArrayAccessContext is an interface to support dynamic dispatch.
type IArrayAccessContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ExpressionName() IExpressionNameContext
	AllLBRACK() []antlr.TerminalNode
	LBRACK(i int) antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	AllRBRACK() []antlr.TerminalNode
	RBRACK(i int) antlr.TerminalNode
	PrimaryNoNewArray_lfno_arrayAccess() IPrimaryNoNewArray_lfno_arrayAccessContext
	AllPrimaryNoNewArray_lf_arrayAccess() []IPrimaryNoNewArray_lf_arrayAccessContext
	PrimaryNoNewArray_lf_arrayAccess(i int) IPrimaryNoNewArray_lf_arrayAccessContext

	// IsArrayAccessContext differentiates from other interfaces.
	IsArrayAccessContext()
}

type ArrayAccessContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayAccessContext() *ArrayAccessContext {
	var p = new(ArrayAccessContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_arrayAccess
	return p
}

func InitEmptyArrayAccessContext(p *ArrayAccessContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_arrayAccess
}

func (*ArrayAccessContext) IsArrayAccessContext() {}

func NewArrayAccessContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayAccessContext {
	var p = new(ArrayAccessContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_arrayAccess

	return p
}

func (s *ArrayAccessContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayAccessContext) ExpressionName() IExpressionNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionNameContext)
}

func (s *ArrayAccessContext) AllLBRACK() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserLBRACK)
}

func (s *ArrayAccessContext) LBRACK(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserLBRACK, i)
}

func (s *ArrayAccessContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *ArrayAccessContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ArrayAccessContext) AllRBRACK() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserRBRACK)
}

func (s *ArrayAccessContext) RBRACK(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserRBRACK, i)
}

func (s *ArrayAccessContext) PrimaryNoNewArray_lfno_arrayAccess() IPrimaryNoNewArray_lfno_arrayAccessContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimaryNoNewArray_lfno_arrayAccessContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimaryNoNewArray_lfno_arrayAccessContext)
}

func (s *ArrayAccessContext) AllPrimaryNoNewArray_lf_arrayAccess() []IPrimaryNoNewArray_lf_arrayAccessContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPrimaryNoNewArray_lf_arrayAccessContext); ok {
			len++
		}
	}

	tst := make([]IPrimaryNoNewArray_lf_arrayAccessContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPrimaryNoNewArray_lf_arrayAccessContext); ok {
			tst[i] = t.(IPrimaryNoNewArray_lf_arrayAccessContext)
			i++
		}
	}

	return tst
}

func (s *ArrayAccessContext) PrimaryNoNewArray_lf_arrayAccess(i int) IPrimaryNoNewArray_lf_arrayAccessContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimaryNoNewArray_lf_arrayAccessContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimaryNoNewArray_lf_arrayAccessContext)
}

func (s *ArrayAccessContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayAccessContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayAccessContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterArrayAccess(s)
	}
}

func (s *ArrayAccessContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitArrayAccess(s)
	}
}

func (p *Java8Parser) ArrayAccess() (localctx IArrayAccessContext) {
	localctx = NewArrayAccessContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 384, Java8ParserRULE_arrayAccess)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2234)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 242, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2224)
			p.ExpressionName()
		}
		{
			p.SetState(2225)
			p.Match(Java8ParserLBRACK)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2226)
			p.Expression()
		}
		{
			p.SetState(2227)
			p.Match(Java8ParserRBRACK)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		{
			p.SetState(2229)
			p.PrimaryNoNewArray_lfno_arrayAccess()
		}
		{
			p.SetState(2230)
			p.Match(Java8ParserLBRACK)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2231)
			p.Expression()
		}
		{
			p.SetState(2232)
			p.Match(Java8ParserRBRACK)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.SetState(2243)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Java8ParserLBRACK {
		{
			p.SetState(2236)
			p.PrimaryNoNewArray_lf_arrayAccess()
		}
		{
			p.SetState(2237)
			p.Match(Java8ParserLBRACK)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2238)
			p.Expression()
		}
		{
			p.SetState(2239)
			p.Match(Java8ParserRBRACK)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(2245)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArrayAccess_lf_primaryContext is an interface to support dynamic dispatch.
type IArrayAccess_lf_primaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary() IPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext
	AllLBRACK() []antlr.TerminalNode
	LBRACK(i int) antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	AllRBRACK() []antlr.TerminalNode
	RBRACK(i int) antlr.TerminalNode
	AllPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary() []IPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext
	PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(i int) IPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext

	// IsArrayAccess_lf_primaryContext differentiates from other interfaces.
	IsArrayAccess_lf_primaryContext()
}

type ArrayAccess_lf_primaryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayAccess_lf_primaryContext() *ArrayAccess_lf_primaryContext {
	var p = new(ArrayAccess_lf_primaryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_arrayAccess_lf_primary
	return p
}

func InitEmptyArrayAccess_lf_primaryContext(p *ArrayAccess_lf_primaryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_arrayAccess_lf_primary
}

func (*ArrayAccess_lf_primaryContext) IsArrayAccess_lf_primaryContext() {}

func NewArrayAccess_lf_primaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayAccess_lf_primaryContext {
	var p = new(ArrayAccess_lf_primaryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_arrayAccess_lf_primary

	return p
}

func (s *ArrayAccess_lf_primaryContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayAccess_lf_primaryContext) PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary() IPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext)
}

func (s *ArrayAccess_lf_primaryContext) AllLBRACK() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserLBRACK)
}

func (s *ArrayAccess_lf_primaryContext) LBRACK(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserLBRACK, i)
}

func (s *ArrayAccess_lf_primaryContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *ArrayAccess_lf_primaryContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ArrayAccess_lf_primaryContext) AllRBRACK() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserRBRACK)
}

func (s *ArrayAccess_lf_primaryContext) RBRACK(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserRBRACK, i)
}

func (s *ArrayAccess_lf_primaryContext) AllPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary() []IPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext); ok {
			len++
		}
	}

	tst := make([]IPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext); ok {
			tst[i] = t.(IPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext)
			i++
		}
	}

	return tst
}

func (s *ArrayAccess_lf_primaryContext) PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(i int) IPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext)
}

func (s *ArrayAccess_lf_primaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayAccess_lf_primaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayAccess_lf_primaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterArrayAccess_lf_primary(s)
	}
}

func (s *ArrayAccess_lf_primaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitArrayAccess_lf_primary(s)
	}
}

func (p *Java8Parser) ArrayAccess_lf_primary() (localctx IArrayAccess_lf_primaryContext) {
	localctx = NewArrayAccess_lf_primaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 386, Java8ParserRULE_arrayAccess_lf_primary)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2246)
		p.PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary()
	}
	{
		p.SetState(2247)
		p.Match(Java8ParserLBRACK)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2248)
		p.Expression()
	}
	{
		p.SetState(2249)
		p.Match(Java8ParserRBRACK)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2257)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 244, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2250)
				p.PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary()
			}
			{
				p.SetState(2251)
				p.Match(Java8ParserLBRACK)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(2252)
				p.Expression()
			}
			{
				p.SetState(2253)
				p.Match(Java8ParserRBRACK)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(2259)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 244, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArrayAccess_lfno_primaryContext is an interface to support dynamic dispatch.
type IArrayAccess_lfno_primaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ExpressionName() IExpressionNameContext
	AllLBRACK() []antlr.TerminalNode
	LBRACK(i int) antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	AllRBRACK() []antlr.TerminalNode
	RBRACK(i int) antlr.TerminalNode
	PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary() IPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext
	AllPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary() []IPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext
	PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(i int) IPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext

	// IsArrayAccess_lfno_primaryContext differentiates from other interfaces.
	IsArrayAccess_lfno_primaryContext()
}

type ArrayAccess_lfno_primaryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayAccess_lfno_primaryContext() *ArrayAccess_lfno_primaryContext {
	var p = new(ArrayAccess_lfno_primaryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_arrayAccess_lfno_primary
	return p
}

func InitEmptyArrayAccess_lfno_primaryContext(p *ArrayAccess_lfno_primaryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_arrayAccess_lfno_primary
}

func (*ArrayAccess_lfno_primaryContext) IsArrayAccess_lfno_primaryContext() {}

func NewArrayAccess_lfno_primaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayAccess_lfno_primaryContext {
	var p = new(ArrayAccess_lfno_primaryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_arrayAccess_lfno_primary

	return p
}

func (s *ArrayAccess_lfno_primaryContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayAccess_lfno_primaryContext) ExpressionName() IExpressionNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionNameContext)
}

func (s *ArrayAccess_lfno_primaryContext) AllLBRACK() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserLBRACK)
}

func (s *ArrayAccess_lfno_primaryContext) LBRACK(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserLBRACK, i)
}

func (s *ArrayAccess_lfno_primaryContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *ArrayAccess_lfno_primaryContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ArrayAccess_lfno_primaryContext) AllRBRACK() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserRBRACK)
}

func (s *ArrayAccess_lfno_primaryContext) RBRACK(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserRBRACK, i)
}

func (s *ArrayAccess_lfno_primaryContext) PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary() IPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext)
}

func (s *ArrayAccess_lfno_primaryContext) AllPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary() []IPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext); ok {
			len++
		}
	}

	tst := make([]IPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext); ok {
			tst[i] = t.(IPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext)
			i++
		}
	}

	return tst
}

func (s *ArrayAccess_lfno_primaryContext) PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(i int) IPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext)
}

func (s *ArrayAccess_lfno_primaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayAccess_lfno_primaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayAccess_lfno_primaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterArrayAccess_lfno_primary(s)
	}
}

func (s *ArrayAccess_lfno_primaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitArrayAccess_lfno_primary(s)
	}
}

func (p *Java8Parser) ArrayAccess_lfno_primary() (localctx IArrayAccess_lfno_primaryContext) {
	localctx = NewArrayAccess_lfno_primaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 388, Java8ParserRULE_arrayAccess_lfno_primary)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2270)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 245, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2260)
			p.ExpressionName()
		}
		{
			p.SetState(2261)
			p.Match(Java8ParserLBRACK)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2262)
			p.Expression()
		}
		{
			p.SetState(2263)
			p.Match(Java8ParserRBRACK)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		{
			p.SetState(2265)
			p.PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary()
		}
		{
			p.SetState(2266)
			p.Match(Java8ParserLBRACK)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2267)
			p.Expression()
		}
		{
			p.SetState(2268)
			p.Match(Java8ParserRBRACK)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.SetState(2279)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 246, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2272)
				p.PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary()
			}
			{
				p.SetState(2273)
				p.Match(Java8ParserLBRACK)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(2274)
				p.Expression()
			}
			{
				p.SetState(2275)
				p.Match(Java8ParserRBRACK)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(2281)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 246, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMethodInvocationContext is an interface to support dynamic dispatch.
type IMethodInvocationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MethodName() IMethodNameContext
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	ArgumentList() IArgumentListContext
	TypeName() ITypeNameContext
	AllDOT() []antlr.TerminalNode
	DOT(i int) antlr.TerminalNode
	Identifier() antlr.TerminalNode
	TypeArguments() ITypeArgumentsContext
	ExpressionName() IExpressionNameContext
	Primary() IPrimaryContext
	SUPER() antlr.TerminalNode

	// IsMethodInvocationContext differentiates from other interfaces.
	IsMethodInvocationContext()
}

type MethodInvocationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMethodInvocationContext() *MethodInvocationContext {
	var p = new(MethodInvocationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_methodInvocation
	return p
}

func InitEmptyMethodInvocationContext(p *MethodInvocationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_methodInvocation
}

func (*MethodInvocationContext) IsMethodInvocationContext() {}

func NewMethodInvocationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MethodInvocationContext {
	var p = new(MethodInvocationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_methodInvocation

	return p
}

func (s *MethodInvocationContext) GetParser() antlr.Parser { return s.parser }

func (s *MethodInvocationContext) MethodName() IMethodNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMethodNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMethodNameContext)
}

func (s *MethodInvocationContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserLPAREN, 0)
}

func (s *MethodInvocationContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRPAREN, 0)
}

func (s *MethodInvocationContext) ArgumentList() IArgumentListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArgumentListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArgumentListContext)
}

func (s *MethodInvocationContext) TypeName() ITypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *MethodInvocationContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserDOT)
}

func (s *MethodInvocationContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserDOT, i)
}

func (s *MethodInvocationContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *MethodInvocationContext) TypeArguments() ITypeArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeArgumentsContext)
}

func (s *MethodInvocationContext) ExpressionName() IExpressionNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionNameContext)
}

func (s *MethodInvocationContext) Primary() IPrimaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimaryContext)
}

func (s *MethodInvocationContext) SUPER() antlr.TerminalNode {
	return s.GetToken(Java8ParserSUPER, 0)
}

func (s *MethodInvocationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MethodInvocationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MethodInvocationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterMethodInvocation(s)
	}
}

func (s *MethodInvocationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitMethodInvocation(s)
	}
}

func (p *Java8Parser) MethodInvocation() (localctx IMethodInvocationContext) {
	localctx = NewMethodInvocationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 390, Java8ParserRULE_methodInvocation)
	var _la int

	p.SetState(2350)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 258, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2282)
			p.MethodName()
		}
		{
			p.SetState(2283)
			p.Match(Java8ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2285)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&286270087177978152) != 0) || ((int64((_la-69)) & ^0x3f) == 0 && ((int64(1)<<(_la-69))&25769819139) != 0) {
			{
				p.SetState(2284)
				p.ArgumentList()
			}

		}
		{
			p.SetState(2287)
			p.Match(Java8ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2289)
			p.TypeName()
		}
		{
			p.SetState(2290)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2292)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(2291)
				p.TypeArguments()
			}

		}
		{
			p.SetState(2294)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2295)
			p.Match(Java8ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2297)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&286270087177978152) != 0) || ((int64((_la-69)) & ^0x3f) == 0 && ((int64(1)<<(_la-69))&25769819139) != 0) {
			{
				p.SetState(2296)
				p.ArgumentList()
			}

		}
		{
			p.SetState(2299)
			p.Match(Java8ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2301)
			p.ExpressionName()
		}
		{
			p.SetState(2302)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2304)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(2303)
				p.TypeArguments()
			}

		}
		{
			p.SetState(2306)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2307)
			p.Match(Java8ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2309)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&286270087177978152) != 0) || ((int64((_la-69)) & ^0x3f) == 0 && ((int64(1)<<(_la-69))&25769819139) != 0) {
			{
				p.SetState(2308)
				p.ArgumentList()
			}

		}
		{
			p.SetState(2311)
			p.Match(Java8ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2313)
			p.Primary()
		}
		{
			p.SetState(2314)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2316)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(2315)
				p.TypeArguments()
			}

		}
		{
			p.SetState(2318)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2319)
			p.Match(Java8ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2321)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&286270087177978152) != 0) || ((int64((_la-69)) & ^0x3f) == 0 && ((int64(1)<<(_la-69))&25769819139) != 0) {
			{
				p.SetState(2320)
				p.ArgumentList()
			}

		}
		{
			p.SetState(2323)
			p.Match(Java8ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2325)
			p.Match(Java8ParserSUPER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2326)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2328)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(2327)
				p.TypeArguments()
			}

		}
		{
			p.SetState(2330)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2331)
			p.Match(Java8ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2333)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&286270087177978152) != 0) || ((int64((_la-69)) & ^0x3f) == 0 && ((int64(1)<<(_la-69))&25769819139) != 0) {
			{
				p.SetState(2332)
				p.ArgumentList()
			}

		}
		{
			p.SetState(2335)
			p.Match(Java8ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2336)
			p.TypeName()
		}
		{
			p.SetState(2337)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2338)
			p.Match(Java8ParserSUPER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2339)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2341)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(2340)
				p.TypeArguments()
			}

		}
		{
			p.SetState(2343)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2344)
			p.Match(Java8ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2346)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&286270087177978152) != 0) || ((int64((_la-69)) & ^0x3f) == 0 && ((int64(1)<<(_la-69))&25769819139) != 0) {
			{
				p.SetState(2345)
				p.ArgumentList()
			}

		}
		{
			p.SetState(2348)
			p.Match(Java8ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMethodInvocation_lf_primaryContext is an interface to support dynamic dispatch.
type IMethodInvocation_lf_primaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DOT() antlr.TerminalNode
	Identifier() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	TypeArguments() ITypeArgumentsContext
	ArgumentList() IArgumentListContext

	// IsMethodInvocation_lf_primaryContext differentiates from other interfaces.
	IsMethodInvocation_lf_primaryContext()
}

type MethodInvocation_lf_primaryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMethodInvocation_lf_primaryContext() *MethodInvocation_lf_primaryContext {
	var p = new(MethodInvocation_lf_primaryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_methodInvocation_lf_primary
	return p
}

func InitEmptyMethodInvocation_lf_primaryContext(p *MethodInvocation_lf_primaryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_methodInvocation_lf_primary
}

func (*MethodInvocation_lf_primaryContext) IsMethodInvocation_lf_primaryContext() {}

func NewMethodInvocation_lf_primaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MethodInvocation_lf_primaryContext {
	var p = new(MethodInvocation_lf_primaryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_methodInvocation_lf_primary

	return p
}

func (s *MethodInvocation_lf_primaryContext) GetParser() antlr.Parser { return s.parser }

func (s *MethodInvocation_lf_primaryContext) DOT() antlr.TerminalNode {
	return s.GetToken(Java8ParserDOT, 0)
}

func (s *MethodInvocation_lf_primaryContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *MethodInvocation_lf_primaryContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserLPAREN, 0)
}

func (s *MethodInvocation_lf_primaryContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRPAREN, 0)
}

func (s *MethodInvocation_lf_primaryContext) TypeArguments() ITypeArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeArgumentsContext)
}

func (s *MethodInvocation_lf_primaryContext) ArgumentList() IArgumentListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArgumentListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArgumentListContext)
}

func (s *MethodInvocation_lf_primaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MethodInvocation_lf_primaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MethodInvocation_lf_primaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterMethodInvocation_lf_primary(s)
	}
}

func (s *MethodInvocation_lf_primaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitMethodInvocation_lf_primary(s)
	}
}

func (p *Java8Parser) MethodInvocation_lf_primary() (localctx IMethodInvocation_lf_primaryContext) {
	localctx = NewMethodInvocation_lf_primaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 392, Java8ParserRULE_methodInvocation_lf_primary)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2352)
		p.Match(Java8ParserDOT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2354)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserLT {
		{
			p.SetState(2353)
			p.TypeArguments()
		}

	}
	{
		p.SetState(2356)
		p.Match(Java8ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2357)
		p.Match(Java8ParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2359)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&286270087177978152) != 0) || ((int64((_la-69)) & ^0x3f) == 0 && ((int64(1)<<(_la-69))&25769819139) != 0) {
		{
			p.SetState(2358)
			p.ArgumentList()
		}

	}
	{
		p.SetState(2361)
		p.Match(Java8ParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMethodInvocation_lfno_primaryContext is an interface to support dynamic dispatch.
type IMethodInvocation_lfno_primaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MethodName() IMethodNameContext
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	ArgumentList() IArgumentListContext
	TypeName() ITypeNameContext
	AllDOT() []antlr.TerminalNode
	DOT(i int) antlr.TerminalNode
	Identifier() antlr.TerminalNode
	TypeArguments() ITypeArgumentsContext
	ExpressionName() IExpressionNameContext
	SUPER() antlr.TerminalNode

	// IsMethodInvocation_lfno_primaryContext differentiates from other interfaces.
	IsMethodInvocation_lfno_primaryContext()
}

type MethodInvocation_lfno_primaryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMethodInvocation_lfno_primaryContext() *MethodInvocation_lfno_primaryContext {
	var p = new(MethodInvocation_lfno_primaryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_methodInvocation_lfno_primary
	return p
}

func InitEmptyMethodInvocation_lfno_primaryContext(p *MethodInvocation_lfno_primaryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_methodInvocation_lfno_primary
}

func (*MethodInvocation_lfno_primaryContext) IsMethodInvocation_lfno_primaryContext() {}

func NewMethodInvocation_lfno_primaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MethodInvocation_lfno_primaryContext {
	var p = new(MethodInvocation_lfno_primaryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_methodInvocation_lfno_primary

	return p
}

func (s *MethodInvocation_lfno_primaryContext) GetParser() antlr.Parser { return s.parser }

func (s *MethodInvocation_lfno_primaryContext) MethodName() IMethodNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMethodNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMethodNameContext)
}

func (s *MethodInvocation_lfno_primaryContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserLPAREN, 0)
}

func (s *MethodInvocation_lfno_primaryContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRPAREN, 0)
}

func (s *MethodInvocation_lfno_primaryContext) ArgumentList() IArgumentListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArgumentListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArgumentListContext)
}

func (s *MethodInvocation_lfno_primaryContext) TypeName() ITypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *MethodInvocation_lfno_primaryContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserDOT)
}

func (s *MethodInvocation_lfno_primaryContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserDOT, i)
}

func (s *MethodInvocation_lfno_primaryContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *MethodInvocation_lfno_primaryContext) TypeArguments() ITypeArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeArgumentsContext)
}

func (s *MethodInvocation_lfno_primaryContext) ExpressionName() IExpressionNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionNameContext)
}

func (s *MethodInvocation_lfno_primaryContext) SUPER() antlr.TerminalNode {
	return s.GetToken(Java8ParserSUPER, 0)
}

func (s *MethodInvocation_lfno_primaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MethodInvocation_lfno_primaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MethodInvocation_lfno_primaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterMethodInvocation_lfno_primary(s)
	}
}

func (s *MethodInvocation_lfno_primaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitMethodInvocation_lfno_primary(s)
	}
}

func (p *Java8Parser) MethodInvocation_lfno_primary() (localctx IMethodInvocation_lfno_primaryContext) {
	localctx = NewMethodInvocation_lfno_primaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 394, Java8ParserRULE_methodInvocation_lfno_primary)
	var _la int

	p.SetState(2419)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 270, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2363)
			p.MethodName()
		}
		{
			p.SetState(2364)
			p.Match(Java8ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2366)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&286270087177978152) != 0) || ((int64((_la-69)) & ^0x3f) == 0 && ((int64(1)<<(_la-69))&25769819139) != 0) {
			{
				p.SetState(2365)
				p.ArgumentList()
			}

		}
		{
			p.SetState(2368)
			p.Match(Java8ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2370)
			p.TypeName()
		}
		{
			p.SetState(2371)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2373)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(2372)
				p.TypeArguments()
			}

		}
		{
			p.SetState(2375)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2376)
			p.Match(Java8ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2378)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&286270087177978152) != 0) || ((int64((_la-69)) & ^0x3f) == 0 && ((int64(1)<<(_la-69))&25769819139) != 0) {
			{
				p.SetState(2377)
				p.ArgumentList()
			}

		}
		{
			p.SetState(2380)
			p.Match(Java8ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2382)
			p.ExpressionName()
		}
		{
			p.SetState(2383)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2385)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(2384)
				p.TypeArguments()
			}

		}
		{
			p.SetState(2387)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2388)
			p.Match(Java8ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2390)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&286270087177978152) != 0) || ((int64((_la-69)) & ^0x3f) == 0 && ((int64(1)<<(_la-69))&25769819139) != 0) {
			{
				p.SetState(2389)
				p.ArgumentList()
			}

		}
		{
			p.SetState(2392)
			p.Match(Java8ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2394)
			p.Match(Java8ParserSUPER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2395)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2397)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(2396)
				p.TypeArguments()
			}

		}
		{
			p.SetState(2399)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2400)
			p.Match(Java8ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2402)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&286270087177978152) != 0) || ((int64((_la-69)) & ^0x3f) == 0 && ((int64(1)<<(_la-69))&25769819139) != 0) {
			{
				p.SetState(2401)
				p.ArgumentList()
			}

		}
		{
			p.SetState(2404)
			p.Match(Java8ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2405)
			p.TypeName()
		}
		{
			p.SetState(2406)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2407)
			p.Match(Java8ParserSUPER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2408)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2410)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(2409)
				p.TypeArguments()
			}

		}
		{
			p.SetState(2412)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2413)
			p.Match(Java8ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2415)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&286270087177978152) != 0) || ((int64((_la-69)) & ^0x3f) == 0 && ((int64(1)<<(_la-69))&25769819139) != 0) {
			{
				p.SetState(2414)
				p.ArgumentList()
			}

		}
		{
			p.SetState(2417)
			p.Match(Java8ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArgumentListContext is an interface to support dynamic dispatch.
type IArgumentListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsArgumentListContext differentiates from other interfaces.
	IsArgumentListContext()
}

type ArgumentListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArgumentListContext() *ArgumentListContext {
	var p = new(ArgumentListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_argumentList
	return p
}

func InitEmptyArgumentListContext(p *ArgumentListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_argumentList
}

func (*ArgumentListContext) IsArgumentListContext() {}

func NewArgumentListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArgumentListContext {
	var p = new(ArgumentListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_argumentList

	return p
}

func (s *ArgumentListContext) GetParser() antlr.Parser { return s.parser }

func (s *ArgumentListContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *ArgumentListContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ArgumentListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserCOMMA)
}

func (s *ArgumentListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserCOMMA, i)
}

func (s *ArgumentListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArgumentListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArgumentListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterArgumentList(s)
	}
}

func (s *ArgumentListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitArgumentList(s)
	}
}

func (p *Java8Parser) ArgumentList() (localctx IArgumentListContext) {
	localctx = NewArgumentListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 396, Java8ParserRULE_argumentList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2421)
		p.Expression()
	}
	p.SetState(2426)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Java8ParserCOMMA {
		{
			p.SetState(2422)
			p.Match(Java8ParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2423)
			p.Expression()
		}

		p.SetState(2428)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMethodReferenceContext is an interface to support dynamic dispatch.
type IMethodReferenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ExpressionName() IExpressionNameContext
	COLONCOLON() antlr.TerminalNode
	Identifier() antlr.TerminalNode
	TypeArguments() ITypeArgumentsContext
	ReferenceType() IReferenceTypeContext
	Primary() IPrimaryContext
	SUPER() antlr.TerminalNode
	TypeName() ITypeNameContext
	DOT() antlr.TerminalNode
	ClassType() IClassTypeContext
	NEW() antlr.TerminalNode
	ArrayType() IArrayTypeContext

	// IsMethodReferenceContext differentiates from other interfaces.
	IsMethodReferenceContext()
}

type MethodReferenceContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMethodReferenceContext() *MethodReferenceContext {
	var p = new(MethodReferenceContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_methodReference
	return p
}

func InitEmptyMethodReferenceContext(p *MethodReferenceContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_methodReference
}

func (*MethodReferenceContext) IsMethodReferenceContext() {}

func NewMethodReferenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MethodReferenceContext {
	var p = new(MethodReferenceContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_methodReference

	return p
}

func (s *MethodReferenceContext) GetParser() antlr.Parser { return s.parser }

func (s *MethodReferenceContext) ExpressionName() IExpressionNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionNameContext)
}

func (s *MethodReferenceContext) COLONCOLON() antlr.TerminalNode {
	return s.GetToken(Java8ParserCOLONCOLON, 0)
}

func (s *MethodReferenceContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *MethodReferenceContext) TypeArguments() ITypeArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeArgumentsContext)
}

func (s *MethodReferenceContext) ReferenceType() IReferenceTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReferenceTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReferenceTypeContext)
}

func (s *MethodReferenceContext) Primary() IPrimaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimaryContext)
}

func (s *MethodReferenceContext) SUPER() antlr.TerminalNode {
	return s.GetToken(Java8ParserSUPER, 0)
}

func (s *MethodReferenceContext) TypeName() ITypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *MethodReferenceContext) DOT() antlr.TerminalNode {
	return s.GetToken(Java8ParserDOT, 0)
}

func (s *MethodReferenceContext) ClassType() IClassTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassTypeContext)
}

func (s *MethodReferenceContext) NEW() antlr.TerminalNode {
	return s.GetToken(Java8ParserNEW, 0)
}

func (s *MethodReferenceContext) ArrayType() IArrayTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayTypeContext)
}

func (s *MethodReferenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MethodReferenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MethodReferenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterMethodReference(s)
	}
}

func (s *MethodReferenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitMethodReference(s)
	}
}

func (p *Java8Parser) MethodReference() (localctx IMethodReferenceContext) {
	localctx = NewMethodReferenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 398, Java8ParserRULE_methodReference)
	var _la int

	p.SetState(2476)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 278, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2429)
			p.ExpressionName()
		}
		{
			p.SetState(2430)
			p.Match(Java8ParserCOLONCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2432)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(2431)
				p.TypeArguments()
			}

		}
		{
			p.SetState(2434)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2436)
			p.ReferenceType()
		}
		{
			p.SetState(2437)
			p.Match(Java8ParserCOLONCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2439)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(2438)
				p.TypeArguments()
			}

		}
		{
			p.SetState(2441)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2443)
			p.Primary()
		}
		{
			p.SetState(2444)
			p.Match(Java8ParserCOLONCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2446)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(2445)
				p.TypeArguments()
			}

		}
		{
			p.SetState(2448)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2450)
			p.Match(Java8ParserSUPER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2451)
			p.Match(Java8ParserCOLONCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2453)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(2452)
				p.TypeArguments()
			}

		}
		{
			p.SetState(2455)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2456)
			p.TypeName()
		}
		{
			p.SetState(2457)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2458)
			p.Match(Java8ParserSUPER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2459)
			p.Match(Java8ParserCOLONCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2461)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(2460)
				p.TypeArguments()
			}

		}
		{
			p.SetState(2463)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2465)
			p.ClassType()
		}
		{
			p.SetState(2466)
			p.Match(Java8ParserCOLONCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2468)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(2467)
				p.TypeArguments()
			}

		}
		{
			p.SetState(2470)
			p.Match(Java8ParserNEW)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2472)
			p.ArrayType()
		}
		{
			p.SetState(2473)
			p.Match(Java8ParserCOLONCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2474)
			p.Match(Java8ParserNEW)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMethodReference_lf_primaryContext is an interface to support dynamic dispatch.
type IMethodReference_lf_primaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	COLONCOLON() antlr.TerminalNode
	Identifier() antlr.TerminalNode
	TypeArguments() ITypeArgumentsContext

	// IsMethodReference_lf_primaryContext differentiates from other interfaces.
	IsMethodReference_lf_primaryContext()
}

type MethodReference_lf_primaryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMethodReference_lf_primaryContext() *MethodReference_lf_primaryContext {
	var p = new(MethodReference_lf_primaryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_methodReference_lf_primary
	return p
}

func InitEmptyMethodReference_lf_primaryContext(p *MethodReference_lf_primaryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_methodReference_lf_primary
}

func (*MethodReference_lf_primaryContext) IsMethodReference_lf_primaryContext() {}

func NewMethodReference_lf_primaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MethodReference_lf_primaryContext {
	var p = new(MethodReference_lf_primaryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_methodReference_lf_primary

	return p
}

func (s *MethodReference_lf_primaryContext) GetParser() antlr.Parser { return s.parser }

func (s *MethodReference_lf_primaryContext) COLONCOLON() antlr.TerminalNode {
	return s.GetToken(Java8ParserCOLONCOLON, 0)
}

func (s *MethodReference_lf_primaryContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *MethodReference_lf_primaryContext) TypeArguments() ITypeArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeArgumentsContext)
}

func (s *MethodReference_lf_primaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MethodReference_lf_primaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MethodReference_lf_primaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterMethodReference_lf_primary(s)
	}
}

func (s *MethodReference_lf_primaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitMethodReference_lf_primary(s)
	}
}

func (p *Java8Parser) MethodReference_lf_primary() (localctx IMethodReference_lf_primaryContext) {
	localctx = NewMethodReference_lf_primaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 400, Java8ParserRULE_methodReference_lf_primary)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2478)
		p.Match(Java8ParserCOLONCOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2480)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Java8ParserLT {
		{
			p.SetState(2479)
			p.TypeArguments()
		}

	}
	{
		p.SetState(2482)
		p.Match(Java8ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMethodReference_lfno_primaryContext is an interface to support dynamic dispatch.
type IMethodReference_lfno_primaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ExpressionName() IExpressionNameContext
	COLONCOLON() antlr.TerminalNode
	Identifier() antlr.TerminalNode
	TypeArguments() ITypeArgumentsContext
	ReferenceType() IReferenceTypeContext
	SUPER() antlr.TerminalNode
	TypeName() ITypeNameContext
	DOT() antlr.TerminalNode
	ClassType() IClassTypeContext
	NEW() antlr.TerminalNode
	ArrayType() IArrayTypeContext

	// IsMethodReference_lfno_primaryContext differentiates from other interfaces.
	IsMethodReference_lfno_primaryContext()
}

type MethodReference_lfno_primaryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMethodReference_lfno_primaryContext() *MethodReference_lfno_primaryContext {
	var p = new(MethodReference_lfno_primaryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_methodReference_lfno_primary
	return p
}

func InitEmptyMethodReference_lfno_primaryContext(p *MethodReference_lfno_primaryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_methodReference_lfno_primary
}

func (*MethodReference_lfno_primaryContext) IsMethodReference_lfno_primaryContext() {}

func NewMethodReference_lfno_primaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MethodReference_lfno_primaryContext {
	var p = new(MethodReference_lfno_primaryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_methodReference_lfno_primary

	return p
}

func (s *MethodReference_lfno_primaryContext) GetParser() antlr.Parser { return s.parser }

func (s *MethodReference_lfno_primaryContext) ExpressionName() IExpressionNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionNameContext)
}

func (s *MethodReference_lfno_primaryContext) COLONCOLON() antlr.TerminalNode {
	return s.GetToken(Java8ParserCOLONCOLON, 0)
}

func (s *MethodReference_lfno_primaryContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *MethodReference_lfno_primaryContext) TypeArguments() ITypeArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeArgumentsContext)
}

func (s *MethodReference_lfno_primaryContext) ReferenceType() IReferenceTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReferenceTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReferenceTypeContext)
}

func (s *MethodReference_lfno_primaryContext) SUPER() antlr.TerminalNode {
	return s.GetToken(Java8ParserSUPER, 0)
}

func (s *MethodReference_lfno_primaryContext) TypeName() ITypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *MethodReference_lfno_primaryContext) DOT() antlr.TerminalNode {
	return s.GetToken(Java8ParserDOT, 0)
}

func (s *MethodReference_lfno_primaryContext) ClassType() IClassTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassTypeContext)
}

func (s *MethodReference_lfno_primaryContext) NEW() antlr.TerminalNode {
	return s.GetToken(Java8ParserNEW, 0)
}

func (s *MethodReference_lfno_primaryContext) ArrayType() IArrayTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayTypeContext)
}

func (s *MethodReference_lfno_primaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MethodReference_lfno_primaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MethodReference_lfno_primaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterMethodReference_lfno_primary(s)
	}
}

func (s *MethodReference_lfno_primaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitMethodReference_lfno_primary(s)
	}
}

func (p *Java8Parser) MethodReference_lfno_primary() (localctx IMethodReference_lfno_primaryContext) {
	localctx = NewMethodReference_lfno_primaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 402, Java8ParserRULE_methodReference_lfno_primary)
	var _la int

	p.SetState(2524)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 285, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2484)
			p.ExpressionName()
		}
		{
			p.SetState(2485)
			p.Match(Java8ParserCOLONCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2487)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(2486)
				p.TypeArguments()
			}

		}
		{
			p.SetState(2489)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2491)
			p.ReferenceType()
		}
		{
			p.SetState(2492)
			p.Match(Java8ParserCOLONCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2494)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(2493)
				p.TypeArguments()
			}

		}
		{
			p.SetState(2496)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2498)
			p.Match(Java8ParserSUPER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2499)
			p.Match(Java8ParserCOLONCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2501)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(2500)
				p.TypeArguments()
			}

		}
		{
			p.SetState(2503)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2504)
			p.TypeName()
		}
		{
			p.SetState(2505)
			p.Match(Java8ParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2506)
			p.Match(Java8ParserSUPER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2507)
			p.Match(Java8ParserCOLONCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2509)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(2508)
				p.TypeArguments()
			}

		}
		{
			p.SetState(2511)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2513)
			p.ClassType()
		}
		{
			p.SetState(2514)
			p.Match(Java8ParserCOLONCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2516)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Java8ParserLT {
			{
				p.SetState(2515)
				p.TypeArguments()
			}

		}
		{
			p.SetState(2518)
			p.Match(Java8ParserNEW)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2520)
			p.ArrayType()
		}
		{
			p.SetState(2521)
			p.Match(Java8ParserCOLONCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2522)
			p.Match(Java8ParserNEW)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArrayCreationExpressionContext is an interface to support dynamic dispatch.
type IArrayCreationExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NEW() antlr.TerminalNode
	PrimitiveType() IPrimitiveTypeContext
	DimExprs() IDimExprsContext
	Dims() IDimsContext
	ClassOrInterfaceType() IClassOrInterfaceTypeContext
	ArrayInitializer() IArrayInitializerContext

	// IsArrayCreationExpressionContext differentiates from other interfaces.
	IsArrayCreationExpressionContext()
}

type ArrayCreationExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayCreationExpressionContext() *ArrayCreationExpressionContext {
	var p = new(ArrayCreationExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_arrayCreationExpression
	return p
}

func InitEmptyArrayCreationExpressionContext(p *ArrayCreationExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_arrayCreationExpression
}

func (*ArrayCreationExpressionContext) IsArrayCreationExpressionContext() {}

func NewArrayCreationExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayCreationExpressionContext {
	var p = new(ArrayCreationExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_arrayCreationExpression

	return p
}

func (s *ArrayCreationExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayCreationExpressionContext) NEW() antlr.TerminalNode {
	return s.GetToken(Java8ParserNEW, 0)
}

func (s *ArrayCreationExpressionContext) PrimitiveType() IPrimitiveTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimitiveTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimitiveTypeContext)
}

func (s *ArrayCreationExpressionContext) DimExprs() IDimExprsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDimExprsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDimExprsContext)
}

func (s *ArrayCreationExpressionContext) Dims() IDimsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDimsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDimsContext)
}

func (s *ArrayCreationExpressionContext) ClassOrInterfaceType() IClassOrInterfaceTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassOrInterfaceTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassOrInterfaceTypeContext)
}

func (s *ArrayCreationExpressionContext) ArrayInitializer() IArrayInitializerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayInitializerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayInitializerContext)
}

func (s *ArrayCreationExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayCreationExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayCreationExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterArrayCreationExpression(s)
	}
}

func (s *ArrayCreationExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitArrayCreationExpression(s)
	}
}

func (p *Java8Parser) ArrayCreationExpression() (localctx IArrayCreationExpressionContext) {
	localctx = NewArrayCreationExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 404, Java8ParserRULE_arrayCreationExpression)
	p.SetState(2548)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 288, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2526)
			p.Match(Java8ParserNEW)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2527)
			p.PrimitiveType()
		}
		{
			p.SetState(2528)
			p.DimExprs()
		}
		p.SetState(2530)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 286, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2529)
				p.Dims()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2532)
			p.Match(Java8ParserNEW)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2533)
			p.ClassOrInterfaceType()
		}
		{
			p.SetState(2534)
			p.DimExprs()
		}
		p.SetState(2536)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 287, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2535)
				p.Dims()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2538)
			p.Match(Java8ParserNEW)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2539)
			p.PrimitiveType()
		}
		{
			p.SetState(2540)
			p.Dims()
		}
		{
			p.SetState(2541)
			p.ArrayInitializer()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2543)
			p.Match(Java8ParserNEW)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2544)
			p.ClassOrInterfaceType()
		}
		{
			p.SetState(2545)
			p.Dims()
		}
		{
			p.SetState(2546)
			p.ArrayInitializer()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDimExprsContext is an interface to support dynamic dispatch.
type IDimExprsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllDimExpr() []IDimExprContext
	DimExpr(i int) IDimExprContext

	// IsDimExprsContext differentiates from other interfaces.
	IsDimExprsContext()
}

type DimExprsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDimExprsContext() *DimExprsContext {
	var p = new(DimExprsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_dimExprs
	return p
}

func InitEmptyDimExprsContext(p *DimExprsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_dimExprs
}

func (*DimExprsContext) IsDimExprsContext() {}

func NewDimExprsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DimExprsContext {
	var p = new(DimExprsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_dimExprs

	return p
}

func (s *DimExprsContext) GetParser() antlr.Parser { return s.parser }

func (s *DimExprsContext) AllDimExpr() []IDimExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDimExprContext); ok {
			len++
		}
	}

	tst := make([]IDimExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDimExprContext); ok {
			tst[i] = t.(IDimExprContext)
			i++
		}
	}

	return tst
}

func (s *DimExprsContext) DimExpr(i int) IDimExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDimExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDimExprContext)
}

func (s *DimExprsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DimExprsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DimExprsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterDimExprs(s)
	}
}

func (s *DimExprsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitDimExprs(s)
	}
}

func (p *Java8Parser) DimExprs() (localctx IDimExprsContext) {
	localctx = NewDimExprsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 406, Java8ParserRULE_dimExprs)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2550)
		p.DimExpr()
	}
	p.SetState(2554)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 289, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2551)
				p.DimExpr()
			}

		}
		p.SetState(2556)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 289, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDimExprContext is an interface to support dynamic dispatch.
type IDimExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LBRACK() antlr.TerminalNode
	Expression() IExpressionContext
	RBRACK() antlr.TerminalNode
	AllAnnotation() []IAnnotationContext
	Annotation(i int) IAnnotationContext

	// IsDimExprContext differentiates from other interfaces.
	IsDimExprContext()
}

type DimExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDimExprContext() *DimExprContext {
	var p = new(DimExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_dimExpr
	return p
}

func InitEmptyDimExprContext(p *DimExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_dimExpr
}

func (*DimExprContext) IsDimExprContext() {}

func NewDimExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DimExprContext {
	var p = new(DimExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_dimExpr

	return p
}

func (s *DimExprContext) GetParser() antlr.Parser { return s.parser }

func (s *DimExprContext) LBRACK() antlr.TerminalNode {
	return s.GetToken(Java8ParserLBRACK, 0)
}

func (s *DimExprContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DimExprContext) RBRACK() antlr.TerminalNode {
	return s.GetToken(Java8ParserRBRACK, 0)
}

func (s *DimExprContext) AllAnnotation() []IAnnotationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAnnotationContext); ok {
			len++
		}
	}

	tst := make([]IAnnotationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAnnotationContext); ok {
			tst[i] = t.(IAnnotationContext)
			i++
		}
	}

	return tst
}

func (s *DimExprContext) Annotation(i int) IAnnotationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *DimExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DimExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DimExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterDimExpr(s)
	}
}

func (s *DimExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitDimExpr(s)
	}
}

func (p *Java8Parser) DimExpr() (localctx IDimExprContext) {
	localctx = NewDimExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 408, Java8ParserRULE_dimExpr)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2560)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Java8ParserAT {
		{
			p.SetState(2557)
			p.Annotation()
		}

		p.SetState(2562)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2563)
		p.Match(Java8ParserLBRACK)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2564)
		p.Expression()
	}
	{
		p.SetState(2565)
		p.Match(Java8ParserRBRACK)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConstantExpressionContext is an interface to support dynamic dispatch.
type IConstantExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext

	// IsConstantExpressionContext differentiates from other interfaces.
	IsConstantExpressionContext()
}

type ConstantExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstantExpressionContext() *ConstantExpressionContext {
	var p = new(ConstantExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_constantExpression
	return p
}

func InitEmptyConstantExpressionContext(p *ConstantExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_constantExpression
}

func (*ConstantExpressionContext) IsConstantExpressionContext() {}

func NewConstantExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstantExpressionContext {
	var p = new(ConstantExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_constantExpression

	return p
}

func (s *ConstantExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstantExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ConstantExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstantExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterConstantExpression(s)
	}
}

func (s *ConstantExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitConstantExpression(s)
	}
}

func (p *Java8Parser) ConstantExpression() (localctx IConstantExpressionContext) {
	localctx = NewConstantExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 410, Java8ParserRULE_constantExpression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2567)
		p.Expression()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LambdaExpression() ILambdaExpressionContext
	AssignmentExpression() IAssignmentExpressionContext

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_expression
	return p
}

func InitEmptyExpressionContext(p *ExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_expression
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) LambdaExpression() ILambdaExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILambdaExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILambdaExpressionContext)
}

func (s *ExpressionContext) AssignmentExpression() IAssignmentExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignmentExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpressionContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterExpression(s)
	}
}

func (s *ExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitExpression(s)
	}
}

func (p *Java8Parser) Expression() (localctx IExpressionContext) {
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 412, Java8ParserRULE_expression)
	p.SetState(2571)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 291, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2569)
			p.LambdaExpression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2570)
			p.AssignmentExpression()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILambdaExpressionContext is an interface to support dynamic dispatch.
type ILambdaExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LambdaParameters() ILambdaParametersContext
	ARROW() antlr.TerminalNode
	LambdaBody() ILambdaBodyContext

	// IsLambdaExpressionContext differentiates from other interfaces.
	IsLambdaExpressionContext()
}

type LambdaExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambdaExpressionContext() *LambdaExpressionContext {
	var p = new(LambdaExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_lambdaExpression
	return p
}

func InitEmptyLambdaExpressionContext(p *LambdaExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_lambdaExpression
}

func (*LambdaExpressionContext) IsLambdaExpressionContext() {}

func NewLambdaExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdaExpressionContext {
	var p = new(LambdaExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_lambdaExpression

	return p
}

func (s *LambdaExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdaExpressionContext) LambdaParameters() ILambdaParametersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILambdaParametersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILambdaParametersContext)
}

func (s *LambdaExpressionContext) ARROW() antlr.TerminalNode {
	return s.GetToken(Java8ParserARROW, 0)
}

func (s *LambdaExpressionContext) LambdaBody() ILambdaBodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILambdaBodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILambdaBodyContext)
}

func (s *LambdaExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LambdaExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterLambdaExpression(s)
	}
}

func (s *LambdaExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitLambdaExpression(s)
	}
}

func (p *Java8Parser) LambdaExpression() (localctx ILambdaExpressionContext) {
	localctx = NewLambdaExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 414, Java8ParserRULE_lambdaExpression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2573)
		p.LambdaParameters()
	}
	{
		p.SetState(2574)
		p.Match(Java8ParserARROW)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2575)
		p.LambdaBody()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILambdaParametersContext is an interface to support dynamic dispatch.
type ILambdaParametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	FormalParameterList() IFormalParameterListContext
	InferredFormalParameterList() IInferredFormalParameterListContext

	// IsLambdaParametersContext differentiates from other interfaces.
	IsLambdaParametersContext()
}

type LambdaParametersContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambdaParametersContext() *LambdaParametersContext {
	var p = new(LambdaParametersContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_lambdaParameters
	return p
}

func InitEmptyLambdaParametersContext(p *LambdaParametersContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_lambdaParameters
}

func (*LambdaParametersContext) IsLambdaParametersContext() {}

func NewLambdaParametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdaParametersContext {
	var p = new(LambdaParametersContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_lambdaParameters

	return p
}

func (s *LambdaParametersContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdaParametersContext) Identifier() antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, 0)
}

func (s *LambdaParametersContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserLPAREN, 0)
}

func (s *LambdaParametersContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRPAREN, 0)
}

func (s *LambdaParametersContext) FormalParameterList() IFormalParameterListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFormalParameterListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFormalParameterListContext)
}

func (s *LambdaParametersContext) InferredFormalParameterList() IInferredFormalParameterListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInferredFormalParameterListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInferredFormalParameterListContext)
}

func (s *LambdaParametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaParametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LambdaParametersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterLambdaParameters(s)
	}
}

func (s *LambdaParametersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitLambdaParameters(s)
	}
}

func (p *Java8Parser) LambdaParameters() (localctx ILambdaParametersContext) {
	localctx = NewLambdaParametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 416, Java8ParserRULE_lambdaParameters)
	var _la int

	p.SetState(2587)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 293, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2577)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2578)
			p.Match(Java8ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2580)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&138111369512) != 0) || _la == Java8ParserIdentifier || _la == Java8ParserAT {
			{
				p.SetState(2579)
				p.FormalParameterList()
			}

		}
		{
			p.SetState(2582)
			p.Match(Java8ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2583)
			p.Match(Java8ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2584)
			p.InferredFormalParameterList()
		}
		{
			p.SetState(2585)
			p.Match(Java8ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInferredFormalParameterListContext is an interface to support dynamic dispatch.
type IInferredFormalParameterListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIdentifier() []antlr.TerminalNode
	Identifier(i int) antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsInferredFormalParameterListContext differentiates from other interfaces.
	IsInferredFormalParameterListContext()
}

type InferredFormalParameterListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInferredFormalParameterListContext() *InferredFormalParameterListContext {
	var p = new(InferredFormalParameterListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_inferredFormalParameterList
	return p
}

func InitEmptyInferredFormalParameterListContext(p *InferredFormalParameterListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_inferredFormalParameterList
}

func (*InferredFormalParameterListContext) IsInferredFormalParameterListContext() {}

func NewInferredFormalParameterListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InferredFormalParameterListContext {
	var p = new(InferredFormalParameterListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_inferredFormalParameterList

	return p
}

func (s *InferredFormalParameterListContext) GetParser() antlr.Parser { return s.parser }

func (s *InferredFormalParameterListContext) AllIdentifier() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserIdentifier)
}

func (s *InferredFormalParameterListContext) Identifier(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserIdentifier, i)
}

func (s *InferredFormalParameterListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserCOMMA)
}

func (s *InferredFormalParameterListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserCOMMA, i)
}

func (s *InferredFormalParameterListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InferredFormalParameterListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InferredFormalParameterListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterInferredFormalParameterList(s)
	}
}

func (s *InferredFormalParameterListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitInferredFormalParameterList(s)
	}
}

func (p *Java8Parser) InferredFormalParameterList() (localctx IInferredFormalParameterListContext) {
	localctx = NewInferredFormalParameterListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 418, Java8ParserRULE_inferredFormalParameterList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2589)
		p.Match(Java8ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2594)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Java8ParserCOMMA {
		{
			p.SetState(2590)
			p.Match(Java8ParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2591)
			p.Match(Java8ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(2596)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILambdaBodyContext is an interface to support dynamic dispatch.
type ILambdaBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	Block() IBlockContext

	// IsLambdaBodyContext differentiates from other interfaces.
	IsLambdaBodyContext()
}

type LambdaBodyContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambdaBodyContext() *LambdaBodyContext {
	var p = new(LambdaBodyContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_lambdaBody
	return p
}

func InitEmptyLambdaBodyContext(p *LambdaBodyContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_lambdaBody
}

func (*LambdaBodyContext) IsLambdaBodyContext() {}

func NewLambdaBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdaBodyContext {
	var p = new(LambdaBodyContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_lambdaBody

	return p
}

func (s *LambdaBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdaBodyContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LambdaBodyContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *LambdaBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LambdaBodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterLambdaBody(s)
	}
}

func (s *LambdaBodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitLambdaBody(s)
	}
}

func (p *Java8Parser) LambdaBody() (localctx ILambdaBodyContext) {
	localctx = NewLambdaBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 420, Java8ParserRULE_lambdaBody)
	p.SetState(2599)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case Java8ParserBOOLEAN, Java8ParserBYTE, Java8ParserCHAR, Java8ParserDOUBLE, Java8ParserFLOAT, Java8ParserINT, Java8ParserLONG, Java8ParserNEW, Java8ParserSHORT, Java8ParserSUPER, Java8ParserTHIS, Java8ParserVOID, Java8ParserIntegerLiteral, Java8ParserFloatingPointLiteral, Java8ParserBooleanLiteral, Java8ParserCharacterLiteral, Java8ParserStringLiteral, Java8ParserNullLiteral, Java8ParserLPAREN, Java8ParserBANG, Java8ParserTILDE, Java8ParserINC, Java8ParserDEC, Java8ParserADD, Java8ParserSUB, Java8ParserIdentifier, Java8ParserAT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2597)
			p.Expression()
		}

	case Java8ParserLBRACE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2598)
			p.Block()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAssignmentExpressionContext is an interface to support dynamic dispatch.
type IAssignmentExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ConditionalExpression() IConditionalExpressionContext
	Assignment() IAssignmentContext

	// IsAssignmentExpressionContext differentiates from other interfaces.
	IsAssignmentExpressionContext()
}

type AssignmentExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentExpressionContext() *AssignmentExpressionContext {
	var p = new(AssignmentExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_assignmentExpression
	return p
}

func InitEmptyAssignmentExpressionContext(p *AssignmentExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_assignmentExpression
}

func (*AssignmentExpressionContext) IsAssignmentExpressionContext() {}

func NewAssignmentExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentExpressionContext {
	var p = new(AssignmentExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_assignmentExpression

	return p
}

func (s *AssignmentExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentExpressionContext) ConditionalExpression() IConditionalExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConditionalExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConditionalExpressionContext)
}

func (s *AssignmentExpressionContext) Assignment() IAssignmentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignmentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignmentContext)
}

func (s *AssignmentExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterAssignmentExpression(s)
	}
}

func (s *AssignmentExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitAssignmentExpression(s)
	}
}

func (p *Java8Parser) AssignmentExpression() (localctx IAssignmentExpressionContext) {
	localctx = NewAssignmentExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 422, Java8ParserRULE_assignmentExpression)
	p.SetState(2603)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 296, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2601)
			p.ConditionalExpression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2602)
			p.Assignment()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAssignmentContext is an interface to support dynamic dispatch.
type IAssignmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LeftHandSide() ILeftHandSideContext
	AssignmentOperator() IAssignmentOperatorContext
	Expression() IExpressionContext

	// IsAssignmentContext differentiates from other interfaces.
	IsAssignmentContext()
}

type AssignmentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentContext() *AssignmentContext {
	var p = new(AssignmentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_assignment
	return p
}

func InitEmptyAssignmentContext(p *AssignmentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_assignment
}

func (*AssignmentContext) IsAssignmentContext() {}

func NewAssignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentContext {
	var p = new(AssignmentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_assignment

	return p
}

func (s *AssignmentContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentContext) LeftHandSide() ILeftHandSideContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILeftHandSideContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILeftHandSideContext)
}

func (s *AssignmentContext) AssignmentOperator() IAssignmentOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignmentOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignmentOperatorContext)
}

func (s *AssignmentContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *AssignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterAssignment(s)
	}
}

func (s *AssignmentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitAssignment(s)
	}
}

func (p *Java8Parser) Assignment() (localctx IAssignmentContext) {
	localctx = NewAssignmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 424, Java8ParserRULE_assignment)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2605)
		p.LeftHandSide()
	}
	{
		p.SetState(2606)
		p.AssignmentOperator()
	}
	{
		p.SetState(2607)
		p.Expression()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILeftHandSideContext is an interface to support dynamic dispatch.
type ILeftHandSideContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ExpressionName() IExpressionNameContext
	FieldAccess() IFieldAccessContext
	ArrayAccess() IArrayAccessContext

	// IsLeftHandSideContext differentiates from other interfaces.
	IsLeftHandSideContext()
}

type LeftHandSideContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLeftHandSideContext() *LeftHandSideContext {
	var p = new(LeftHandSideContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_leftHandSide
	return p
}

func InitEmptyLeftHandSideContext(p *LeftHandSideContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_leftHandSide
}

func (*LeftHandSideContext) IsLeftHandSideContext() {}

func NewLeftHandSideContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LeftHandSideContext {
	var p = new(LeftHandSideContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_leftHandSide

	return p
}

func (s *LeftHandSideContext) GetParser() antlr.Parser { return s.parser }

func (s *LeftHandSideContext) ExpressionName() IExpressionNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionNameContext)
}

func (s *LeftHandSideContext) FieldAccess() IFieldAccessContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFieldAccessContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFieldAccessContext)
}

func (s *LeftHandSideContext) ArrayAccess() IArrayAccessContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayAccessContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayAccessContext)
}

func (s *LeftHandSideContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LeftHandSideContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LeftHandSideContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterLeftHandSide(s)
	}
}

func (s *LeftHandSideContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitLeftHandSide(s)
	}
}

func (p *Java8Parser) LeftHandSide() (localctx ILeftHandSideContext) {
	localctx = NewLeftHandSideContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 426, Java8ParserRULE_leftHandSide)
	p.SetState(2612)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 297, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2609)
			p.ExpressionName()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2610)
			p.FieldAccess()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2611)
			p.ArrayAccess()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAssignmentOperatorContext is an interface to support dynamic dispatch.
type IAssignmentOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ASSIGN() antlr.TerminalNode
	MUL_ASSIGN() antlr.TerminalNode
	DIV_ASSIGN() antlr.TerminalNode
	MOD_ASSIGN() antlr.TerminalNode
	ADD_ASSIGN() antlr.TerminalNode
	SUB_ASSIGN() antlr.TerminalNode
	LSHIFT_ASSIGN() antlr.TerminalNode
	RSHIFT_ASSIGN() antlr.TerminalNode
	URSHIFT_ASSIGN() antlr.TerminalNode
	AND_ASSIGN() antlr.TerminalNode
	XOR_ASSIGN() antlr.TerminalNode
	OR_ASSIGN() antlr.TerminalNode

	// IsAssignmentOperatorContext differentiates from other interfaces.
	IsAssignmentOperatorContext()
}

type AssignmentOperatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentOperatorContext() *AssignmentOperatorContext {
	var p = new(AssignmentOperatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_assignmentOperator
	return p
}

func InitEmptyAssignmentOperatorContext(p *AssignmentOperatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_assignmentOperator
}

func (*AssignmentOperatorContext) IsAssignmentOperatorContext() {}

func NewAssignmentOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentOperatorContext {
	var p = new(AssignmentOperatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_assignmentOperator

	return p
}

func (s *AssignmentOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentOperatorContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(Java8ParserASSIGN, 0)
}

func (s *AssignmentOperatorContext) MUL_ASSIGN() antlr.TerminalNode {
	return s.GetToken(Java8ParserMUL_ASSIGN, 0)
}

func (s *AssignmentOperatorContext) DIV_ASSIGN() antlr.TerminalNode {
	return s.GetToken(Java8ParserDIV_ASSIGN, 0)
}

func (s *AssignmentOperatorContext) MOD_ASSIGN() antlr.TerminalNode {
	return s.GetToken(Java8ParserMOD_ASSIGN, 0)
}

func (s *AssignmentOperatorContext) ADD_ASSIGN() antlr.TerminalNode {
	return s.GetToken(Java8ParserADD_ASSIGN, 0)
}

func (s *AssignmentOperatorContext) SUB_ASSIGN() antlr.TerminalNode {
	return s.GetToken(Java8ParserSUB_ASSIGN, 0)
}

func (s *AssignmentOperatorContext) LSHIFT_ASSIGN() antlr.TerminalNode {
	return s.GetToken(Java8ParserLSHIFT_ASSIGN, 0)
}

func (s *AssignmentOperatorContext) RSHIFT_ASSIGN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRSHIFT_ASSIGN, 0)
}

func (s *AssignmentOperatorContext) URSHIFT_ASSIGN() antlr.TerminalNode {
	return s.GetToken(Java8ParserURSHIFT_ASSIGN, 0)
}

func (s *AssignmentOperatorContext) AND_ASSIGN() antlr.TerminalNode {
	return s.GetToken(Java8ParserAND_ASSIGN, 0)
}

func (s *AssignmentOperatorContext) XOR_ASSIGN() antlr.TerminalNode {
	return s.GetToken(Java8ParserXOR_ASSIGN, 0)
}

func (s *AssignmentOperatorContext) OR_ASSIGN() antlr.TerminalNode {
	return s.GetToken(Java8ParserOR_ASSIGN, 0)
}

func (s *AssignmentOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterAssignmentOperator(s)
	}
}

func (s *AssignmentOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitAssignmentOperator(s)
	}
}

func (p *Java8Parser) AssignmentOperator() (localctx IAssignmentOperatorContext) {
	localctx = NewAssignmentOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 428, Java8ParserRULE_assignmentOperator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2614)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-66)) & ^0x3f) == 0 && ((int64(1)<<(_la-66))&68685922305) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConditionalExpressionContext is an interface to support dynamic dispatch.
type IConditionalExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ConditionalOrExpression() IConditionalOrExpressionContext
	QUESTION() antlr.TerminalNode
	Expression() IExpressionContext
	COLON() antlr.TerminalNode
	ConditionalExpression() IConditionalExpressionContext

	// IsConditionalExpressionContext differentiates from other interfaces.
	IsConditionalExpressionContext()
}

type ConditionalExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionalExpressionContext() *ConditionalExpressionContext {
	var p = new(ConditionalExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_conditionalExpression
	return p
}

func InitEmptyConditionalExpressionContext(p *ConditionalExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_conditionalExpression
}

func (*ConditionalExpressionContext) IsConditionalExpressionContext() {}

func NewConditionalExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionalExpressionContext {
	var p = new(ConditionalExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_conditionalExpression

	return p
}

func (s *ConditionalExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionalExpressionContext) ConditionalOrExpression() IConditionalOrExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConditionalOrExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConditionalOrExpressionContext)
}

func (s *ConditionalExpressionContext) QUESTION() antlr.TerminalNode {
	return s.GetToken(Java8ParserQUESTION, 0)
}

func (s *ConditionalExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ConditionalExpressionContext) COLON() antlr.TerminalNode {
	return s.GetToken(Java8ParserCOLON, 0)
}

func (s *ConditionalExpressionContext) ConditionalExpression() IConditionalExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConditionalExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConditionalExpressionContext)
}

func (s *ConditionalExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionalExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionalExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterConditionalExpression(s)
	}
}

func (s *ConditionalExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitConditionalExpression(s)
	}
}

func (p *Java8Parser) ConditionalExpression() (localctx IConditionalExpressionContext) {
	localctx = NewConditionalExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 430, Java8ParserRULE_conditionalExpression)
	p.SetState(2623)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 298, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2616)
			p.conditionalOrExpression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2617)
			p.conditionalOrExpression(0)
		}
		{
			p.SetState(2618)
			p.Match(Java8ParserQUESTION)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2619)
			p.Expression()
		}
		{
			p.SetState(2620)
			p.Match(Java8ParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2621)
			p.ConditionalExpression()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConditionalOrExpressionContext is an interface to support dynamic dispatch.
type IConditionalOrExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ConditionalAndExpression() IConditionalAndExpressionContext
	ConditionalOrExpression() IConditionalOrExpressionContext
	OR() antlr.TerminalNode

	// IsConditionalOrExpressionContext differentiates from other interfaces.
	IsConditionalOrExpressionContext()
}

type ConditionalOrExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionalOrExpressionContext() *ConditionalOrExpressionContext {
	var p = new(ConditionalOrExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_conditionalOrExpression
	return p
}

func InitEmptyConditionalOrExpressionContext(p *ConditionalOrExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_conditionalOrExpression
}

func (*ConditionalOrExpressionContext) IsConditionalOrExpressionContext() {}

func NewConditionalOrExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionalOrExpressionContext {
	var p = new(ConditionalOrExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_conditionalOrExpression

	return p
}

func (s *ConditionalOrExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionalOrExpressionContext) ConditionalAndExpression() IConditionalAndExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConditionalAndExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConditionalAndExpressionContext)
}

func (s *ConditionalOrExpressionContext) ConditionalOrExpression() IConditionalOrExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConditionalOrExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConditionalOrExpressionContext)
}

func (s *ConditionalOrExpressionContext) OR() antlr.TerminalNode {
	return s.GetToken(Java8ParserOR, 0)
}

func (s *ConditionalOrExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionalOrExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionalOrExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterConditionalOrExpression(s)
	}
}

func (s *ConditionalOrExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitConditionalOrExpression(s)
	}
}

func (p *Java8Parser) ConditionalOrExpression() (localctx IConditionalOrExpressionContext) {
	return p.conditionalOrExpression(0)
}

func (p *Java8Parser) conditionalOrExpression(_p int) (localctx IConditionalOrExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewConditionalOrExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IConditionalOrExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 432
	p.EnterRecursionRule(localctx, 432, Java8ParserRULE_conditionalOrExpression, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2626)
		p.conditionalAndExpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2633)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 299, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewConditionalOrExpressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, Java8ParserRULE_conditionalOrExpression)
			p.SetState(2628)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				goto errorExit
			}
			{
				p.SetState(2629)
				p.Match(Java8ParserOR)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(2630)
				p.conditionalAndExpression(0)
			}

		}
		p.SetState(2635)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 299, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConditionalAndExpressionContext is an interface to support dynamic dispatch.
type IConditionalAndExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	InclusiveOrExpression() IInclusiveOrExpressionContext
	ConditionalAndExpression() IConditionalAndExpressionContext
	AND() antlr.TerminalNode

	// IsConditionalAndExpressionContext differentiates from other interfaces.
	IsConditionalAndExpressionContext()
}

type ConditionalAndExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionalAndExpressionContext() *ConditionalAndExpressionContext {
	var p = new(ConditionalAndExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_conditionalAndExpression
	return p
}

func InitEmptyConditionalAndExpressionContext(p *ConditionalAndExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_conditionalAndExpression
}

func (*ConditionalAndExpressionContext) IsConditionalAndExpressionContext() {}

func NewConditionalAndExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionalAndExpressionContext {
	var p = new(ConditionalAndExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_conditionalAndExpression

	return p
}

func (s *ConditionalAndExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionalAndExpressionContext) InclusiveOrExpression() IInclusiveOrExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInclusiveOrExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInclusiveOrExpressionContext)
}

func (s *ConditionalAndExpressionContext) ConditionalAndExpression() IConditionalAndExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConditionalAndExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConditionalAndExpressionContext)
}

func (s *ConditionalAndExpressionContext) AND() antlr.TerminalNode {
	return s.GetToken(Java8ParserAND, 0)
}

func (s *ConditionalAndExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionalAndExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionalAndExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterConditionalAndExpression(s)
	}
}

func (s *ConditionalAndExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitConditionalAndExpression(s)
	}
}

func (p *Java8Parser) ConditionalAndExpression() (localctx IConditionalAndExpressionContext) {
	return p.conditionalAndExpression(0)
}

func (p *Java8Parser) conditionalAndExpression(_p int) (localctx IConditionalAndExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewConditionalAndExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IConditionalAndExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 434
	p.EnterRecursionRule(localctx, 434, Java8ParserRULE_conditionalAndExpression, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2637)
		p.inclusiveOrExpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2644)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 300, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewConditionalAndExpressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, Java8ParserRULE_conditionalAndExpression)
			p.SetState(2639)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				goto errorExit
			}
			{
				p.SetState(2640)
				p.Match(Java8ParserAND)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(2641)
				p.inclusiveOrExpression(0)
			}

		}
		p.SetState(2646)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 300, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInclusiveOrExpressionContext is an interface to support dynamic dispatch.
type IInclusiveOrExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ExclusiveOrExpression() IExclusiveOrExpressionContext
	InclusiveOrExpression() IInclusiveOrExpressionContext
	BITOR() antlr.TerminalNode

	// IsInclusiveOrExpressionContext differentiates from other interfaces.
	IsInclusiveOrExpressionContext()
}

type InclusiveOrExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInclusiveOrExpressionContext() *InclusiveOrExpressionContext {
	var p = new(InclusiveOrExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_inclusiveOrExpression
	return p
}

func InitEmptyInclusiveOrExpressionContext(p *InclusiveOrExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_inclusiveOrExpression
}

func (*InclusiveOrExpressionContext) IsInclusiveOrExpressionContext() {}

func NewInclusiveOrExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InclusiveOrExpressionContext {
	var p = new(InclusiveOrExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_inclusiveOrExpression

	return p
}

func (s *InclusiveOrExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *InclusiveOrExpressionContext) ExclusiveOrExpression() IExclusiveOrExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExclusiveOrExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExclusiveOrExpressionContext)
}

func (s *InclusiveOrExpressionContext) InclusiveOrExpression() IInclusiveOrExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInclusiveOrExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInclusiveOrExpressionContext)
}

func (s *InclusiveOrExpressionContext) BITOR() antlr.TerminalNode {
	return s.GetToken(Java8ParserBITOR, 0)
}

func (s *InclusiveOrExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InclusiveOrExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InclusiveOrExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterInclusiveOrExpression(s)
	}
}

func (s *InclusiveOrExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitInclusiveOrExpression(s)
	}
}

func (p *Java8Parser) InclusiveOrExpression() (localctx IInclusiveOrExpressionContext) {
	return p.inclusiveOrExpression(0)
}

func (p *Java8Parser) inclusiveOrExpression(_p int) (localctx IInclusiveOrExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewInclusiveOrExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IInclusiveOrExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 436
	p.EnterRecursionRule(localctx, 436, Java8ParserRULE_inclusiveOrExpression, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2648)
		p.exclusiveOrExpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2655)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 301, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewInclusiveOrExpressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, Java8ParserRULE_inclusiveOrExpression)
			p.SetState(2650)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				goto errorExit
			}
			{
				p.SetState(2651)
				p.Match(Java8ParserBITOR)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(2652)
				p.exclusiveOrExpression(0)
			}

		}
		p.SetState(2657)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 301, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExclusiveOrExpressionContext is an interface to support dynamic dispatch.
type IExclusiveOrExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AndExpression() IAndExpressionContext
	ExclusiveOrExpression() IExclusiveOrExpressionContext
	CARET() antlr.TerminalNode

	// IsExclusiveOrExpressionContext differentiates from other interfaces.
	IsExclusiveOrExpressionContext()
}

type ExclusiveOrExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExclusiveOrExpressionContext() *ExclusiveOrExpressionContext {
	var p = new(ExclusiveOrExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_exclusiveOrExpression
	return p
}

func InitEmptyExclusiveOrExpressionContext(p *ExclusiveOrExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_exclusiveOrExpression
}

func (*ExclusiveOrExpressionContext) IsExclusiveOrExpressionContext() {}

func NewExclusiveOrExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExclusiveOrExpressionContext {
	var p = new(ExclusiveOrExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_exclusiveOrExpression

	return p
}

func (s *ExclusiveOrExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExclusiveOrExpressionContext) AndExpression() IAndExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAndExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAndExpressionContext)
}

func (s *ExclusiveOrExpressionContext) ExclusiveOrExpression() IExclusiveOrExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExclusiveOrExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExclusiveOrExpressionContext)
}

func (s *ExclusiveOrExpressionContext) CARET() antlr.TerminalNode {
	return s.GetToken(Java8ParserCARET, 0)
}

func (s *ExclusiveOrExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExclusiveOrExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExclusiveOrExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterExclusiveOrExpression(s)
	}
}

func (s *ExclusiveOrExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitExclusiveOrExpression(s)
	}
}

func (p *Java8Parser) ExclusiveOrExpression() (localctx IExclusiveOrExpressionContext) {
	return p.exclusiveOrExpression(0)
}

func (p *Java8Parser) exclusiveOrExpression(_p int) (localctx IExclusiveOrExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewExclusiveOrExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExclusiveOrExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 438
	p.EnterRecursionRule(localctx, 438, Java8ParserRULE_exclusiveOrExpression, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2659)
		p.andExpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2666)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 302, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewExclusiveOrExpressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, Java8ParserRULE_exclusiveOrExpression)
			p.SetState(2661)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				goto errorExit
			}
			{
				p.SetState(2662)
				p.Match(Java8ParserCARET)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(2663)
				p.andExpression(0)
			}

		}
		p.SetState(2668)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 302, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAndExpressionContext is an interface to support dynamic dispatch.
type IAndExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EqualityExpression() IEqualityExpressionContext
	AndExpression() IAndExpressionContext
	BITAND() antlr.TerminalNode

	// IsAndExpressionContext differentiates from other interfaces.
	IsAndExpressionContext()
}

type AndExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAndExpressionContext() *AndExpressionContext {
	var p = new(AndExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_andExpression
	return p
}

func InitEmptyAndExpressionContext(p *AndExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_andExpression
}

func (*AndExpressionContext) IsAndExpressionContext() {}

func NewAndExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AndExpressionContext {
	var p = new(AndExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_andExpression

	return p
}

func (s *AndExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *AndExpressionContext) EqualityExpression() IEqualityExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEqualityExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEqualityExpressionContext)
}

func (s *AndExpressionContext) AndExpression() IAndExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAndExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAndExpressionContext)
}

func (s *AndExpressionContext) BITAND() antlr.TerminalNode {
	return s.GetToken(Java8ParserBITAND, 0)
}

func (s *AndExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AndExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AndExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterAndExpression(s)
	}
}

func (s *AndExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitAndExpression(s)
	}
}

func (p *Java8Parser) AndExpression() (localctx IAndExpressionContext) {
	return p.andExpression(0)
}

func (p *Java8Parser) andExpression(_p int) (localctx IAndExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewAndExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IAndExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 440
	p.EnterRecursionRule(localctx, 440, Java8ParserRULE_andExpression, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2670)
		p.equalityExpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2677)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 303, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewAndExpressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, Java8ParserRULE_andExpression)
			p.SetState(2672)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				goto errorExit
			}
			{
				p.SetState(2673)
				p.Match(Java8ParserBITAND)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(2674)
				p.equalityExpression(0)
			}

		}
		p.SetState(2679)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 303, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEqualityExpressionContext is an interface to support dynamic dispatch.
type IEqualityExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RelationalExpression() IRelationalExpressionContext
	EqualityExpression() IEqualityExpressionContext
	EQUAL() antlr.TerminalNode
	NOTEQUAL() antlr.TerminalNode

	// IsEqualityExpressionContext differentiates from other interfaces.
	IsEqualityExpressionContext()
}

type EqualityExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEqualityExpressionContext() *EqualityExpressionContext {
	var p = new(EqualityExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_equalityExpression
	return p
}

func InitEmptyEqualityExpressionContext(p *EqualityExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_equalityExpression
}

func (*EqualityExpressionContext) IsEqualityExpressionContext() {}

func NewEqualityExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EqualityExpressionContext {
	var p = new(EqualityExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_equalityExpression

	return p
}

func (s *EqualityExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *EqualityExpressionContext) RelationalExpression() IRelationalExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRelationalExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRelationalExpressionContext)
}

func (s *EqualityExpressionContext) EqualityExpression() IEqualityExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEqualityExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEqualityExpressionContext)
}

func (s *EqualityExpressionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(Java8ParserEQUAL, 0)
}

func (s *EqualityExpressionContext) NOTEQUAL() antlr.TerminalNode {
	return s.GetToken(Java8ParserNOTEQUAL, 0)
}

func (s *EqualityExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EqualityExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EqualityExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterEqualityExpression(s)
	}
}

func (s *EqualityExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitEqualityExpression(s)
	}
}

func (p *Java8Parser) EqualityExpression() (localctx IEqualityExpressionContext) {
	return p.equalityExpression(0)
}

func (p *Java8Parser) equalityExpression(_p int) (localctx IEqualityExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewEqualityExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IEqualityExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 442
	p.EnterRecursionRule(localctx, 442, Java8ParserRULE_equalityExpression, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2681)
		p.relationalExpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2691)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 305, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2689)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 304, p.GetParserRuleContext()) {
			case 1:
				localctx = NewEqualityExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, Java8ParserRULE_equalityExpression)
				p.SetState(2683)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
					goto errorExit
				}
				{
					p.SetState(2684)
					p.Match(Java8ParserEQUAL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(2685)
					p.relationalExpression(0)
				}

			case 2:
				localctx = NewEqualityExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, Java8ParserRULE_equalityExpression)
				p.SetState(2686)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
					goto errorExit
				}
				{
					p.SetState(2687)
					p.Match(Java8ParserNOTEQUAL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(2688)
					p.relationalExpression(0)
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(2693)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 305, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRelationalExpressionContext is an interface to support dynamic dispatch.
type IRelationalExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ShiftExpression() IShiftExpressionContext
	RelationalExpression() IRelationalExpressionContext
	LT() antlr.TerminalNode
	GT() antlr.TerminalNode
	LE() antlr.TerminalNode
	GE() antlr.TerminalNode
	INSTANCEOF() antlr.TerminalNode
	ReferenceType() IReferenceTypeContext

	// IsRelationalExpressionContext differentiates from other interfaces.
	IsRelationalExpressionContext()
}

type RelationalExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRelationalExpressionContext() *RelationalExpressionContext {
	var p = new(RelationalExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_relationalExpression
	return p
}

func InitEmptyRelationalExpressionContext(p *RelationalExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_relationalExpression
}

func (*RelationalExpressionContext) IsRelationalExpressionContext() {}

func NewRelationalExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RelationalExpressionContext {
	var p = new(RelationalExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_relationalExpression

	return p
}

func (s *RelationalExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *RelationalExpressionContext) ShiftExpression() IShiftExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShiftExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShiftExpressionContext)
}

func (s *RelationalExpressionContext) RelationalExpression() IRelationalExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRelationalExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRelationalExpressionContext)
}

func (s *RelationalExpressionContext) LT() antlr.TerminalNode {
	return s.GetToken(Java8ParserLT, 0)
}

func (s *RelationalExpressionContext) GT() antlr.TerminalNode {
	return s.GetToken(Java8ParserGT, 0)
}

func (s *RelationalExpressionContext) LE() antlr.TerminalNode {
	return s.GetToken(Java8ParserLE, 0)
}

func (s *RelationalExpressionContext) GE() antlr.TerminalNode {
	return s.GetToken(Java8ParserGE, 0)
}

func (s *RelationalExpressionContext) INSTANCEOF() antlr.TerminalNode {
	return s.GetToken(Java8ParserINSTANCEOF, 0)
}

func (s *RelationalExpressionContext) ReferenceType() IReferenceTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReferenceTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReferenceTypeContext)
}

func (s *RelationalExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RelationalExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RelationalExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterRelationalExpression(s)
	}
}

func (s *RelationalExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitRelationalExpression(s)
	}
}

func (p *Java8Parser) RelationalExpression() (localctx IRelationalExpressionContext) {
	return p.relationalExpression(0)
}

func (p *Java8Parser) relationalExpression(_p int) (localctx IRelationalExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewRelationalExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IRelationalExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 444
	p.EnterRecursionRule(localctx, 444, Java8ParserRULE_relationalExpression, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2695)
		p.shiftExpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2714)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 307, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2712)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 306, p.GetParserRuleContext()) {
			case 1:
				localctx = NewRelationalExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, Java8ParserRULE_relationalExpression)
				p.SetState(2697)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
					goto errorExit
				}
				{
					p.SetState(2698)
					p.Match(Java8ParserLT)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(2699)
					p.shiftExpression(0)
				}

			case 2:
				localctx = NewRelationalExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, Java8ParserRULE_relationalExpression)
				p.SetState(2700)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
					goto errorExit
				}
				{
					p.SetState(2701)
					p.Match(Java8ParserGT)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(2702)
					p.shiftExpression(0)
				}

			case 3:
				localctx = NewRelationalExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, Java8ParserRULE_relationalExpression)
				p.SetState(2703)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
					goto errorExit
				}
				{
					p.SetState(2704)
					p.Match(Java8ParserLE)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(2705)
					p.shiftExpression(0)
				}

			case 4:
				localctx = NewRelationalExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, Java8ParserRULE_relationalExpression)
				p.SetState(2706)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
					goto errorExit
				}
				{
					p.SetState(2707)
					p.Match(Java8ParserGE)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(2708)
					p.shiftExpression(0)
				}

			case 5:
				localctx = NewRelationalExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, Java8ParserRULE_relationalExpression)
				p.SetState(2709)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
					goto errorExit
				}
				{
					p.SetState(2710)
					p.Match(Java8ParserINSTANCEOF)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(2711)
					p.ReferenceType()
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(2716)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 307, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IShiftExpressionContext is an interface to support dynamic dispatch.
type IShiftExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AdditiveExpression() IAdditiveExpressionContext
	ShiftExpression() IShiftExpressionContext
	AllLT() []antlr.TerminalNode
	LT(i int) antlr.TerminalNode
	AllGT() []antlr.TerminalNode
	GT(i int) antlr.TerminalNode

	// IsShiftExpressionContext differentiates from other interfaces.
	IsShiftExpressionContext()
}

type ShiftExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShiftExpressionContext() *ShiftExpressionContext {
	var p = new(ShiftExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_shiftExpression
	return p
}

func InitEmptyShiftExpressionContext(p *ShiftExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_shiftExpression
}

func (*ShiftExpressionContext) IsShiftExpressionContext() {}

func NewShiftExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShiftExpressionContext {
	var p = new(ShiftExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_shiftExpression

	return p
}

func (s *ShiftExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ShiftExpressionContext) AdditiveExpression() IAdditiveExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAdditiveExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAdditiveExpressionContext)
}

func (s *ShiftExpressionContext) ShiftExpression() IShiftExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShiftExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShiftExpressionContext)
}

func (s *ShiftExpressionContext) AllLT() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserLT)
}

func (s *ShiftExpressionContext) LT(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserLT, i)
}

func (s *ShiftExpressionContext) AllGT() []antlr.TerminalNode {
	return s.GetTokens(Java8ParserGT)
}

func (s *ShiftExpressionContext) GT(i int) antlr.TerminalNode {
	return s.GetToken(Java8ParserGT, i)
}

func (s *ShiftExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShiftExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShiftExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterShiftExpression(s)
	}
}

func (s *ShiftExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitShiftExpression(s)
	}
}

func (p *Java8Parser) ShiftExpression() (localctx IShiftExpressionContext) {
	return p.shiftExpression(0)
}

func (p *Java8Parser) shiftExpression(_p int) (localctx IShiftExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewShiftExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IShiftExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 446
	p.EnterRecursionRule(localctx, 446, Java8ParserRULE_shiftExpression, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2718)
		p.additiveExpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2735)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 309, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2733)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 308, p.GetParserRuleContext()) {
			case 1:
				localctx = NewShiftExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, Java8ParserRULE_shiftExpression)
				p.SetState(2720)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
					goto errorExit
				}
				{
					p.SetState(2721)
					p.Match(Java8ParserLT)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(2722)
					p.Match(Java8ParserLT)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(2723)
					p.additiveExpression(0)
				}

			case 2:
				localctx = NewShiftExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, Java8ParserRULE_shiftExpression)
				p.SetState(2724)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
					goto errorExit
				}
				{
					p.SetState(2725)
					p.Match(Java8ParserGT)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(2726)
					p.Match(Java8ParserGT)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(2727)
					p.additiveExpression(0)
				}

			case 3:
				localctx = NewShiftExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, Java8ParserRULE_shiftExpression)
				p.SetState(2728)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
					goto errorExit
				}
				{
					p.SetState(2729)
					p.Match(Java8ParserGT)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(2730)
					p.Match(Java8ParserGT)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(2731)
					p.Match(Java8ParserGT)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(2732)
					p.additiveExpression(0)
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(2737)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 309, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAdditiveExpressionContext is an interface to support dynamic dispatch.
type IAdditiveExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MultiplicativeExpression() IMultiplicativeExpressionContext
	AdditiveExpression() IAdditiveExpressionContext
	ADD() antlr.TerminalNode
	SUB() antlr.TerminalNode

	// IsAdditiveExpressionContext differentiates from other interfaces.
	IsAdditiveExpressionContext()
}

type AdditiveExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAdditiveExpressionContext() *AdditiveExpressionContext {
	var p = new(AdditiveExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_additiveExpression
	return p
}

func InitEmptyAdditiveExpressionContext(p *AdditiveExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_additiveExpression
}

func (*AdditiveExpressionContext) IsAdditiveExpressionContext() {}

func NewAdditiveExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AdditiveExpressionContext {
	var p = new(AdditiveExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_additiveExpression

	return p
}

func (s *AdditiveExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *AdditiveExpressionContext) MultiplicativeExpression() IMultiplicativeExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMultiplicativeExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMultiplicativeExpressionContext)
}

func (s *AdditiveExpressionContext) AdditiveExpression() IAdditiveExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAdditiveExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAdditiveExpressionContext)
}

func (s *AdditiveExpressionContext) ADD() antlr.TerminalNode {
	return s.GetToken(Java8ParserADD, 0)
}

func (s *AdditiveExpressionContext) SUB() antlr.TerminalNode {
	return s.GetToken(Java8ParserSUB, 0)
}

func (s *AdditiveExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AdditiveExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AdditiveExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterAdditiveExpression(s)
	}
}

func (s *AdditiveExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitAdditiveExpression(s)
	}
}

func (p *Java8Parser) AdditiveExpression() (localctx IAdditiveExpressionContext) {
	return p.additiveExpression(0)
}

func (p *Java8Parser) additiveExpression(_p int) (localctx IAdditiveExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewAdditiveExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IAdditiveExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 448
	p.EnterRecursionRule(localctx, 448, Java8ParserRULE_additiveExpression, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2739)
		p.multiplicativeExpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2749)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 311, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2747)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 310, p.GetParserRuleContext()) {
			case 1:
				localctx = NewAdditiveExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, Java8ParserRULE_additiveExpression)
				p.SetState(2741)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
					goto errorExit
				}
				{
					p.SetState(2742)
					p.Match(Java8ParserADD)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(2743)
					p.multiplicativeExpression(0)
				}

			case 2:
				localctx = NewAdditiveExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, Java8ParserRULE_additiveExpression)
				p.SetState(2744)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
					goto errorExit
				}
				{
					p.SetState(2745)
					p.Match(Java8ParserSUB)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(2746)
					p.multiplicativeExpression(0)
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(2751)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 311, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMultiplicativeExpressionContext is an interface to support dynamic dispatch.
type IMultiplicativeExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UnaryExpression() IUnaryExpressionContext
	MultiplicativeExpression() IMultiplicativeExpressionContext
	MUL() antlr.TerminalNode
	DIV() antlr.TerminalNode
	MOD() antlr.TerminalNode

	// IsMultiplicativeExpressionContext differentiates from other interfaces.
	IsMultiplicativeExpressionContext()
}

type MultiplicativeExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMultiplicativeExpressionContext() *MultiplicativeExpressionContext {
	var p = new(MultiplicativeExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_multiplicativeExpression
	return p
}

func InitEmptyMultiplicativeExpressionContext(p *MultiplicativeExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_multiplicativeExpression
}

func (*MultiplicativeExpressionContext) IsMultiplicativeExpressionContext() {}

func NewMultiplicativeExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MultiplicativeExpressionContext {
	var p = new(MultiplicativeExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_multiplicativeExpression

	return p
}

func (s *MultiplicativeExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *MultiplicativeExpressionContext) UnaryExpression() IUnaryExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnaryExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnaryExpressionContext)
}

func (s *MultiplicativeExpressionContext) MultiplicativeExpression() IMultiplicativeExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMultiplicativeExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMultiplicativeExpressionContext)
}

func (s *MultiplicativeExpressionContext) MUL() antlr.TerminalNode {
	return s.GetToken(Java8ParserMUL, 0)
}

func (s *MultiplicativeExpressionContext) DIV() antlr.TerminalNode {
	return s.GetToken(Java8ParserDIV, 0)
}

func (s *MultiplicativeExpressionContext) MOD() antlr.TerminalNode {
	return s.GetToken(Java8ParserMOD, 0)
}

func (s *MultiplicativeExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MultiplicativeExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MultiplicativeExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterMultiplicativeExpression(s)
	}
}

func (s *MultiplicativeExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitMultiplicativeExpression(s)
	}
}

func (p *Java8Parser) MultiplicativeExpression() (localctx IMultiplicativeExpressionContext) {
	return p.multiplicativeExpression(0)
}

func (p *Java8Parser) multiplicativeExpression(_p int) (localctx IMultiplicativeExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewMultiplicativeExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IMultiplicativeExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 450
	p.EnterRecursionRule(localctx, 450, Java8ParserRULE_multiplicativeExpression, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2753)
		p.UnaryExpression()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2766)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 313, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2764)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 312, p.GetParserRuleContext()) {
			case 1:
				localctx = NewMultiplicativeExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, Java8ParserRULE_multiplicativeExpression)
				p.SetState(2755)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
					goto errorExit
				}
				{
					p.SetState(2756)
					p.Match(Java8ParserMUL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(2757)
					p.UnaryExpression()
				}

			case 2:
				localctx = NewMultiplicativeExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, Java8ParserRULE_multiplicativeExpression)
				p.SetState(2758)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
					goto errorExit
				}
				{
					p.SetState(2759)
					p.Match(Java8ParserDIV)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(2760)
					p.UnaryExpression()
				}

			case 3:
				localctx = NewMultiplicativeExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, Java8ParserRULE_multiplicativeExpression)
				p.SetState(2761)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
					goto errorExit
				}
				{
					p.SetState(2762)
					p.Match(Java8ParserMOD)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(2763)
					p.UnaryExpression()
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(2768)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 313, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnaryExpressionContext is an interface to support dynamic dispatch.
type IUnaryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PreIncrementExpression() IPreIncrementExpressionContext
	PreDecrementExpression() IPreDecrementExpressionContext
	ADD() antlr.TerminalNode
	UnaryExpression() IUnaryExpressionContext
	SUB() antlr.TerminalNode
	UnaryExpressionNotPlusMinus() IUnaryExpressionNotPlusMinusContext

	// IsUnaryExpressionContext differentiates from other interfaces.
	IsUnaryExpressionContext()
}

type UnaryExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnaryExpressionContext() *UnaryExpressionContext {
	var p = new(UnaryExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_unaryExpression
	return p
}

func InitEmptyUnaryExpressionContext(p *UnaryExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_unaryExpression
}

func (*UnaryExpressionContext) IsUnaryExpressionContext() {}

func NewUnaryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnaryExpressionContext {
	var p = new(UnaryExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_unaryExpression

	return p
}

func (s *UnaryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *UnaryExpressionContext) PreIncrementExpression() IPreIncrementExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPreIncrementExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPreIncrementExpressionContext)
}

func (s *UnaryExpressionContext) PreDecrementExpression() IPreDecrementExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPreDecrementExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPreDecrementExpressionContext)
}

func (s *UnaryExpressionContext) ADD() antlr.TerminalNode {
	return s.GetToken(Java8ParserADD, 0)
}

func (s *UnaryExpressionContext) UnaryExpression() IUnaryExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnaryExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnaryExpressionContext)
}

func (s *UnaryExpressionContext) SUB() antlr.TerminalNode {
	return s.GetToken(Java8ParserSUB, 0)
}

func (s *UnaryExpressionContext) UnaryExpressionNotPlusMinus() IUnaryExpressionNotPlusMinusContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnaryExpressionNotPlusMinusContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnaryExpressionNotPlusMinusContext)
}

func (s *UnaryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnaryExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterUnaryExpression(s)
	}
}

func (s *UnaryExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitUnaryExpression(s)
	}
}

func (p *Java8Parser) UnaryExpression() (localctx IUnaryExpressionContext) {
	localctx = NewUnaryExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 452, Java8ParserRULE_unaryExpression)
	p.SetState(2776)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case Java8ParserINC:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2769)
			p.PreIncrementExpression()
		}

	case Java8ParserDEC:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2770)
			p.PreDecrementExpression()
		}

	case Java8ParserADD:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2771)
			p.Match(Java8ParserADD)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2772)
			p.UnaryExpression()
		}

	case Java8ParserSUB:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2773)
			p.Match(Java8ParserSUB)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2774)
			p.UnaryExpression()
		}

	case Java8ParserBOOLEAN, Java8ParserBYTE, Java8ParserCHAR, Java8ParserDOUBLE, Java8ParserFLOAT, Java8ParserINT, Java8ParserLONG, Java8ParserNEW, Java8ParserSHORT, Java8ParserSUPER, Java8ParserTHIS, Java8ParserVOID, Java8ParserIntegerLiteral, Java8ParserFloatingPointLiteral, Java8ParserBooleanLiteral, Java8ParserCharacterLiteral, Java8ParserStringLiteral, Java8ParserNullLiteral, Java8ParserLPAREN, Java8ParserBANG, Java8ParserTILDE, Java8ParserIdentifier, Java8ParserAT:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2775)
			p.UnaryExpressionNotPlusMinus()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPreIncrementExpressionContext is an interface to support dynamic dispatch.
type IPreIncrementExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	INC() antlr.TerminalNode
	UnaryExpression() IUnaryExpressionContext

	// IsPreIncrementExpressionContext differentiates from other interfaces.
	IsPreIncrementExpressionContext()
}

type PreIncrementExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPreIncrementExpressionContext() *PreIncrementExpressionContext {
	var p = new(PreIncrementExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_preIncrementExpression
	return p
}

func InitEmptyPreIncrementExpressionContext(p *PreIncrementExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_preIncrementExpression
}

func (*PreIncrementExpressionContext) IsPreIncrementExpressionContext() {}

func NewPreIncrementExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PreIncrementExpressionContext {
	var p = new(PreIncrementExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_preIncrementExpression

	return p
}

func (s *PreIncrementExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PreIncrementExpressionContext) INC() antlr.TerminalNode {
	return s.GetToken(Java8ParserINC, 0)
}

func (s *PreIncrementExpressionContext) UnaryExpression() IUnaryExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnaryExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnaryExpressionContext)
}

func (s *PreIncrementExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PreIncrementExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PreIncrementExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterPreIncrementExpression(s)
	}
}

func (s *PreIncrementExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitPreIncrementExpression(s)
	}
}

func (p *Java8Parser) PreIncrementExpression() (localctx IPreIncrementExpressionContext) {
	localctx = NewPreIncrementExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 454, Java8ParserRULE_preIncrementExpression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2778)
		p.Match(Java8ParserINC)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2779)
		p.UnaryExpression()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPreDecrementExpressionContext is an interface to support dynamic dispatch.
type IPreDecrementExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DEC() antlr.TerminalNode
	UnaryExpression() IUnaryExpressionContext

	// IsPreDecrementExpressionContext differentiates from other interfaces.
	IsPreDecrementExpressionContext()
}

type PreDecrementExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPreDecrementExpressionContext() *PreDecrementExpressionContext {
	var p = new(PreDecrementExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_preDecrementExpression
	return p
}

func InitEmptyPreDecrementExpressionContext(p *PreDecrementExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_preDecrementExpression
}

func (*PreDecrementExpressionContext) IsPreDecrementExpressionContext() {}

func NewPreDecrementExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PreDecrementExpressionContext {
	var p = new(PreDecrementExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_preDecrementExpression

	return p
}

func (s *PreDecrementExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PreDecrementExpressionContext) DEC() antlr.TerminalNode {
	return s.GetToken(Java8ParserDEC, 0)
}

func (s *PreDecrementExpressionContext) UnaryExpression() IUnaryExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnaryExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnaryExpressionContext)
}

func (s *PreDecrementExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PreDecrementExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PreDecrementExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterPreDecrementExpression(s)
	}
}

func (s *PreDecrementExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitPreDecrementExpression(s)
	}
}

func (p *Java8Parser) PreDecrementExpression() (localctx IPreDecrementExpressionContext) {
	localctx = NewPreDecrementExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 456, Java8ParserRULE_preDecrementExpression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2781)
		p.Match(Java8ParserDEC)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2782)
		p.UnaryExpression()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnaryExpressionNotPlusMinusContext is an interface to support dynamic dispatch.
type IUnaryExpressionNotPlusMinusContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PostfixExpression() IPostfixExpressionContext
	TILDE() antlr.TerminalNode
	UnaryExpression() IUnaryExpressionContext
	BANG() antlr.TerminalNode
	CastExpression() ICastExpressionContext

	// IsUnaryExpressionNotPlusMinusContext differentiates from other interfaces.
	IsUnaryExpressionNotPlusMinusContext()
}

type UnaryExpressionNotPlusMinusContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnaryExpressionNotPlusMinusContext() *UnaryExpressionNotPlusMinusContext {
	var p = new(UnaryExpressionNotPlusMinusContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_unaryExpressionNotPlusMinus
	return p
}

func InitEmptyUnaryExpressionNotPlusMinusContext(p *UnaryExpressionNotPlusMinusContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_unaryExpressionNotPlusMinus
}

func (*UnaryExpressionNotPlusMinusContext) IsUnaryExpressionNotPlusMinusContext() {}

func NewUnaryExpressionNotPlusMinusContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnaryExpressionNotPlusMinusContext {
	var p = new(UnaryExpressionNotPlusMinusContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_unaryExpressionNotPlusMinus

	return p
}

func (s *UnaryExpressionNotPlusMinusContext) GetParser() antlr.Parser { return s.parser }

func (s *UnaryExpressionNotPlusMinusContext) PostfixExpression() IPostfixExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPostfixExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPostfixExpressionContext)
}

func (s *UnaryExpressionNotPlusMinusContext) TILDE() antlr.TerminalNode {
	return s.GetToken(Java8ParserTILDE, 0)
}

func (s *UnaryExpressionNotPlusMinusContext) UnaryExpression() IUnaryExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnaryExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnaryExpressionContext)
}

func (s *UnaryExpressionNotPlusMinusContext) BANG() antlr.TerminalNode {
	return s.GetToken(Java8ParserBANG, 0)
}

func (s *UnaryExpressionNotPlusMinusContext) CastExpression() ICastExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICastExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICastExpressionContext)
}

func (s *UnaryExpressionNotPlusMinusContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaryExpressionNotPlusMinusContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnaryExpressionNotPlusMinusContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterUnaryExpressionNotPlusMinus(s)
	}
}

func (s *UnaryExpressionNotPlusMinusContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitUnaryExpressionNotPlusMinus(s)
	}
}

func (p *Java8Parser) UnaryExpressionNotPlusMinus() (localctx IUnaryExpressionNotPlusMinusContext) {
	localctx = NewUnaryExpressionNotPlusMinusContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 458, Java8ParserRULE_unaryExpressionNotPlusMinus)
	p.SetState(2790)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 315, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2784)
			p.PostfixExpression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2785)
			p.Match(Java8ParserTILDE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2786)
			p.UnaryExpression()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2787)
			p.Match(Java8ParserBANG)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2788)
			p.UnaryExpression()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2789)
			p.CastExpression()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPostfixExpressionContext is an interface to support dynamic dispatch.
type IPostfixExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Primary() IPrimaryContext
	ExpressionName() IExpressionNameContext
	AllPostIncrementExpression_lf_postfixExpression() []IPostIncrementExpression_lf_postfixExpressionContext
	PostIncrementExpression_lf_postfixExpression(i int) IPostIncrementExpression_lf_postfixExpressionContext
	AllPostDecrementExpression_lf_postfixExpression() []IPostDecrementExpression_lf_postfixExpressionContext
	PostDecrementExpression_lf_postfixExpression(i int) IPostDecrementExpression_lf_postfixExpressionContext

	// IsPostfixExpressionContext differentiates from other interfaces.
	IsPostfixExpressionContext()
}

type PostfixExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPostfixExpressionContext() *PostfixExpressionContext {
	var p = new(PostfixExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_postfixExpression
	return p
}

func InitEmptyPostfixExpressionContext(p *PostfixExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_postfixExpression
}

func (*PostfixExpressionContext) IsPostfixExpressionContext() {}

func NewPostfixExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PostfixExpressionContext {
	var p = new(PostfixExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_postfixExpression

	return p
}

func (s *PostfixExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PostfixExpressionContext) Primary() IPrimaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimaryContext)
}

func (s *PostfixExpressionContext) ExpressionName() IExpressionNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionNameContext)
}

func (s *PostfixExpressionContext) AllPostIncrementExpression_lf_postfixExpression() []IPostIncrementExpression_lf_postfixExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPostIncrementExpression_lf_postfixExpressionContext); ok {
			len++
		}
	}

	tst := make([]IPostIncrementExpression_lf_postfixExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPostIncrementExpression_lf_postfixExpressionContext); ok {
			tst[i] = t.(IPostIncrementExpression_lf_postfixExpressionContext)
			i++
		}
	}

	return tst
}

func (s *PostfixExpressionContext) PostIncrementExpression_lf_postfixExpression(i int) IPostIncrementExpression_lf_postfixExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPostIncrementExpression_lf_postfixExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPostIncrementExpression_lf_postfixExpressionContext)
}

func (s *PostfixExpressionContext) AllPostDecrementExpression_lf_postfixExpression() []IPostDecrementExpression_lf_postfixExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPostDecrementExpression_lf_postfixExpressionContext); ok {
			len++
		}
	}

	tst := make([]IPostDecrementExpression_lf_postfixExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPostDecrementExpression_lf_postfixExpressionContext); ok {
			tst[i] = t.(IPostDecrementExpression_lf_postfixExpressionContext)
			i++
		}
	}

	return tst
}

func (s *PostfixExpressionContext) PostDecrementExpression_lf_postfixExpression(i int) IPostDecrementExpression_lf_postfixExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPostDecrementExpression_lf_postfixExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPostDecrementExpression_lf_postfixExpressionContext)
}

func (s *PostfixExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PostfixExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PostfixExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterPostfixExpression(s)
	}
}

func (s *PostfixExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitPostfixExpression(s)
	}
}

func (p *Java8Parser) PostfixExpression() (localctx IPostfixExpressionContext) {
	localctx = NewPostfixExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 460, Java8ParserRULE_postfixExpression)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2794)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 316, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2792)
			p.Primary()
		}

	case 2:
		{
			p.SetState(2793)
			p.ExpressionName()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.SetState(2800)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 318, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(2798)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetTokenStream().LA(1) {
			case Java8ParserINC:
				{
					p.SetState(2796)
					p.PostIncrementExpression_lf_postfixExpression()
				}

			case Java8ParserDEC:
				{
					p.SetState(2797)
					p.PostDecrementExpression_lf_postfixExpression()
				}

			default:
				p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				goto errorExit
			}

		}
		p.SetState(2802)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 318, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPostIncrementExpressionContext is an interface to support dynamic dispatch.
type IPostIncrementExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PostfixExpression() IPostfixExpressionContext
	INC() antlr.TerminalNode

	// IsPostIncrementExpressionContext differentiates from other interfaces.
	IsPostIncrementExpressionContext()
}

type PostIncrementExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPostIncrementExpressionContext() *PostIncrementExpressionContext {
	var p = new(PostIncrementExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_postIncrementExpression
	return p
}

func InitEmptyPostIncrementExpressionContext(p *PostIncrementExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_postIncrementExpression
}

func (*PostIncrementExpressionContext) IsPostIncrementExpressionContext() {}

func NewPostIncrementExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PostIncrementExpressionContext {
	var p = new(PostIncrementExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_postIncrementExpression

	return p
}

func (s *PostIncrementExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PostIncrementExpressionContext) PostfixExpression() IPostfixExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPostfixExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPostfixExpressionContext)
}

func (s *PostIncrementExpressionContext) INC() antlr.TerminalNode {
	return s.GetToken(Java8ParserINC, 0)
}

func (s *PostIncrementExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PostIncrementExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PostIncrementExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterPostIncrementExpression(s)
	}
}

func (s *PostIncrementExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitPostIncrementExpression(s)
	}
}

func (p *Java8Parser) PostIncrementExpression() (localctx IPostIncrementExpressionContext) {
	localctx = NewPostIncrementExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 462, Java8ParserRULE_postIncrementExpression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2803)
		p.PostfixExpression()
	}
	{
		p.SetState(2804)
		p.Match(Java8ParserINC)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPostIncrementExpression_lf_postfixExpressionContext is an interface to support dynamic dispatch.
type IPostIncrementExpression_lf_postfixExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	INC() antlr.TerminalNode

	// IsPostIncrementExpression_lf_postfixExpressionContext differentiates from other interfaces.
	IsPostIncrementExpression_lf_postfixExpressionContext()
}

type PostIncrementExpression_lf_postfixExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPostIncrementExpression_lf_postfixExpressionContext() *PostIncrementExpression_lf_postfixExpressionContext {
	var p = new(PostIncrementExpression_lf_postfixExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_postIncrementExpression_lf_postfixExpression
	return p
}

func InitEmptyPostIncrementExpression_lf_postfixExpressionContext(p *PostIncrementExpression_lf_postfixExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_postIncrementExpression_lf_postfixExpression
}

func (*PostIncrementExpression_lf_postfixExpressionContext) IsPostIncrementExpression_lf_postfixExpressionContext() {
}

func NewPostIncrementExpression_lf_postfixExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PostIncrementExpression_lf_postfixExpressionContext {
	var p = new(PostIncrementExpression_lf_postfixExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_postIncrementExpression_lf_postfixExpression

	return p
}

func (s *PostIncrementExpression_lf_postfixExpressionContext) GetParser() antlr.Parser {
	return s.parser
}

func (s *PostIncrementExpression_lf_postfixExpressionContext) INC() antlr.TerminalNode {
	return s.GetToken(Java8ParserINC, 0)
}

func (s *PostIncrementExpression_lf_postfixExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PostIncrementExpression_lf_postfixExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PostIncrementExpression_lf_postfixExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterPostIncrementExpression_lf_postfixExpression(s)
	}
}

func (s *PostIncrementExpression_lf_postfixExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitPostIncrementExpression_lf_postfixExpression(s)
	}
}

func (p *Java8Parser) PostIncrementExpression_lf_postfixExpression() (localctx IPostIncrementExpression_lf_postfixExpressionContext) {
	localctx = NewPostIncrementExpression_lf_postfixExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 464, Java8ParserRULE_postIncrementExpression_lf_postfixExpression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2806)
		p.Match(Java8ParserINC)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPostDecrementExpressionContext is an interface to support dynamic dispatch.
type IPostDecrementExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PostfixExpression() IPostfixExpressionContext
	DEC() antlr.TerminalNode

	// IsPostDecrementExpressionContext differentiates from other interfaces.
	IsPostDecrementExpressionContext()
}

type PostDecrementExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPostDecrementExpressionContext() *PostDecrementExpressionContext {
	var p = new(PostDecrementExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_postDecrementExpression
	return p
}

func InitEmptyPostDecrementExpressionContext(p *PostDecrementExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_postDecrementExpression
}

func (*PostDecrementExpressionContext) IsPostDecrementExpressionContext() {}

func NewPostDecrementExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PostDecrementExpressionContext {
	var p = new(PostDecrementExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_postDecrementExpression

	return p
}

func (s *PostDecrementExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PostDecrementExpressionContext) PostfixExpression() IPostfixExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPostfixExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPostfixExpressionContext)
}

func (s *PostDecrementExpressionContext) DEC() antlr.TerminalNode {
	return s.GetToken(Java8ParserDEC, 0)
}

func (s *PostDecrementExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PostDecrementExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PostDecrementExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterPostDecrementExpression(s)
	}
}

func (s *PostDecrementExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitPostDecrementExpression(s)
	}
}

func (p *Java8Parser) PostDecrementExpression() (localctx IPostDecrementExpressionContext) {
	localctx = NewPostDecrementExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 466, Java8ParserRULE_postDecrementExpression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2808)
		p.PostfixExpression()
	}
	{
		p.SetState(2809)
		p.Match(Java8ParserDEC)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPostDecrementExpression_lf_postfixExpressionContext is an interface to support dynamic dispatch.
type IPostDecrementExpression_lf_postfixExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DEC() antlr.TerminalNode

	// IsPostDecrementExpression_lf_postfixExpressionContext differentiates from other interfaces.
	IsPostDecrementExpression_lf_postfixExpressionContext()
}

type PostDecrementExpression_lf_postfixExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPostDecrementExpression_lf_postfixExpressionContext() *PostDecrementExpression_lf_postfixExpressionContext {
	var p = new(PostDecrementExpression_lf_postfixExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_postDecrementExpression_lf_postfixExpression
	return p
}

func InitEmptyPostDecrementExpression_lf_postfixExpressionContext(p *PostDecrementExpression_lf_postfixExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_postDecrementExpression_lf_postfixExpression
}

func (*PostDecrementExpression_lf_postfixExpressionContext) IsPostDecrementExpression_lf_postfixExpressionContext() {
}

func NewPostDecrementExpression_lf_postfixExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PostDecrementExpression_lf_postfixExpressionContext {
	var p = new(PostDecrementExpression_lf_postfixExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_postDecrementExpression_lf_postfixExpression

	return p
}

func (s *PostDecrementExpression_lf_postfixExpressionContext) GetParser() antlr.Parser {
	return s.parser
}

func (s *PostDecrementExpression_lf_postfixExpressionContext) DEC() antlr.TerminalNode {
	return s.GetToken(Java8ParserDEC, 0)
}

func (s *PostDecrementExpression_lf_postfixExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PostDecrementExpression_lf_postfixExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PostDecrementExpression_lf_postfixExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterPostDecrementExpression_lf_postfixExpression(s)
	}
}

func (s *PostDecrementExpression_lf_postfixExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitPostDecrementExpression_lf_postfixExpression(s)
	}
}

func (p *Java8Parser) PostDecrementExpression_lf_postfixExpression() (localctx IPostDecrementExpression_lf_postfixExpressionContext) {
	localctx = NewPostDecrementExpression_lf_postfixExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 468, Java8ParserRULE_postDecrementExpression_lf_postfixExpression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2811)
		p.Match(Java8ParserDEC)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICastExpressionContext is an interface to support dynamic dispatch.
type ICastExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LPAREN() antlr.TerminalNode
	PrimitiveType() IPrimitiveTypeContext
	RPAREN() antlr.TerminalNode
	UnaryExpression() IUnaryExpressionContext
	ReferenceType() IReferenceTypeContext
	UnaryExpressionNotPlusMinus() IUnaryExpressionNotPlusMinusContext
	AllAdditionalBound() []IAdditionalBoundContext
	AdditionalBound(i int) IAdditionalBoundContext
	LambdaExpression() ILambdaExpressionContext

	// IsCastExpressionContext differentiates from other interfaces.
	IsCastExpressionContext()
}

type CastExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCastExpressionContext() *CastExpressionContext {
	var p = new(CastExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_castExpression
	return p
}

func InitEmptyCastExpressionContext(p *CastExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Java8ParserRULE_castExpression
}

func (*CastExpressionContext) IsCastExpressionContext() {}

func NewCastExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CastExpressionContext {
	var p = new(CastExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Java8ParserRULE_castExpression

	return p
}

func (s *CastExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *CastExpressionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserLPAREN, 0)
}

func (s *CastExpressionContext) PrimitiveType() IPrimitiveTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimitiveTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimitiveTypeContext)
}

func (s *CastExpressionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(Java8ParserRPAREN, 0)
}

func (s *CastExpressionContext) UnaryExpression() IUnaryExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnaryExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnaryExpressionContext)
}

func (s *CastExpressionContext) ReferenceType() IReferenceTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReferenceTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReferenceTypeContext)
}

func (s *CastExpressionContext) UnaryExpressionNotPlusMinus() IUnaryExpressionNotPlusMinusContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnaryExpressionNotPlusMinusContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnaryExpressionNotPlusMinusContext)
}

func (s *CastExpressionContext) AllAdditionalBound() []IAdditionalBoundContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAdditionalBoundContext); ok {
			len++
		}
	}

	tst := make([]IAdditionalBoundContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAdditionalBoundContext); ok {
			tst[i] = t.(IAdditionalBoundContext)
			i++
		}
	}

	return tst
}

func (s *CastExpressionContext) AdditionalBound(i int) IAdditionalBoundContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAdditionalBoundContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAdditionalBoundContext)
}

func (s *CastExpressionContext) LambdaExpression() ILambdaExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILambdaExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILambdaExpressionContext)
}

func (s *CastExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CastExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CastExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.EnterCastExpression(s)
	}
}

func (s *CastExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Java8ParserListener); ok {
		listenerT.ExitCastExpression(s)
	}
}

func (p *Java8Parser) CastExpression() (localctx ICastExpressionContext) {
	localctx = NewCastExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 470, Java8ParserRULE_castExpression)
	var _la int

	p.SetState(2840)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 321, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2813)
			p.Match(Java8ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2814)
			p.PrimitiveType()
		}
		{
			p.SetState(2815)
			p.Match(Java8ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2816)
			p.UnaryExpression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2818)
			p.Match(Java8ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2819)
			p.ReferenceType()
		}
		p.SetState(2823)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == Java8ParserBITAND {
			{
				p.SetState(2820)
				p.AdditionalBound()
			}

			p.SetState(2825)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2826)
			p.Match(Java8ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2827)
			p.UnaryExpressionNotPlusMinus()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2829)
			p.Match(Java8ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2830)
			p.ReferenceType()
		}
		p.SetState(2834)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == Java8ParserBITAND {
			{
				p.SetState(2831)
				p.AdditionalBound()
			}

			p.SetState(2836)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2837)
			p.Match(Java8ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2838)
			p.LambdaExpression()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

func (p *Java8Parser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 25:
		var t *PackageNameContext = nil
		if localctx != nil {
			t = localctx.(*PackageNameContext)
		}
		return p.PackageName_Sempred(t, predIndex)

	case 27:
		var t *PackageOrTypeNameContext = nil
		if localctx != nil {
			t = localctx.(*PackageOrTypeNameContext)
		}
		return p.PackageOrTypeName_Sempred(t, predIndex)

	case 30:
		var t *AmbiguousNameContext = nil
		if localctx != nil {
			t = localctx.(*AmbiguousNameContext)
		}
		return p.AmbiguousName_Sempred(t, predIndex)

	case 216:
		var t *ConditionalOrExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ConditionalOrExpressionContext)
		}
		return p.ConditionalOrExpression_Sempred(t, predIndex)

	case 217:
		var t *ConditionalAndExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ConditionalAndExpressionContext)
		}
		return p.ConditionalAndExpression_Sempred(t, predIndex)

	case 218:
		var t *InclusiveOrExpressionContext = nil
		if localctx != nil {
			t = localctx.(*InclusiveOrExpressionContext)
		}
		return p.InclusiveOrExpression_Sempred(t, predIndex)

	case 219:
		var t *ExclusiveOrExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExclusiveOrExpressionContext)
		}
		return p.ExclusiveOrExpression_Sempred(t, predIndex)

	case 220:
		var t *AndExpressionContext = nil
		if localctx != nil {
			t = localctx.(*AndExpressionContext)
		}
		return p.AndExpression_Sempred(t, predIndex)

	case 221:
		var t *EqualityExpressionContext = nil
		if localctx != nil {
			t = localctx.(*EqualityExpressionContext)
		}
		return p.EqualityExpression_Sempred(t, predIndex)

	case 222:
		var t *RelationalExpressionContext = nil
		if localctx != nil {
			t = localctx.(*RelationalExpressionContext)
		}
		return p.RelationalExpression_Sempred(t, predIndex)

	case 223:
		var t *ShiftExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ShiftExpressionContext)
		}
		return p.ShiftExpression_Sempred(t, predIndex)

	case 224:
		var t *AdditiveExpressionContext = nil
		if localctx != nil {
			t = localctx.(*AdditiveExpressionContext)
		}
		return p.AdditiveExpression_Sempred(t, predIndex)

	case 225:
		var t *MultiplicativeExpressionContext = nil
		if localctx != nil {
			t = localctx.(*MultiplicativeExpressionContext)
		}
		return p.MultiplicativeExpression_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *Java8Parser) PackageName_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Java8Parser) PackageOrTypeName_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 1:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Java8Parser) AmbiguousName_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 2:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Java8Parser) ConditionalOrExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 3:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Java8Parser) ConditionalAndExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 4:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Java8Parser) InclusiveOrExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 5:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Java8Parser) ExclusiveOrExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 6:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Java8Parser) AndExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 7:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Java8Parser) EqualityExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 8:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Java8Parser) RelationalExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 10:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 13:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 14:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Java8Parser) ShiftExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 15:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 16:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 17:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Java8Parser) AdditiveExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 18:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 19:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Java8Parser) MultiplicativeExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 20:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 21:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 22:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
