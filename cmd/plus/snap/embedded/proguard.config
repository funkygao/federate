# 指定要混淆的输入jar文件
-injars {{.InJar}}

# 指定混淆后的输出jar文件位置
-outjars {{.OutJar}}

# 声明Java运行时库的位置，防止ProGuard混淆这些核心类
-libraryjars <java.home>/lib/rt.jar
-libraryjars <java.home>/lib/jce.jar
-libraryjars <java.home>/lib/jsse.jar

# 声明其他需要引用但不应被混淆的外部库
-libraryjars {{.LibJars}}

# 避免生成大小写混合的类名，防止在大小写敏感的文件系统中出现问题
-dontusemixedcaseclassnames

# 混淆所有类，包括非公开的库类，以确保完整性
-dontskipnonpubliclibraryclasses

# 保留非公开库类的所有成员，避免潜在的兼容性问题
-dontskipnonpubliclibraryclassmembers

# 保留所有注解信息，这对于依赖反射的框架至关重要
-keepattributes *Annotation*

# 保留方法的泛型签名，确保反射操作的正确性
-keepattributes Signature

# 保留所有类和接口的完整结构，实质上禁用了混淆
-keep class ** { *; }
-keep interface ** { *; }

# 保留所有公共和保护成员，维持API的完整性
-keep public class * {
    public protected *;
}

# 完整保留所有枚举类，因为枚举常通过名称被引用
-keep class * extends java.lang.Enum {
    *;
}

# 保留所有可序列化的类，确保序列化功能正常
-keep class * implements java.io.Serializable {
    *;
}

# 保留可序列化类的特定成员，维持序列化和反序列化的正确性
-keepclassmembers class * implements java.io.Serializable {
    static final long serialVersionUID;
    private static final java.io.ObjectStreamField[] serialPersistentFields;
    !static !transient <fields>;
    private void writeObject(java.io.ObjectOutputStream);
    private void readObject(java.io.ObjectInputStream);
    java.lang.Object writeReplace();
    java.lang.Object readResolve();
}

# 保留带有Spring和Java依赖注入注解的成员，确保依赖注入正常工作
-keepclassmembers class * {
    @org.springframework.beans.factory.annotation.Autowired *;
    @javax.inject.Inject *;
}

# 保留用于动态类加载的特定方法名，这些方法通常用于反射操作
-keepclassmembernames class * {
    java.lang.Class class$(java.lang.String);
    java.lang.Class class$(java.lang.String, boolean);
}

# 保留所有JNI native方法，因为这些方法名不能被混淆
-keepclasseswithmembernames class * {
    native <methods>;
}

# 保留枚举类的values和valueOf方法，这些是枚举类的必要方法
-keepclassmembers enum * {
    public static **[] values();
    public static ** valueOf(java.lang.String);
}

# 忽略所有警告信息，可能会掩盖潜在问题，使用时需谨慎
-dontwarn **

# 输出详细的混淆过程信息，有助于调试和问题排查
-verbose

# 禁用代码优化，仅进行混淆，可能会影响运行时性能但能加快混淆速度
-dontoptimize
