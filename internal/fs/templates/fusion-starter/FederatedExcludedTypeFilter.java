// Code generated by federate, DO NOT EDIT.
package {{.Package}};

import lombok.extern.slf4j.Slf4j;
import org.springframework.core.type.ClassMetadata;
import org.springframework.core.type.classreading.MetadataReader;
import org.springframework.core.type.classreading.MetadataReaderFactory;
import org.springframework.core.type.filter.TypeFilter;

import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

@Slf4j
public class FederatedExcludedTypeFilter implements TypeFilter {
    private static final Set<String> EXCLUDED_CLASSES = new HashSet<>(50);

    @Override
    public boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory) throws IOException {
        ClassMetadata classMetadata = metadataReader.getClassMetadata();
        String className = classMetadata.getClassName();
        boolean excluded = EXCLUDED_CLASSES.contains(className);
        if (excluded) {
            log.info("excluded {}", className);
        }

        return excluded;
    }

    public synchronized static void exclude(Class<?> clazz) {
        EXCLUDED_CLASSES.add(clazz.getCanonicalName());
    }

}
