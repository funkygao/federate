// Code generated by federate, DO NOT EDIT.
package {{.Package}};

import lombok.extern.slf4j.Slf4j;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.core.io.DefaultResourceLoader;
import org.springframework.core.io.Resource;

import java.io.File;
import java.io.IOException;
import java.net.URL;

@Slf4j
public class FederatedResourceLoader extends DefaultResourceLoader {
    private static final Resource RESOURCE_IGNORED = new ByteArrayResource(new byte[0]);

    public FederatedResourceLoader(ClassLoader classLoader) {
        super(classLoader);
    }

    @Override
    public Resource getResource(String location) {
        // @ImportResource, @PropertySource, META-INF/services/
        // <context:property-placeholder location="classpath:important.properties"/>
        if (location.equals("classpath:important.properties")) {

        }

        if (location.equals("classpath:strategy/shelflife-status-config.xml")) {
            log.info("demo hijack resource");
            location = "federated/wms-stock/strategy/shelflife-status-config.xml";
        }

        Resource resource = super.getResource(location);
        String realPath = resourceRealLocation(location, resource);
        log.debug("{}: {}", location, realPath);

        if ("classpath:/application.yml".equals(location)) { // FIXME
            log.warn("Ignore {}: {}", location, realPath);
            return RESOURCE_IGNORED;
        }
        return resource;
    }

    private String resourceRealLocation(String location, Resource resource) {
        try {
            File file = resource.getFile();
            return file.getAbsolutePath();
        } catch (IOException e) {
            try {
                URL url = resource.getURL();
                if (url.getProtocol().equals("jar")) {
                    String jarPath = url.getPath().substring(5, url.getPath().indexOf("!"));
                    return jarPath;
                } else {
                    return url.getPath();
                }
            } catch (IOException ex) {
                log.error("{} {}, {}", location, resource, ex.getMessage());
            }
        }

        return "ResourceNotFound";
    }

}
