// Code generated by federate, DO NOT EDIT.
package {{.Package}};

import lombok.extern.slf4j.Slf4j;
import org.slf4j.LoggerFactory;
import org.springframework.context.ApplicationEvent;
import org.springframework.context.ApplicationListener;
import org.springframework.boot.context.event.ApplicationFailedEvent;

@Slf4j
public class FederatedApplicationListener implements ApplicationListener<ApplicationEvent> {
    private static final String LOGGER_FACTORY_METHOD_STOP = "stop";

    @Override
    public void onApplicationEvent(ApplicationEvent event) {
        if (event instanceof ApplicationFailedEvent) {
            handleApplicationFailedEvent((ApplicationFailedEvent) event);
        }
    }

    private void handleApplicationFailedEvent(ApplicationFailedEvent event) {
        if ({{.Abort}}) {
            log.error("Application failed to start. Exiting...", event.getException());
            
            flushLogs();

            // 退出应用程序，否则假死
            System.exit(1);
        }
    }

    private void flushLogs() {
        // 尝试刷新 Logback 日志
        try {
            Class<?> logbackLoggerContext = Class.forName("ch.qos.logback.classic.LoggerContext");
            if (LoggerFactory.getILoggerFactory().getClass().isAssignableFrom(logbackLoggerContext)) {
                LoggerFactory.getILoggerFactory().getClass().getMethod(LOGGER_FACTORY_METHOD_STOP).invoke(LoggerFactory.getILoggerFactory());
                log.info("Flushed Logback logs");
                return;
            }
        } catch (Exception ignored) {
            log.debug("Logback not available."); 
        }

        // 尝试刷新 Log4j2 日志
        try {
            Class<?> log4jLoggerContext = Class.forName("org.apache.logging.log4j.LogManager");
            Object logContext = log4jLoggerContext.getMethod("getContext", boolean.class).invoke(null, false);
            Class<?> log4jLoggerContextClass = Class.forName("org.apache.logging.log4j.core.LoggerContext");
            if (log4jLoggerContextClass.isInstance(logContext)) {
                log4jLoggerContextClass.getMethod(LOGGER_FACTORY_METHOD_STOP).invoke(logContext);
                log.info("Flushed Log4j2 logs");
                return;
            }
        } catch (Exception ignored) {
            log.debug("Log4j2 not available.");
        }

        log.warn("Unable to flush logs. Neither Logback nor Log4j2 were detected.");
    }
}
