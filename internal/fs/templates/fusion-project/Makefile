# Generated by federate, DO NOT EDIT.
SHELL := /bin/bash
.SILENT:

MANIFEST_FILE ?= manifest.yaml
FEDERATE_CMD ?= federate
INVENTORY_CMD := $(FEDERATE_CMD) util inventory -i $(MANIFEST_FILE)
ENV ?=

help: 
	awk 'BEGIN {FS = ":.*##"; printf "Usage:\n  make \033[36mENV=<env> <target>\033[0m\n"} /^[a-zA-Z_0-9-]+:.*?##/ { printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2 } /^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) } /^##[^@]/ { printf "%s\n", substr($$0, 4) }' $(MAKEFILE_LIST)

##@ Submodule: Synchronize submodules and inspect local changes

pull:clean ## Pull submodules to latest remote commits.
	echo "‚òïÔ∏è Pulling submodules to latest remote commits ..."
	git submodule update --init --recursive --remote
	git diff --quiet --exit-code HEAD || echo "üç∫ Submodule hashes have changed. Manual commit required."

init:checkenv clean
	echo "‚òïÔ∏è Config all submodules repository for $$ENV environment"
	$(INVENTORY_CMD) -f init-submodules -e $$ENV | while read cmd; do \
		echo "   Executing: $$cmd"; \
		eval $$cmd; \
	done
	git submodule update --init --recursive
	echo "üç∫ Submodules synchronized for $$ENV environment."

dirty: ## Display a summary of local changes.
	git submodule foreach --recursive 'git diff --stat'

diff: ## Display detailed local changes.
	git submodule foreach --recursive 'git diff --ignore-space-at-eol -w -b --ignore-all-space --ignore-blank-lines'

stage:
	git submodule foreach 'if ! git diff --quiet; then git add . && echo "Changes staged"; fi'

clean:
	echo "‚òïÔ∏è Restoring submodules repository ..."
	for repo in $$($(INVENTORY_CMD) -f repo-list); do \
		if [ -d "$$repo" ]; then \
			echo "   Checking out $$repo"; \
			(cd $$repo && git checkout -q .) || echo "Failed to checkout $$repo"; \
		fi; \
	done
	rm -rf {{.FusionProjectName}}

checkenv:
	if [ -z "$(ENV)" ]; then \
		echo "Error: ENV is not set. Please use 'make ENV=<env>'"; \
		exit 1; \
	fi

##@ Fuse: fusion-start -> consolidate -> run -> jdos

fusion-start: ## Scaffold the fusion-starter module.
	$(FEDERATE_CMD) microservice fusion-start -i $(MANIFEST_FILE)

consolidate: ## Generate and pacakge {{.FusionProjectName}}.
	$(MAKE) init
	echo
	echo "‚òïÔ∏è Consolidating the federated project ..."
	$(call measure_time, $(FEDERATE_CMD) microservice consolidate --yes --silent=false -i $(MANIFEST_FILE))
	echo
	if [ "$(sci)" != "1" ]; then \
		echo "‚òïÔ∏è Local installing the Instrumented Components ..."; \
		for repo in $$($(INVENTORY_CMD) -f components); do \
			profile=$$($(INVENTORY_CMD) -f maven-profile -r $$repo -e $$ENV); \
			modules=$$($(INVENTORY_CMD) -f maven-modules -r $$repo); \
			echo "   Installing $$repo with profile:$$profile on modules:$$modules"; \
			$(call measure_time, (cd $$repo && mvn clean install -q -U -pl ":$$modules" -P"$$profile" -am -T8 -Dmaven.test.skip=true -Dfederate.packaging=true)) || exit 1; \
		done; \
	else \
		echo "‚òïÔ∏è Skipped Components Installation"; \
	fi
	$(call measure_time, $(MAKE) package)
	echo "üç∫ {{.FusionProjectName}} consolidated and installed!"

run: ## Debug {{.FusionProjectName}} locally.
	$(MAKE) -C {{.FusionProjectName}} run

jdos: ## Generate CI/CD help for JDOS 3.0.
	$(FEDERATE_CMD) microservice jdos -i $(MANIFEST_FILE)

package:
	echo "‚òïÔ∏è Installing {{.FusionProjectName}} ..."
	mvn install -q -T8 -Dmaven.artifact.threads=16
	echo "   {{.FusionProjectName}} installed"

##@ Explore: Post-Fuse Phase

discover: ## Step-by-step guide for detecting potential conflicts.
	$(FEDERATE_CMD) debug wizard --yes -i $(MANIFEST_FILE)

inspect: ## Inspect indirect conflict risk before deployment.
	$(MAKE) -C {{.FusionProjectName}} inspect

optimize: ## Identify potential opportunities for optimization.
	$(FEDERATE_CMD) microservice optimize --yes --verbosity 3 -i $(MANIFEST_FILE)

# handy local debug targets: manual update submodule files then install, ready for 'make run'
{{- range .Components }}

.PHONY: {{.}}
{{.}}:checkenv
	modules=$$($(INVENTORY_CMD) -f maven-modules -r {{.}}); \
	profile=$$($(INVENTORY_CMD) -f maven-profile -r {{.}} -e $$ENV); \
	(cd {{.}} && mvn install -pl ":$$modules" -P"$$profile" -am -T8 -Dmaven.test.skip=true -Dfederate.packaging=true)
	$(MAKE) package
{{- end }}

define measure_time
	start=$$(date +%s); \
	set -e; \
	$\$1; \
	end=$$(date +%s); \
	runtime=$$((end-start)); \
	echo "‚è±Ô∏è  Time taken: $$runtime seconds"
endef
