# Generated by federate, DO NOT EDIT.
SHELL := /bin/bash
.SILENT:

FEDERATE_CMD ?= federate
INVENTORY_CMD := $(FEDERATE_CMD) util inventory
ENV ?=

##@ General Options

##   Use sci=1 with merge targets to Skip Components Installation.

help: 
	awk 'BEGIN {FS = ":.*##"; printf "\nUsage:\n  make \033[36mENV=<env> <target>\033[0m\n"} /^[a-zA-Z_0-9-]+:.*?##/ { printf "  \033[36m%-30s\033[0m %s\n", $$1, $$2 } /^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) } /^##[^@]/ { printf "%s\n", substr($$0, 4) }' $(MAKEFILE_LIST)

##@ Submodule

sync-submodules: ## Clean and synchronize submodules to latest remote commits.
	if [ -z "$(ENV)" ]; then \
		echo "Error: ENV is not set. Please use 'make ENV=<env>'"; \
		exit 1; \
	fi
	$(MAKE) restore-submodules
	echo "‚òïÔ∏è Config all submodules repository for $$ENV environment"
	$(INVENTORY_CMD) -f sync-submodules -e $$ENV | while read cmd; do \
		echo "   Executing: $$cmd"; \
		eval $$cmd; \
	done
	echo "‚òïÔ∏è Syncing all submodules repository for $$ENV environment"
	git submodule update --init --recursive --remote
	echo "üç∫ Submodules synchronized for $$ENV environment."

diff-submodules: ## Display local changes compared with their original state.
	git submodule foreach --recursive 'git diff --ignore-space-at-eol -w -b'

restore-submodules:
	echo "‚òïÔ∏è Restoring submodules repository ..."
	for repo in $$($(INVENTORY_CMD) -f repo-list); do \
		if [ -d "$$repo" ]; then \
			echo "   Checking out $$repo"; \
			(cd $$repo && git checkout -q .) || echo "Failed to checkout $$repo"; \
		fi; \
	done

clean:restore-submodules
	rm -rf generated test.log

##@ Consolidate

fusion-start: ## Scaffold {{.FusionStarter}}: the fusion-starter module.
	if [ ! -f {{.FusionStarter}}/Makefile ]; then \
		echo "‚òïÔ∏è Scaffolding {{.FusionStarter}} ..."; \
		federate microservice fusion-start; \
	fi

consolidate:sync-submodules ## Synchronize submodules and generate the federated system for the specified environment.
	echo "‚òïÔ∏è Consolidating the federated project ..."
	federate microservice consolidate --yes --silent=true
	if [ "$(sci)" != "1" ]; then \
		echo "‚òïÔ∏è Local installing the Instrumented Components ..."; \
		for repo in $$($(INVENTORY_CMD) -f components); do \
			profile=$$($(INVENTORY_CMD) -f maven-profile -r $$repo -e $$ENV); \
			modules=$$($(INVENTORY_CMD) -f maven-modules -r $$repo); \
			echo "   Installing $$repo with profile:$$profile on modules:$$modules"; \
			(cd $$repo && mvn clean install -q -pl ":$$modules" -P"$$profile" -am -T8 -Dmaven.test.skip=true -Dfederate.packaging=true) || exit 1; \
		done; \
	else \
		echo "‚òïÔ∏è Skipped Components Installation"; \
	fi
	$(MAKE) package
	echo "üç∫ Congrat, consolidated!"

package: ## Build {{.FusionProjectName}} after consolidation.
	echo "‚òïÔ∏è Building {{.FusionProjectName}} ..."
	mvn package -q -T8 -Dmaven.artifact.threads=16

optimize: ## Optimize {{.FusionProjectName}} resource consumption.
	federate microservice optimize --yes --verbosity 3
